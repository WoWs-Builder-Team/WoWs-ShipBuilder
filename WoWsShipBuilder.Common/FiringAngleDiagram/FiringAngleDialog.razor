@implements IAsyncDisposable

@inject IJSRuntime Runtime
@inject ILocalizer Localizer
<MudDialog>
    <DialogContent>
        <canvas style="min-height: 300px; width: 100%; height: 70vh;" id="visualizer"></canvas>
        <MudText>@Localizer.GetAppLocalization(nameof(Translation.WebApp_ArtilleryAngleExplanation)).Localization</MudText>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    public MudDialogInstance DialogInstance { get; set; } = default!;

    [Parameter]
    public IEnumerable<GunDataContainer> GunDataContainers { get; set; } = default!;

    [Parameter]
    public bool IsArtillery { get; set; }

    private IJSObjectReference? module;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DialogInstance.Options.CloseOnEscapeKey = true;
        DialogInstance.Options.DisableBackdropClick = false;
        DialogInstance.Options.FullWidth = true;
        DialogInstance.Options.MaxWidth = MaxWidth.Medium;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            module = await Runtime.InvokeAsync<IJSObjectReference>("import", "/Dialogs/FiringAngleDialog.razor.js");
            await module.InvokeVoidAsync("drawVisualizer", GunDataContainers, IsArtillery);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.InvokeVoidAsync("cleanSubscriptions");
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

}