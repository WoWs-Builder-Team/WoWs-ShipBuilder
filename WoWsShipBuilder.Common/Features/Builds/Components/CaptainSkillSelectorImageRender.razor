@using WoWsShipBuilder.DataStructures
@using System.Text
@using WoWsShipBuilder.DataContainers
@using WoWsShipBuilder.Features.ShipStats.ViewModels
@using WoWsShipBuilder.DataStructures.Captain
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Utility
@inherits ReactiveComponentBase<WoWsShipBuilder.Features.ShipStats.ViewModels.CaptainSkillSelectorViewModel>
@inject ILocalizer Localizer

@if (ViewModel is not null)
{
    <MudPaper Outlined="true" Class="pa-3">
        <MudGrid Class="align-center" Justify="Justify.Center">
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    @Localizer.GetAppLocalization(nameof(Translation.CaptainSkillSelector_Points)).Localization @ViewModel.AssignedPoints/21
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Default" Align="Align.Center" Class="mt-1">
                    @Localizer.GetAppLocalization(Translation.ScreenshotWindow_Captain).Localization @Localizer.GetGameLocalization(ViewModel.SelectedCaptain!.Name).Localization
                </MudText>
            </MudItem>
            @foreach ((string skillName, var skill) in ViewModel.SkillList!)
            {
                <MudItem @key="skill.Skill.SkillNumber" Class="d-flex justify-center" xs="2" Style="@(GetOrder(skill.Skill.Tiers.Single(x => x.ShipClass == ShipClass)) + GetSubFix())">
                    <MudTooltip Placement="Placement.Right" Color="Color.Transparent" Delay="350">
                        <ChildContent>
                            <MudBadge Origin="Origin.TopRight" Color="Color.Success" Icon="@specialIconPath" BadgeClass="skill-special-icon" Overlap="true" Visible="@skill.Skill.IsEpic" Style="@GetImageStyle(skill)">
                                <MudBadge Content="@(ViewModel.SkillOrderList.IndexOf(skill.Skill) + 1)" Color="Color.Error" Origin="Origin.TopLeft" Overlap="true" BadgeClass="skill-order-number" Visible="@ShouldShowBadge(skill.Skill)">
                                    <MudPaper Outlined Elevation="0" Style="@(GetImageBreakpointStyle() + GetMudPaperBorderColor(skill))">
                                        <MudImage Width="@GetImageSize()" Height="@GetImageSize()" ObjectFit="ObjectFit.ScaleDown" Src="@("/_content/WoWsShipBuilder.Common/assets/Skills/" + ToSnakeCase(skillName) + ".png")" Style="@GetImageBreakpointStyle()" Class="pa-1"/>
                                    </MudPaper>
                                </MudBadge>
                            </MudBadge>
                        </ChildContent>
                        <TooltipContent>
                            <MudPaper Outlined="true" Style="max-width: 300px">
                                <MudStack Spacing="0" Class="pa-2">
                                    <MudText Align="Align.Center" Typo="Typo.h6">
                                        @Localizer.GetGameLocalization("SKILL_" + ToSnakeCase(skillName)).Localization
                                    </MudText>
                                    @{
                                        // this is here so we can have the call to the localizer only once, to share the value between the if and the mudtext
                                        string localization = Localizer.GetGameLocalization("SKILL_DESC_" + ToSnakeCase(skillName)).Localization;
                                        if (!string.IsNullOrWhiteSpace(localization))
                                        {
                                            <MudText Align="Align.Left" Typo="Typo.body2" Style="white-space: break-spaces">
                                                @localization
                                            </MudText>
                                        }
                                    }
                                    @if (skill.Modifiers is { Count: > 0 })
                                    {
                                        <MudDivider Light="true" Class="ma-1"/>
                                        foreach ((string modifierName, float modifierValue) in skill.Modifiers)
                                        {
                                            // this is here so we can have the call to the ModifierProcessor only once, to share the value between the if and the mudtext
                                            string modifierString = ModifierProcessor.GetUiModifierString(modifierName, modifierValue, ReturnFilter.All, Localizer);
                                            if (!string.IsNullOrWhiteSpace(modifierString))
                                            {
                                                <MudText Align="Align.Left" Typo="Typo.body2">
                                                    @modifierString
                                                </MudText>
                                            }
                                        }
                                    }
                                    @if (skill.ConditionalModifiers is { Count: > 0 })
                                    {
                                        <MudDivider Light="true" Class="ma-1"/>
                                        <MudText Align="Align.Left" Typo="Typo.body2" GutterBottom>
                                            @Localizer.GetGameLocalization(!string.IsNullOrWhiteSpace(skill.Skill.ConditionalTriggerDescription) ? skill.Skill.ConditionalTriggerDescription : "SKILL_TRIGGER_" + skill.Skill.ConditionalTriggerType).Localization
                                        </MudText>
                                        foreach ((string modifierName, float modifierValue) in skill.ConditionalModifiers)
                                        {
                                            // this is here so we can have the call to the ModifierProcessor only once, to share the value between the if and the mudtext
                                            string modifierString = ModifierProcessor.GetUiModifierString(modifierName, modifierValue, ReturnFilter.All, Localizer);
                                            if (!string.IsNullOrWhiteSpace(modifierString))
                                            {
                                                <MudText Align="Align.Left" Typo="Typo.body2">
                                                    @modifierString
                                                </MudText>
                                            }
                                        }
                                    }
                                </MudStack>
                            </MudPaper>
                        </TooltipContent>
                    </MudTooltip>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
}

@code {

    [Parameter]
    public ShipClass ShipClass { get; set; }

    [CascadingParameter]
    private Breakpoint Breakpoint { get; set; }

    private string specialIconPath = @"<path style=""fill:#ffffff;fill-opacity:1;"" d=""m 9.1521727,1.5579681 h 5.6956543 v 7.5942036 h 7.594205 v 5.6956533 h -7.594205 v 7.594206 H 9.1521727 V 14.847825 H 1.5579678 V 9.1521717 h 7.5942049 z""/>";

    private static string ToSnakeCase(string camelCaseString)
    {
        if (camelCaseString == null)
        {
            throw new ArgumentNullException(nameof(camelCaseString));
        }

        if (camelCaseString.Length < 2)
        {
            return camelCaseString;
        }

        var sb = new StringBuilder();
        sb.Append(char.ToLowerInvariant(camelCaseString[0]));
        for (var i = 1; i < camelCaseString.Length; ++i)
        {
            char c = camelCaseString[i];
            if (char.IsUpper(c))
            {
                sb.Append('_');
                sb.Append(char.ToLowerInvariant(c));
            }
            else
            {
                sb.Append(c);
            }
        }

        return sb.ToString();
    }

    private string GetSubFix()
    {
        return ShipClass != ShipClass.Submarine ? "" : "flex-basis: 20%; max-width: 20%;";
    }

    private string GetOrder(SkillPosition single)
    {
        return $"order: {single.Tier * 10 + single.XPosition};";
    }

    private bool ShouldShowBadge(Skill skill)
    {
        return ViewModel!.SkillOrderList.Any(x => x.SkillNumber.Equals(skill.SkillNumber));
    }

    private string GetImageStyle(SkillItemViewModel skillItem)
    {
        return ViewModel!.SkillOrderList.Any(x => x.SkillNumber.Equals(skillItem.Skill.SkillNumber)) ? string.Empty : "opacity: 0.4";
    }

    private int GetImageSize()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return 25;
            default:
                return 40;
        }
    }

    private string GetImageBreakpointStyle()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "min-width: 40px; width: 40px; height: 40px;";
            default:
                return "min-width: 55px; width: 55px; height: 55px;";
        }
    }

    private string GetMudPaperBorderColor(SkillItemViewModel skillItem)
    {
        return $" border-color: {(ViewModel!.SkillOrderList.Any(x => x.SkillNumber.Equals(skillItem.Skill.SkillNumber)) ? "#BC0606" : "var(--mud-palette-text-disabled)")};";
    }
}
