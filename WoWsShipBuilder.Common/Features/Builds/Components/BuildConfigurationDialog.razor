@using Prometheus
@using System.Collections.Concurrent
@using Microsoft.Extensions.Hosting
@using Microsoft.Extensions.Options
@using WoWsShipBuilder.DataStructures.Ship
@using WoWsShipBuilder.Features.Builds
@using WoWsShipBuilder.Features.LinkShortening
@using WoWsShipBuilder.Features.ShipStats.Components
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.GameData
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Metrics
@using WoWsShipBuilder.Infrastructure.Utility

@inherits ReactiveComponentBase<ShipBuildViewModel>
@implements IAsyncDisposable

@inject ILocalizer Localizer
@inject MetricsService MetricsService
@inject IHostEnvironment Environment
@inject ISnackbar Snackbar
@inject IOptions<LinkShorteningOptions> LinkShorteningOptions
@inject IJSRuntime Runtime

<MudDialog Style="max-height: 95vh; background-color: #282828">
    <DialogContent>
        <MudBreakpointProvider>
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                <MudGrid>
                    <MudItem xs="12" Class="d-flex align-center" Style="justify-content: center;">
                        <MudStack AlignItems="AlignItems.End" Row="true" Justify="Justify.SpaceEvenly" Class="mt-1 mb-n4">
                            @if (!SelectedContainer.Ship.Name.Equals("customShip"))
                            {
                                <MudImage Src="@($"{ImageBasePath}/{SelectedContainer.Ship.Index}.png")" Height="45"/>
                            }
                            <MudText Style="font-size: x-large">
                                @Localizer.GetGameLocalization(SelectedContainer.Ship.Index + "_FULL").Localization
                            </MudText>
                            <MudText Style="font-size: x-large">
                                @SelectedContainer.Ship.Tier.ToTierString()
                            </MudText>
                            <MudIcon Icon="@Helpers.GetIconFromClass(SelectedContainer.Ship.ShipClass, SelectedContainer.Ship.ShipCategory)" Size="Size.Large" ViewBox="-1 0 24 10"/>
                            @if (!SelectedContainer.Ship.Name.Equals("customShip"))
                            {
                                <MudImage Src="@Helpers.GetNationFlag(Environment, SelectedContainer.Ship.ShipNation, SelectedContainer.Ship.Index)" Height="45"/>
                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="2">
                        <MudList @bind-SelectedValue="selectedListValue" Dense Clickable Style="max-height: min(80vh, 850px); overflow-y: scroll;">
                            @for (var i = 0; i < Ships.Count; i++)
                            {
                                int index = i;
                                var shipData = Ships[index];
                                <MudListItem Value="index" OnClick="@(() => desktopTabs.ActivatePanel(index))">
                                    <MudText Color="Color.Secondary">
                                        @Localizer.GetGameLocalization(Ships[index].Ship.Index + "_FULL").Localization
                                    </MudText>
                                    <MudText Typo="Typo.body2" Class="ml-2" Color="Color.Secondary">
                                        @(Localizer.GetAppLocalization(Translation.ChartsWeb_Build).Localization + ": " + (buildNameDictionary.TryGetValue(shipData.Id, out string? value) ? value : !string.IsNullOrEmpty(shipData.Build?.BuildName) ? shipData.Build.BuildName : Build.DefaultBuildName))
                                    </MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudItem>
                    <MudItem xs="10">
                        <MudTabs PanelClass="tab-panel-build-config-dialog" Position="Position.Left" HideSlider ActivePanelIndexChanged="@OnActivePanelChanged" Class="tab-header-limited-height" @ref="desktopTabs">
                            @tabContent
                        </MudTabs>
                    </MudItem>
                </MudGrid>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudTabs Position="Position.Top" HideSlider ActivePanelIndexChanged="@OnActivePanelChanged">
                    @tabContent
                </MudTabs>
            </MudHidden>
        </MudBreakpointProvider>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel" Variant="Variant.Filled" Color="Color.Warning">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudButton Color="Color.Tertiary" OnClick="@ResetBuild" Variant="Variant.Filled">
            <MudText Typo="Typo.button">
                 @Localizer.GetAppLocalization(nameof(Translation.MainWindow_ResetBuild)).Localization
            </MudText>
        </MudButton>
        <MudButton Color="Color.Success" OnClick="@SaveBuilds" Variant="Variant.Filled" Disabled="@(ViewModel!.BuildName.Intersect(Path.GetInvalidFileNameChars()).Any() || ViewModel!.BuildName.Contains(';'))">
            <MudText Typo="Typo.button">
                 @Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_ConfirmButton)).Localization
            </MudText>
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    /// <summary>
    /// A read-only collection of <see cref="ShipBuildContainer"/> objects that contain the base data for the dialog.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyList<ShipBuildContainer> Ships { get; set; } = default!;

    /// <summary>
    /// The base path to use for ship images, assuming an image path matches the pattern {ImageBasePath}/{ShipIndex}.png with ImageBasePath containing also the protocol (https or http).
    /// <br/>
    /// <b>Note that the path should not end with a slash.</b>
    /// </summary>
    [Parameter, EditorRequired]
    public string ImageBasePath { get; set; } = default!;

    [Parameter]
    public bool SpecialAbilityDisabled { get; set; }

    private IJSObjectReference? module;

    private int selectedTab;

    private ShipBuildContainer SelectedContainer => Ships[selectedTab];

    private readonly ConcurrentDictionary<Guid, ShipBuildViewModel> vmCache = new();

    private string inputBuildString = string.Empty;

    private readonly Dictionary<Guid, string> buildNameDictionary = new();

    private readonly RenderFragment tabContent;

    private MudTabs desktopTabs = default!;

    private object selectedListValue = 0;

    private string inputBuildStringCache = string.Empty;

    private string? inputBuildStringValidationResultCache;

    private string buildString = string.Empty;

    public BuildConfigurationDialog()
    {
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
        tabContent = __builder =>
        {
            foreach (var shipData in Ships)
            {
                <MudTabPanel Text="@Localizer.GetGameLocalization(shipData.Ship.Index + "_FULL").Localization">
                    <MudGrid Class="align-content-space-between">
                        @if (ViewModel is not null)
                        {
                            <MudHidden Breakpoint="Breakpoint.MdAndUp"> @* Header with ship name and nation is only rendered within the tabs on mobile *@
                                <MudItem xs="12" Class="d-flex align-center" Style="justify-content: center;">
                                    <MudStack AlignItems="AlignItems.End" Row="true" Justify="Justify.SpaceEvenly" Class="mt-1 mb-n1">
                                        <MudImage Src="@($"{ImageBasePath}/{SelectedContainer.Ship.Index}.png")" Height="45"/>
                                        <MudText Style="font-size: x-large">
                                            @Localizer.GetGameLocalization(SelectedContainer.Ship.Index).Localization
                                        </MudText>
                                        <MudText Style="font-size: x-large">
                                            @SelectedContainer.Ship.Tier
                                        </MudText>
                                        <MudIcon Icon="@Helpers.GetIconFromClass(SelectedContainer.Ship.ShipClass, SelectedContainer.Ship.ShipCategory)" Size="Size.Large" ViewBox="-1 0 24 10"/>
                                        <MudImage Src="@Helpers.GetNationFlag(Environment, SelectedContainer.Ship.ShipNation, SelectedContainer.Ship.Index)" Height="45"/>
                                    </MudStack>
                                </MudItem>
                            </MudHidden>
                            <MudItem xs="12" md="6">
                                <MudStack>
                                    <div class="mt-0 mb-auto">
                                        <ShipModuleSelector ViewModel="@ViewModel.ShipModuleViewModel"/>
                                    </div>
                                    <div class="mt-0 mb-0">
                                        <ShipUpgradeSelector ViewModel="@ViewModel.UpgradePanelViewModel"/>
                                    </div>
                                    @if (shipData.Ship.ShipConsumable.Any())
                                    {
                                        <div class="mt-0" style="margin-bottom: -2px">
                                            <ConsumableSelector ViewModel="@ViewModel.ConsumableViewModel"/>
                                        </div>
                                    }
                                    @if (!SpecialAbilityDisabled && (shipData.Ship.SpecialAbility is not null || shipData.Ship.MainBatteryModuleList.Any(x => x.Value.BurstModeAbility is not null)))
                                    {
                                        <MudSwitch T="bool" @bind-Checked="ViewModel.SpecialAbilityActive" Color="Color.Info" Label="Activate special ability"/>
                                    }
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudStack>
                                    <CaptainSkillSelector ViewModel="@ViewModel.CaptainSkillSelectorViewModel" ShipClass="@ViewModel!.CurrentShip.ShipClass"/>
                                    <SignalSelector ViewModel="@ViewModel.SignalSelectorViewModel"/>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudStack Row="true" Justify="Justify.Center" Style="margin-top: -14px">
                                    <MudTextField @bind-Value="inputBuildString" Class="default-label-background" Immediate DebounceInterval="150" Validation="@(new Func<string, Task<string?>>(ValidateBuildString))" Clearable FullWidth Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Edit" Label="Alternative" Placeholder="@Localizer.SimpleAppLocalization(nameof(Translation.BuildStringInputDialog_EnterBuildStringOrLink))" Variant="Variant.Outlined"/>
                                    <MudButton Disabled="@(string.IsNullOrWhiteSpace(buildString))" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Style="margin-top: 6px" OnClick="@ImportBuildFromString">
                                        @Localizer.GetAppLocalization(Translation.BuildConfigurationDialog_Load).Localization
                                    </MudButton>
                                    <MudFileUpload T="IBrowserFile" FilesChanged="@FileSelected" Class="file-upload-full-height" Accept=".png">
                                        <ButtonTemplate>
                                            <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Image" Style="height: 100%;" for="@context">Import</MudButton>
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="ViewModel.BuildName" Immediate Validation="@(new Func<string, string?>(BuildValidation.ValidateBuildName))" DebounceInterval="150" Clearable FullWidth Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Edit" Label="Build Name" Placeholder="Enter build name" Variant="Variant.Outlined" Class="mt-n2 mb-0 default-label-background"/>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudSkeleton Height="69px"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSkeleton Height="600px"></MudSkeleton>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UpdateViewModel();

        // TODO Check why this Task.Run is even used and if it can be removed
        await Task.Run(() =>
        {
            foreach (var container in Ships.Skip(1))
            {
                var vm = LoadShipViewModel(container);
                vmCache.TryAdd(container.Id, vm);
                buildNameDictionary[container.Id] = !string.IsNullOrEmpty(container.Build?.BuildName) ? container.Build.BuildName : Build.DefaultBuildName;
            }
        });
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module ??= await Runtime.InvokeAsync<IJSObjectReference>("import", "/_content/WoWsShipBuilder.Common/scripts/buildImageDecoder.js");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Updates the currently active viewmodel.
    /// When possible, the new viewmodel will be retrieved from the <see cref="vmCache"/>.
    /// If it does not exist already, a new one will be created and added to the cache.
    /// <br/>
    /// This method will also update the build name field and the status of the special ability switch (only affects super ships).
    /// </summary>
    private void UpdateViewModel()
    {
        if (vmCache.TryGetValue(SelectedContainer.Id, out var vm))
        {
            ViewModel = vm;
        }
        else
        {
            ViewModel = LoadShipViewModel(SelectedContainer);
            vmCache.TryAdd(SelectedContainer.Id, ViewModel);
        }
    }

    private ShipBuildViewModel LoadShipViewModel(ShipBuildContainer shipBuildContainer)
    {
        MetricsService.ShipViewCount.WithLabels(shipBuildContainer.Ship.Index, Localizer.GetGameLocalization(shipBuildContainer.Ship.Index + "_FULL", AppConstants.DefaultCultureDetails).Localization).Inc();
        using (MetricsService.ShipViewModelInitDurationAverage.NewTimer())
        using (MetricsService.ShipViewModelInitDuration.NewTimer())
        {
            var vm = ShipBuildViewModel.Create(shipBuildContainer);
            foreach (int slot in shipBuildContainer.ActivatedConsumableSlots ?? Array.Empty<int>())
            {
                vm.ConsumableViewModel.ConsumableSlots[slot].ConsumableActivated = true;
            }
            return vm;
        }
    }

    private void SaveBuilds()
    {
        var result = new List<ShipBuildContainer>();
        foreach (var container in Ships)
        {
            result.Add(vmCache.TryGetValue(container.Id, out var vm) ? vm.CreateShipBuildContainerAsync(container) : container);
        }

        MudDialog.Close(DialogResult.Ok(result));
    }

    private async Task ResetBuild()
    {
        var vm = LoadShipViewModel(SelectedContainer with { Build = null, ActivatedConsumableSlots = null, SpecialAbilityActive = false });
        ViewModel = vm;
        vmCache[SelectedContainer.Id] = vm;
        await Task.Delay(1); // needed for the captain skill selector to rerender properly
    }

    private async Task ImportBuildFromString()
    {
        MetricsService.BuildImports.WithLabels("build-config-dialog", "string").Inc();
        await ImportBuild(SelectedContainer.Ship);
    }

    private async Task ImportBuild(Ship ship)
    {
        try
        {
            var build = Build.CreateBuildFromString(buildString);
            if (build.ShipIndex != ship.Index)
            {
                throw new FormatException();
            }

            ViewModel = LoadShipViewModel(ShipBuildContainer.CreateNew(ship, build, null));
            inputBuildString = string.Empty;
            buildString = string.Empty;
            vmCache[SelectedContainer.Id] = ViewModel;
            Snackbar.Add("Build successfully imported", Severity.Success);
            await Task.Delay(1); // needed for the captain skill selector to rerender properly
        }
        catch (FormatException)
        {
            Snackbar.Add("Failed to import build", Severity.Error);
        }
    }

    private async Task FileSelected(IBrowserFile? file)
    {
        if (file is not null && file.ContentType.Equals("image/png"))
        {
            var result = await module!.InvokeAsync<string>("findUploadAndDecode");
            buildString = result;
            MetricsService.BuildImports.WithLabels("build-config-dialog", "image").Inc();
            await ImportBuild(SelectedContainer.Ship);
        }
        else
        {
            Snackbar.Add(Localizer.SimpleAppLocalization(nameof(Translation.ShipSelector_InvalidPngFileError)), Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void OnActivePanelChanged(int newIndex)
    {
        buildNameDictionary[SelectedContainer.Id] = string.IsNullOrEmpty(ViewModel!.BuildName) ? Build.DefaultBuildName : ViewModel.BuildName;
        ViewModel = null;
        StateHasChanged();
        inputBuildString = string.Empty;
        selectedTab = newIndex;
        UpdateViewModel();
    }

    private async Task<string?> ValidateBuildString(string buildStr)
    {
        if (buildStr.Equals(inputBuildStringCache))
        {
            // in this case there is no need to run the validation again since there were no changes to the input. Needed because validation is called also when the text field looses focus.
            return inputBuildStringValidationResultCache;
        }

        inputBuildStringCache = buildStr;

        var validationResult = await BuildValidation.ValidateBuildString(buildStr, SelectedContainer.Ship.Index, Localizer, LinkShorteningOptions.Value.UriPrefix);

        buildString = validationResult.ValidatedBuildString;

        // needed to update UI
        await Task.Delay(1);
        StateHasChanged();
        await Task.Delay(1);

        return inputBuildStringValidationResultCache = validationResult.ValidationMessage;
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
