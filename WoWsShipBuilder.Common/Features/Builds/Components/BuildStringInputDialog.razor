@using Microsoft.Extensions.Options
@using WoWsShipBuilder.Features.LinkShortening
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Utility
@inject ILocalizer Localizer
@inject IOptions<LinkShorteningOptions> LinkShorteningOptions

<MudDialog Style="width: 600px">
    <DialogContent>
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <MudTextField @bind-Value="inputBuild" Label="@Localizer.GetAppLocalization(nameof(Translation.BuildStringInputDialog_EnterBuildStringOrLink)).Localization" Immediate DebounceInterval="100" Validation="@(new Func<string, Task<string?>>(ValidateBuildString))"/>
        </MudFocusTrap>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">
            @Localizer.GetAppLocalization(nameof(Translation.Dialog_Cancel)).Localization
        </MudButton>
        <MudButton OnClick="@OnConfirm" Disabled="@(string.IsNullOrWhiteSpace(buildString))">
            @Localizer.SimpleAppLocalization(nameof(Translation.ShipSelectionWindow_ConfirmButton))
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public string SelectedShipIndex { get; set; } = default!;

    private string inputBuild = string.Empty;

    private string inputBuildCache = string.Empty;

    private string? inputBuildValidationResultCache;

    private string buildString = string.Empty;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void OnConfirm()
    {
        MudDialog.Close(Build.CreateBuildFromString(buildString.Trim()));
    }

    private async Task<string?> ValidateBuildString(string buildStr)
    {
        if (buildStr.Equals(inputBuildCache))
        {
            // in this case there is no need to run the validation again since there were no changes to the input. Needed because validation is called also when the text field looses focus.
            return inputBuildValidationResultCache;
        }

        inputBuildCache = buildStr;

        var validationResult = await BuildValidation.ValidateBuildString(buildStr, SelectedShipIndex, Localizer, LinkShorteningOptions.Value.UriPrefix);

        buildString = validationResult.ValidatedBuildString;

        // needed to update UI
        await Task.Delay(1);
        StateHasChanged();
        await Task.Delay(1);

        return inputBuildValidationResultCache = validationResult.ValidationMessage;
    }
}