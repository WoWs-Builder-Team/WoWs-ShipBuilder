@using Microsoft.Extensions.Options
@using WoWsShipBuilder.Features.Navigation
@using WoWsShipBuilder.Infrastructure.ApplicationData

@inject IDialogService DialogService
@inject IOptions<CdnOptions> CdnOptions

@code {

    /// <summary>
    /// The base path to use for ship images, assuming an image path matches the pattern {ImageBasePath}/{ShipIndex}.png with ImageBasePath containing also the protocol (https or http).
    /// <br/>
    /// <b>Note that the path should not end with a slash.</b>
    /// <br/>
    /// Defaults to {Host}{ShipImagePath} from configured <see cref="CdnOptions"/>.
    /// </summary>
    [Parameter]
    public string? ImageBasePath { get; set; }

    [Parameter]
    public MaxWidth MaxWidth { get; set; } = MaxWidth.Large;

    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public bool NoHeader { get; set; }

    [Parameter]
    public bool DisableBackdropClick { get; set; } = true;

    public async Task<IEnumerable<ShipBuildContainer>?> ShowDialogAsync(IReadOnlyCollection<ShipBuildContainer> shipBuildContainers)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth, FullWidth = FullWidth, NoHeader = NoHeader, DisableBackdropClick = DisableBackdropClick };
        var cdnOptions = CdnOptions.Value;
        var parameters = new DialogParameters
        {
            ["ImageBasePath"] = ImageBasePath ?? $"{cdnOptions.Host}{cdnOptions.ShipImagePath}",
            ["Ships"] = shipBuildContainers,
        };

        var dialogResult = await (await DialogService.ShowAsync<BuildConfigurationDialog>("Configure builds", parameters, options)).Result;
        if (dialogResult.Data is List<ShipBuildContainer> buildContainers)
        {
            return buildContainers;
        }

        return null;
    }

}
