@using WoWsShipBuilder.DataStructures
@using System.Globalization
@using System.Collections.ObjectModel
@using System.Net
@using DynamicData
@using WoWsShipBuilder.Features.Builds.Components
@using WoWsShipBuilder.Features.Builds
@using WoWsShipBuilder.Infrastructure.Data
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@inject ILocalizer Localizer
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudGrid Justify="Justify.Center" Spacing="2">
    <MudItem xs="6" md="3">
        <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="@SelectedTier" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_TierFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in tierList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@item</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" md="3">
        <MudSelect T="ShipClass?" Variant="Variant.Outlined" @bind-Value="@SelectedClass" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_ClassFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (ShipClass? item in classList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@Localizer.GetAppLocalization(item.ToString()!).Localization</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" md="3">
        <MudSelect T="Nation?" Variant="Variant.Outlined" @bind-Value="@SelectedNation" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_NationFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (Nation? item in nationList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@Localizer.GetAppLocalization(item.ToString()!).Localization</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" md="3">
        <MudSelect T="ShipCategory?" Variant="Variant.Outlined" @bind-Value="@SelectedType" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_TypeFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (ShipCategory? item in typeList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@Localizer.GetAppLocalization(item.ToString()!).Localization</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" md="@(LargerList ? 6 : 4)">
        <MudTextField AutoFocus T="string" Variant="Variant.Outlined" Placeholder="@Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_SearchShip)).Localization" @bind-Text="@InputText" Immediate="true" DebounceInterval="150" Margin="Margin.Normal"/>
        <MudPaper Style="max-height: 300px; min-height: 300px; overflow:auto" Outlined="true">
            <MudList @ref="mudList" Clickable="true" SelectedValueChanged="AddShip">
                <MudVirtualize IsEnabled="true" Items="@filteredSummaryList" Context="pair">
                    <MudListItem Style="text-align: center" Value="@pair.Value.Index">
                        <MudText Color="Color.Secondary">
                            @pair.Key
                        </MudText>
                    </MudListItem>
                </MudVirtualize>
            </MudList>
        </MudPaper>
    </MudItem>
    @if (!LargerList)
    {
        <MudItem xs="12" md="4">
            <MudButton StartIcon="@Icons.Material.Outlined.Cancel" Color="Color.Primary" DisableElevation="true" FullWidth Style="height: 14.6%; outline: inherit" Class="mt-4 mb-2" Variant="Variant.Filled" OnClick="RemoveAllShips" >Clear all</MudButton>
            <MudPaper Outlined="true" Style="height: 300px; max-height: 300px; overflow: auto">
                <MudList Style="max-height: 300px;" Dense>
                    @if (!SelectedShips.Any())
                    {
                        <MudListItem>
                            <MudText Color="Color.Primary" Align="Align.Center">
                                @Localizer.GetAppLocalization(Translation.ShipAndShellsSelectionDialog_NoShipSelected).Localization
                            </MudText>
                        </MudListItem>
                    }
                    else
                    {
                        foreach (var shipContainer in SelectedShips)
                        {
                            <MudListItem key="@shipContainer.Id">
                                <MudStack Style="align-items: stretch" Class="mt-n2">
                                    <MudStack Row Justify="Justify.SpaceBetween">
                                        <MudText>
                                            @Localizer.GetGameLocalization(shipContainer.Ship.Index + "_FULL").Localization
                                        </MudText>
                                        <MudIcon Icon="@Icons.Material.Filled.Close" @onclick="@(_ => RemoveShip(shipContainer))" Style="cursor: pointer"/>
                                    </MudStack>
                                    <MudStack Row AlignItems="AlignItems.Baseline">
                                        <MudText Style="text-overflow: ellipsis; overflow: hidden" Typo="Typo.body2" Class="ml-2 mt-n1" @onclick="@(_ => AddBuild(shipContainer))">
                                            @(Localizer.GetAppLocalization(Translation.ChartsWeb_Build).Localization + ": " + (!string.IsNullOrWhiteSpace(shipContainer.Build?.BuildName) ? shipContainer.Build.BuildName : Build.DefaultBuildName))
                                        </MudText>
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Edit" @onclick="@(_ => AddBuild(shipContainer))" Style="cursor: pointer; alignment-baseline: hanging; font-size: small" ViewBox="0 -3 24 24"/>
                                    </MudStack>
                                </MudStack>
                                <MudDivider Class="mt-1"/>
                            </MudListItem>
                        }
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code
{

    [Parameter]
    public IList<ShipBuildContainer> SelectedShips { get; set; } = default!;

    [Parameter]
    public bool MultiSelect { get; set; } = true;

    [Parameter]
    public bool LargerList { get; set; }

    [Parameter]
    public bool AllowCopies { get; set; }

    private SortedDictionary<string, ShipSummary> totalShipNameDictionary = new();

    private MudList mudList = default!;

    private List<KeyValuePair<string, ShipSummary>> filteredSummaryList = new();

    private string inputText = string.Empty;

    private string InputText
    {
        get => inputText;
        set
        {
            inputText = value;
            ApplyFilter();
        }
    }

    #region Selects

    private readonly List<string> tierList = new() { "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI" };

    private readonly List<ShipClass?> classList = Enum.GetValues<ShipClass>().Except(new List<ShipClass> { ShipClass.Auxiliary }).Cast<ShipClass?>().ToList();

    private readonly List<Nation?> nationList = Enum.GetValues<Nation>().Except(new List<Nation> { Nation.Common }).Cast<Nation?>().ToList();

    private readonly List<ShipCategory?> typeList = Enum.GetValues<ShipCategory>().Except(new List<ShipCategory> { ShipCategory.Disabled, ShipCategory.Clan }).Cast<ShipCategory?>().ToList();

    private string? selectedTier;

    private string? SelectedTier
    {
        get => selectedTier;
        set
        {
            selectedTier = value;
            ApplyFilter();
        }
    }

    private ShipClass? selectedClass;

    private ShipClass? SelectedClass
    {
        get => selectedClass;
        set
        {
            selectedClass = value;
            ApplyFilter();
        }
    }

    private Nation? selectedNation;

    private Nation? SelectedNation
    {
        get => selectedNation;
        set
        {
            selectedNation = value;
            ApplyFilter();
        }
    }

    private ShipCategory? selectedType;

    private ShipCategory? SelectedType
    {
        get => selectedType;
        set
        {
            selectedType = value;
            ApplyFilter();
        }
    }

    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
        totalShipNameDictionary = new(AppData.ShipSummaryList.ToDictionary(ship => Localizer.GetGameLocalization($"{ship.Index}_FULL").Localization, ship => ship));
        filteredSummaryList = totalShipNameDictionary.ToList().OrderBy(x => x.Key).ToList();
    }

    private void ApplyFilter()
    {
        string searchText = InputText;
        var items = totalShipNameDictionary.Where(pair => SummaryFilter(pair, searchText)).ToList();
        items = items.OrderBy(x => x.Key).ToList();
        filteredSummaryList.Clear();
        filteredSummaryList.AddRange(items);
        StateHasChanged();
    }

    private bool SummaryFilter(KeyValuePair<string, ShipSummary> valuePair, string textSearch)
    {
        var shipSummary = valuePair.Value;
        bool result = !(!string.IsNullOrWhiteSpace(SelectedTier) && shipSummary.Tier != tierList.IndexOf(SelectedTier!) + 1);

        if (result && SelectedClass != null && shipSummary.ShipClass != SelectedClass)
        {
            result = false;
        }

        if (result && SelectedNation != null && shipSummary.Nation != SelectedNation)
        {
            result = false;
        }

        if (result && SelectedType != null && shipSummary.Category != SelectedType)
        {
            return false;
        }

        if (result && !string.IsNullOrWhiteSpace(textSearch))
        {
            result = CultureInfo.CurrentCulture.CompareInfo.IndexOf(valuePair.Key, textSearch, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) != -1;
        }

        return result;
    }

    private void RemoveShip(ShipBuildContainer container)
    {
        SelectedShips.Remove(container);
#pragma warning disable BL0005
        mudList.SelectedValue = null;
#pragma warning restore BL0005
    }

    private void AddShip(object? obj)
    {
        if (obj is not string shipIndex || !AllowCopies && SelectedShips.Any(x => x.Ship.Index.Equals(shipIndex))) return;
        if (MultiSelect)
        {
            var ship = AppData.ShipDictionary[shipIndex];
            SelectedShips.Add(ShipBuildContainer.CreateNew(ship, null, null));
        }
        else if (!MultiSelect && SelectedShips.Count == 0)
        {
            var ship = AppData.ShipDictionary[shipIndex];
            SelectedShips.Add(ShipBuildContainer.CreateNew(ship, null, null));
        }
        if (AllowCopies)
        {
#pragma warning disable BL0005
            mudList.SelectedValue = null;
#pragma warning restore BL0005
        }
    }

    private void RemoveAllShips()
    {
        SelectedShips.Clear();
#pragma warning disable BL0005
        mudList.SelectedValue = null;
#pragma warning restore BL0005
    }

    private async Task AddBuild(ShipBuildContainer ship)
    {
        var parameters = new DialogParameters
        {
            ["SelectedShipIndex"] = ship.Ship.Index,
        };
        var dialog = await DialogService.ShowAsync<BuildStringInputDialog>(Localizer.SimpleAppLocalization(nameof(Translation.BuildStringInputDialog_EnterBuildStringOrLink)), parameters);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is Build build)
        {
            SelectedShips.Replace(SelectedShips.Single(x => x.Id.Equals(ship.Id)), ship with { Build = build });
        }
    }
}