@using WoWsShipBuilder.DataStructures
@using System.Globalization
@using System.Collections.ObjectModel
@using System.Net
@using DynamicData
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using WoWsShipBuilder.Features.Builds.Components
@using WoWsShipBuilder.Features.Builds
@using WoWsShipBuilder.Features.LinkShortening
@using WoWsShipBuilder.Features.Settings
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources

@implements IAsyncDisposable
@inject ILocalizer Localizer
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IUserDataService UserDataService
@inject IOptions<LinkShorteningOptions> LinkShorteningOptions
@inject IJSRuntime Runtime
@inject AppSettings AppSettings

<MudGrid Justify="Justify.Center" Spacing="2">
    @if (EnableBuildImport)
    {
        <MudItem xs="12">
            <MudStack Row>
                <MudTextField Immediate T="string" Label="@Localizer.GetAppLocalization(nameof(Translation.BuildStringInputDialog_EnterBuildStringOrLink)).Localization" @bind-Value="buildString"/>
                <MudButton Disabled="@string.IsNullOrWhiteSpace(buildString)" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="OnLoadBuild">
                    @Localizer.GetAppLocalization(nameof(Translation.WebApp_LoadBuild)).Localization
                </MudButton>
                <MudFileUpload T="IBrowserFile" FilesChanged="@FileSelected" Style="margin-top: 0;" Class="file-upload-full-height" Accept=".png">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Image" Style="height: 100%;" for="@context">Import from image</MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudStack>
        </MudItem>

        <MudItem xs="12" Class="pt-2 pb-0 ml-n4 mr-4">
            <MudDivider DividerType="DividerType.Middle" Style="width: 100%" Light/>
        </MudItem>
    }

    <MudItem xs="6" md="3">
        <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="@SelectedTier" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_TierFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in tierList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@item</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" md="3">
        <MudSelect T="ShipClass?" Variant="Variant.Outlined" @bind-Value="@SelectedClass" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_ClassFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (ShipClass? item in classList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@Localizer.GetAppLocalization(item.ToString()!).Localization</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" md="3">
        <MudSelect T="Nation?" Variant="Variant.Outlined" @bind-Value="@SelectedNation" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_NationFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (Nation? item in nationList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@Localizer.GetAppLocalization(item.ToString()!).Localization</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" md="3">
        <MudSelect T="ShipCategory?" Variant="Variant.Outlined" @bind-Value="@SelectedType" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_TypeFilter)).Localization + "...")" Clearable="true" AnchorOrigin="Origin.BottomCenter">
            @foreach (ShipCategory? item in typeList)
            {
                <MudSelectItem Value="@item">
                    <MudText Color="Color.Secondary">@Localizer.GetAppLocalization(item.ToString()!).Localization</MudText>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" Class="mt-n4 mb-n2">
        <MudTextField AutoFocus T="string" FullWidth Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Variant="Variant.Outlined" Placeholder="@(Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_SearchShipOrBuild)).Localization + "...")" @bind-Text="@InputText" Immediate="true" DebounceInterval="150" Margin="Margin.Normal"/>
    </MudItem>
    <MudItem xs="12" md="@(HideSelectedShipList ? 6 : 4)">
        <MudPaper Style="max-height: 300px; min-height: 300px; overflow:auto" Outlined="true">
            <MudList @ref="mudList" Clickable="true" SelectedValueChanged="AddShip">
                <MudVirtualize IsEnabled="true" Items="@filteredSummaryList" Context="pair">
                    <MudListItem Style="text-align: center" Value="@pair.Value.Index">
                        <MudText Color="Color.Secondary">
                            @pair.Key
                        </MudText>
                    </MudListItem>
                </MudVirtualize>
            </MudList>
        </MudPaper>
    </MudItem>
    @if (!HideSelectedShipList)
    {
        <MudItem xs="12" md="4">
            <MudPaper Outlined="true" Style="height: 300px; max-height: 300px; overflow: auto">
                <MudList Style="max-height: 300px;" Dense>
                    @if (!SelectedShips.Any())
                    {
                        <MudListItem Disabled>
                            <MudText Class="prevent-select" Align="Align.Center">
                                @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellsSelectionDialog_NoShipSelected)).Localization
                            </MudText>
                        </MudListItem>
                    }
                    else
                    {
                        foreach (var shipContainer in SelectedShips)
                        {
                            <MudListItem key="@shipContainer.Id">
                                <MudStack Style="align-items: stretch" Spacing="1" Class="my-n1">
                                    <MudStack Row Justify="Justify.SpaceBetween">
                                        <MudText>
                                            @Localizer.GetGameLocalization(shipContainer.Ship.Index + "_FULL").Localization
                                        </MudText>
                                        <MudTooltip Text="Remove" Delay="300">
                                            <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(() => RemoveShip(shipContainer))"/>
                                        </MudTooltip>
                                    </MudStack>
                                    <MudStack Row AlignItems="AlignItems.Baseline">
                                        <MudText Style="text-overflow: ellipsis; overflow: hidden" Typo="Typo.body2" Class="ml-2 mt-n1" @onclick="@(_ => AddBuild(shipContainer))">
                                            @(Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_Build)).Localization + ": " + (!string.IsNullOrWhiteSpace(shipContainer.Build?.BuildName) ? shipContainer.Build.BuildName : Build.DefaultBuildName))
                                        </MudText>
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Edit" @onclick="@(_ => AddBuild(shipContainer))" Style="cursor: pointer; alignment-baseline: hanging; font-size: small" ViewBox="0 -3 24 24"/>
                                    </MudStack>
                                </MudStack>
                            </MudListItem>
                            <MudDivider/>
                        }
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    }
    @if (EnableSavedBuildList)
    {
        <MudItem xs="12" md="@(HideSelectedShipList ? 6 : 4)">
            <MudPaper Outlined Style="height: 300px; max-height: 300px; overflow: auto">
                <MudList @ref="buildList" Clickable Dense>
                    @if (!filteredBuildsList.Any())
                    {
                        <MudListItem Disabled>
                            <MudText Align="Align.Center" Class="prevent-select">No saved builds</MudText>
                        </MudListItem>
                    }
                    else
                    {
                        <MudVirtualize IsEnabled="true" Items="filteredBuildsList" Context="build">
                            <MudListItem @key="build.Hash" Value="build" OnClick="@(() => AddSavedBuild(build))" Icon="@(HideSelectedShipList ? Icons.Material.Filled.KeyboardArrowRight : Icons.Material.Filled.KeyboardArrowLeft)">
                                <MudStack Style="align-items: stretch" Class="my-n1" Spacing="1">
                                    <MudStack Row Justify="Justify.SpaceBetween">
                                        <MudText>@Localizer.SimpleGameLocalization(build.ShipIndex + "_FULL")</MudText>
                                        @* TODO: Localize *@
                                        <MudTooltip Text="Delete from saved builds" Delay="300">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveSavedBuild(build))"/>
                                        </MudTooltip>
                                    </MudStack>
                                    <MudText Style="text-overflow: ellipsis; overflow: hidden" Typo="Typo.body2" Class="ml-2 mt-n1">@(Localizer.SimpleAppLocalization(nameof(Translation.ChartsWeb_Build)) + ": " + build.BuildName)</MudText>
                                </MudStack>
                            </MudListItem>
                            <MudDivider/>
                        </MudVirtualize>
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code
{

    [Parameter]
    public IList<ShipBuildContainer> SelectedShips { get; set; } = default!;

    [Parameter]
    public bool MultiSelect { get; set; } = true;

    [Parameter]
    public bool HideSelectedShipList { get; set; }

    [Parameter]
    public bool AllowCopies { get; set; }

    [Parameter]
    public bool EnableSavedBuildList { get; set; }

    [Parameter]
    public bool EnableBuildImport { get; set; }

    private SortedDictionary<string, ShipSummary> totalShipNameDictionary = new();

    private MudList mudList = default!;

    private MudList? buildList;

    private List<KeyValuePair<string, ShipSummary>> filteredSummaryList = new();

    private IEnumerable<Build> savedBuilds = new List<Build>();

    private List<Build> filteredBuildsList = new();

    private string inputText = string.Empty;

    private string InputText
    {
        get => inputText;
        set
        {
            inputText = value;
            ApplyFilter();
        }
    }

    private string buildString = string.Empty;

    private IJSObjectReference? module;

    #region Selects

    private readonly List<string> tierList = new() { "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI" };

    private readonly List<ShipClass?> classList = Enum.GetValues<ShipClass>().Except(new List<ShipClass> { ShipClass.Auxiliary }).Cast<ShipClass?>().ToList();

    private readonly List<Nation?> nationList = Enum.GetValues<Nation>().Except(new List<Nation> { Nation.Common }).Cast<Nation?>().ToList();

    private readonly List<ShipCategory?> typeList = Enum.GetValues<ShipCategory>().Except(new List<ShipCategory> { ShipCategory.Disabled, ShipCategory.Clan }).Cast<ShipCategory?>().ToList();

    private string? selectedTier;

    private string? SelectedTier
    {
        get => selectedTier;
        set
        {
            selectedTier = value;
            ApplyFilter();
        }
    }

    private ShipClass? selectedClass;

    private ShipClass? SelectedClass
    {
        get => selectedClass;
        set
        {
            selectedClass = value;
            ApplyFilter();
        }
    }

    private Nation? selectedNation;

    private Nation? SelectedNation
    {
        get => selectedNation;
        set
        {
            selectedNation = value;
            ApplyFilter();
        }
    }

    private ShipCategory? selectedType;

    private ShipCategory? SelectedType
    {
        get => selectedType;
        set
        {
            selectedType = value;
            ApplyFilter();
        }
    }

    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
        totalShipNameDictionary = new(AppData.ShipSummaryList.ToDictionary(ship => Localizer.GetGameLocalization($"{ship.Index}_FULL").Localization, ship => ship));
        filteredSummaryList = totalShipNameDictionary.ToList().OrderBy(x => x.Key).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && EnableBuildImport)
        {
            module ??= await Runtime.InvokeAsync<IJSObjectReference>("import", "/_content/WoWsShipBuilder.Common/scripts/buildImageDecoder.js");
        }
        if (firstRender && EnableSavedBuildList)
        {
            savedBuilds = await UserDataService.LoadBuildsAsync();
            filteredBuildsList = savedBuilds.ToList();
            filteredBuildsList.ForEach(x => x.UpgradeBuild());
            StateHasChanged();
        }
    }

    private void ApplyFilter()
    {
        string searchText = InputText;
        var ships = totalShipNameDictionary.Where(pair => SummaryFilter(pair, searchText)).ToList();
        ships = ships.OrderBy(x => x.Key).ToList();
        filteredSummaryList.Clear();
        filteredSummaryList.AddRange(ships);
        var builds = savedBuilds.Where(build => SummaryFilter(build, searchText)).ToList();
        filteredBuildsList.Clear();
        filteredBuildsList.AddRange(builds);
        StateHasChanged();
    }

    private bool SummaryFilter(object value, string textSearch)
    {
        ShipSummary shipSummary = default!;
        string shipName = string.Empty;
        string? buildName = null;

        if (value is KeyValuePair<string, ShipSummary> pair)
        {
            shipSummary = pair.Value;
            shipName = pair.Key;
        }

        if (value is Build build)
        {
            var keyValuePair = totalShipNameDictionary.First(x => x.Value.Index.Equals(build.ShipIndex));
            shipSummary = keyValuePair.Value;
            shipName = keyValuePair.Key;
            buildName = build.BuildName;
        }

        bool result = !(!string.IsNullOrWhiteSpace(SelectedTier) && shipSummary.Tier != tierList.IndexOf(SelectedTier!) + 1);

        if (result && SelectedClass != null && shipSummary.ShipClass != SelectedClass)
        {
            result = false;
        }

        if (result && SelectedNation != null && shipSummary.Nation != SelectedNation)
        {
            result = false;
        }

        if (result && SelectedType != null && shipSummary.Category != SelectedType)
        {
            return false;
        }

        if (result && !string.IsNullOrWhiteSpace(textSearch))
        {
            result = AppSettings.SelectedLanguage.CultureInfo.CompareInfo.IndexOf(shipName, textSearch, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) != -1;

            if (!result && !string.IsNullOrWhiteSpace(buildName))
            {
                result = AppSettings.SelectedLanguage.CultureInfo.CompareInfo.IndexOf(buildName, textSearch, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) != -1;
            }
        }

        return result;
    }

    private void RemoveShip(ShipBuildContainer container)
    {
        SelectedShips.Remove(container);
#pragma warning disable BL0005
        mudList.SelectedValue = null;
        if (buildList != null)
        {
            buildList.SelectedValue = null;
        }
#pragma warning restore BL0005
    }

    private void AddShip(object? obj)
    {
        if (obj is not string shipIndex || !AllowCopies && SelectedShips.Any(x => x.Ship.Index.Equals(shipIndex))) return;
        if (MultiSelect)
        {
            var ship = AppData.ShipDictionary[shipIndex];
            SelectedShips.Add(ShipBuildContainer.CreateNew(ship, null, null));
        }
        else if (!MultiSelect && SelectedShips.Count == 0)
        {
            var ship = AppData.ShipDictionary[shipIndex];
            SelectedShips.Add(ShipBuildContainer.CreateNew(ship, null, null));
        }
        if (AllowCopies)
        {
#pragma warning disable BL0005
            mudList.SelectedValue = null;
#pragma warning restore BL0005
        }
    }

    private void AddSavedBuild(Build build)
    {
        if (!AllowCopies && SelectedShips.Any(x => x.Ship.Index.Equals(build.ShipIndex))) return;

        if (MultiSelect)
        {
            SelectedShips.Add(ShipBuildContainer.CreateNew(AppData.ShipDictionary[build.ShipIndex], build, null));
        }
        else if (!MultiSelect && SelectedShips.Count == 0)
        {
            SelectedShips.Add(ShipBuildContainer.CreateNew(AppData.ShipDictionary[build.ShipIndex], build, null));
        }

        if (AllowCopies)
        {
#pragma warning disable BL0005
            mudList.SelectedValue = null;
            if (buildList != null)
            {
                buildList.SelectedValue = null;
            }
#pragma warning restore BL0005
        }
    }

    private void RemoveAllShips()
    {
        SelectedShips.Clear();
#pragma warning disable BL0005
        mudList.SelectedValue = null;
        if (buildList != null)
        {
            buildList.SelectedValue = null;
        }
#pragma warning restore BL0005
    }

    private async Task AddBuild(ShipBuildContainer ship)
    {
        var parameters = new DialogParameters
        {
            ["SelectedShipIndex"] = ship.Ship.Index,
        };
        var dialog = await DialogService.ShowAsync<BuildStringInputDialog>(Localizer.SimpleAppLocalization(nameof(Translation.BuildStringInputDialog_EnterBuildStringOrLink)), parameters);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is Build build)
        {
            SelectedShips.Replace(SelectedShips.Single(x => x.Id.Equals(ship.Id)), ship with { Build = build });
        }
    }

    private async Task RemoveSavedBuild(Build build)
    {
        await UserDataService.RemoveSavedBuildAsync(build);
        ApplyFilter();
    }

    private async Task FileSelected(IBrowserFile? file)
    {
        if (file is not null && file.ContentType.Equals("image/png"))
        {
            var result = await module!.InvokeAsync<string>("findUploadAndDecode");
            buildString = result;
            await OnLoadBuild();
            buildString = string.Empty;
        }
        else
        {
            Snackbar.Add(Localizer.SimpleAppLocalization(nameof(Translation.ShipSelector_InvalidPngFileError)), Severity.Error);
        }
    }

    private async Task OnLoadBuild()
    {
        if (!string.IsNullOrEmpty(LinkShorteningOptions.Value.UriPrefix) && buildString.Contains(LinkShorteningOptions.Value.UriPrefix + '/'))
        {
            var fullUrl = await BuildValidation.RetrieveLongUrlFromShortLink(buildString) ?? string.Empty;
            buildString = fullUrl;
        }

        if (QueryHelpers.ParseQuery(buildString).TryGetValue("build", out var buildFromUrl))
        {
            buildString = buildFromUrl.ToString();
        }

        try
        {
            var build = buildString.StartsWith('{') ? JsonConvert.DeserializeObject<Build>(buildString)! : Build.CreateBuildFromString(buildString);
            build.UpgradeBuild();
            AddSavedBuild(build);
            buildString = string.Empty;
            StateHasChanged();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Add("Build loaded", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Add("Failed to load build from string", Severity.Error);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}