@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.GameData
@using WoWsShipBuilder.Infrastructure.Utility
@using ReactiveUI

@inject ILocalizer Localizer

<aside style="position: absolute">
    <ul style="width: fit-content; margin-top: 16px">
        @foreach (var nation in treeStructure.OrderBy(nation => (int)nation.Key))
        {
            <li class="parent" style="float: none">
                <MudText Class="pa-2" Style="white-space: nowrap; font-size: large">
                    @Localizer.SimpleAppLocalization(nation.Key.ShipNationToString())
                </MudText>
                <ul class="child">
                    @foreach (var category in nation.Value.OrderBy(category => (int)category.Key))
                    {
                        <li class="parent">
                            <MudText Class="pa-2" Style="white-space: nowrap; font-size: large">
                                @Localizer.SimpleAppLocalization(category.Key.ShipCategoryToString())
                            </MudText>
                            <ul class="child">
                                @foreach (var shipClass in category.Value.OrderBy(shipClass => (int)shipClass.Key))
                                {
                                    <li class="parent">
                                        <MudText Class="pa-2" Style="white-space: nowrap; font-size: large">
                                            @Localizer.SimpleAppLocalization(shipClass.Key.ShipClassToString())
                                        </MudText>
                                        <ul class="child">
                                            @foreach (KeyValuePair<int, List<string>> tier in shipClass.Value.OrderBy(x => x.Key))
                                            {
                                                <MudStack Row Spacing="0">
                                                    @{
                                                        var elementIndex = 0;
                                                        foreach (var shipIndex in tier.Value.OrderBy(x => x[4]))
                                                        {
                                                            <div class="ft-selector-ship-name" style="@SetBorderStyle(tier.Value.Count, elementIndex++)">
                                                                <MudText Class="pa-2" Style="white-space: nowrap; font-size: large">
                                                                    @(tier.Key + " - " + Localizer.SimpleGameLocalization(shipIndex))
                                                                </MudText>
                                                            </div>
                                                        }
                                                    }
                                                </MudStack>
                                            }
                                        </ul>
                                    </li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>
</aside>
@*
<MudDrawerContainer Style="height: max-content">
    <MudDrawer Color="Color.Dark" ClipMode="DrawerClipMode.Always" PreserveOpenState Variant="DrawerVariant.Persistent" Elevation="1" Open="openDrawer">
        @foreach (var nation in treeStructure)
        {
            <MudMenuItem AutoClose="false">
                <MudMenu Label="@Localizer.SimpleAppLocalization(nation.Key.ShipNationToString())" Variant="Variant.Filled" AnchorOrigin="Origin.CenterRight" ActivationEvent="MouseEvent.MouseOver" Size="Size.Medium" Dense>
                    <ChildContent>
                        @foreach (var category in nation.Value)
                        {
                            <MudMenuItem AutoClose="false">
                                <MudMenu Label="@Localizer.SimpleAppLocalization(category.Key.ShipCategoryToString())" Variant="Variant.Filled" AnchorOrigin="Origin.CenterRight" ActivationEvent="MouseEvent.MouseOver" Size="Size.Large">
                                    <ChildContent>
                                        @foreach (var shipClass in category.Value)
                                        {
                                            <MudMenuItem AutoClose="false">
                                                <MudMenu Label="@Localizer.SimpleAppLocalization(shipClass.Key.ShipClassToString())" Variant="Variant.Filled" AnchorOrigin="Origin.CenterRight" ActivationEvent="MouseEvent.MouseOver" Size="Size.Large">
                                                    <ChildContent>
                                                        @foreach (var tier in shipClass.Value)
                                                        {
                                                            <MudMenuItem AutoClose="false">
                                                                <MudMenu Label="@Localizer.SimpleAppLocalization(tier.Key.ToTierString())" Variant="Variant.Filled" AnchorOrigin="Origin.CenterRight" ActivationEvent="MouseEvent.MouseOver" Size="Size.Large">
                                                                    @foreach (var shipIndex in tier.Value)
                                                                    {
                                                                        <MudMenuItem>@Localizer.SimpleGameLocalization(shipIndex)</MudMenuItem>
                                                                    }
                                                                </MudMenu>
                                                            </MudMenuItem>
                                                        }
                                                    </ChildContent>
                                                </MudMenu>
                                            </MudMenuItem>
                                        }
                                    </ChildContent>
                                </MudMenu>
                            </MudMenuItem>
                        }
                    </ChildContent>
                </MudMenu>
            </MudMenuItem>
        }
    </MudDrawer>
    <div class="d-flex mud-height-full">
        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => openDrawer = !openDrawer)" Icon="@(openDrawer ? Icons.Material.Filled.ArrowBackIos : Icons.Material.Filled.ArrowForwardIos)"/>
    </div>
</MudDrawerContainer>
*@

@code
{
    private bool openDrawer = true;
    private Dictionary<Nation, Dictionary<ShipCategory, Dictionary<ShipClass, Dictionary<int, List<string>>>>> treeStructure = new();
    Dictionary<string, List<string>> techTreeSplits = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        foreach (var ship in AppData.ShipSummaryMapper)
        {
            if (!treeStructure.ContainsKey(ship.Value.Nation))
            {
                treeStructure.Add(ship.Value.Nation, new());
            }
            var currentShipNation = treeStructure[ship.Value.Nation];
            if (!currentShipNation.ContainsKey(ship.Value.Category))
            {
                currentShipNation.Add(ship.Value.Category, new());
            }
            var currentShipCategory = currentShipNation[ship.Value.Category];
            if (!currentShipCategory.ContainsKey(ship.Value.ShipClass))
            {
                currentShipCategory.Add(ship.Value.ShipClass, new());
            }
            var currentShipClass = currentShipCategory[ship.Value.ShipClass];
            if (!currentShipClass.ContainsKey(ship.Value.Tier))
            {
                currentShipClass.Add(ship.Value.Tier, new());
            }
            var currentShipTier = currentShipClass[ship.Value.Tier];
            currentShipTier.Add(ship.Value.Index);

            if (ship.Value.NextShipsIndex is not null && ship.Value.NextShipsIndex.Count > 1 && ship.Value.NextShipsIndex.All(x => AppData.ShipSummaryMapper[x].ShipClass == ship.Value.ShipClass))
            {
                techTreeSplits.Add(ship.Value.Index, ship.Value.NextShipsIndex);
            }
        }
    }

    private string SetBorderStyle(int listSize, int elementIndex)
    {
        return listSize == 1 ? "border-right-width: 1px; border-right-color: var(--mud-palette-lines-default);" : elementIndex > 0 ? "border-left-width: 1px; border-left-color: var(--mud-palette-lines-default);" : "";
    }
}
