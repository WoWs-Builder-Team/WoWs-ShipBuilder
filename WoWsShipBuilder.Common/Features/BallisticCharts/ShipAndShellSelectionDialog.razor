@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using System.Linq
@using DynamicData
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.DataStructures.Ship
@using WoWsShipBuilder.Features.BallisticCharts.Data
@using WoWsShipBuilder.Features.Builds
@using WoWsShipBuilder.Features.DataContainers
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Utility
@implements IDisposable
@inject ILocalizer Localizer

<MudDialog Class="default-background">
    <TitleContent>
        <MudItem Class="d-flex align-center">
            <MudText Typo="Typo.h6" Class="mx-auto">
                @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_SelectShipsAndShells)).Localization
            </MudText>
        </MudItem>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="d-flex" Style="min-height: 600px; max-height: 600px; overflow-y: auto; padding-top: 12px; padding-bottom: 12px;">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" md="8" Class="d-flex" Style="overflow-y: auto">
                    <ShipSelector SelectedShips="@selectedShips" AllowCopies EnableBuildImport EnableSavedBuildList HideSelectedShipList/>
                </MudItem>
                <MudItem xs="12" md="4" Style="min-height: 600px; max-height: 600px; overflow-y: auto;">
                    @if (dataWrappers.Count == 0)
                    {
                        <MudText Typo="Typo.body2" Class="mt-4" Align="Align.Center" Color="Color.Default" Style="font-size: x-large">
                            @Localizer.GetAppLocalization(Translation.ShipAndShellsSelectionDialog_NoShipSelected).Localization
                        </MudText>
                    }
                    @foreach (var dataWrapper in dataWrappers)
                    {
                        <MudItem Class="d-flex" Style="flex-direction: column">
                            <MudItem Class="d-flex mt-2" Style="justify-content: space-between">
                                <MudText Typo="Typo.caption" Class="my-auto">
                                    @Localizer.GetGameLocalization($"{dataWrapper.ShipBuildContainer.Ship.Index}_FULL").Localization
                                </MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => RemoveShip(dataWrapper))"/>
                            </MudItem>
                            @if (dataWrapper.ShipBuildContainer.Ship.MainBatteryModuleList.Any())
                            {
                                <MudButtonGroup OverrideStyles="false" VerticalAlign="true" Class="gap-1">
                                    @foreach (string shell in dataWrapper.ShipBuildContainer.Ship.ShellCompatibilities.Keys)
                                    {
                                        <MudButton Disabled="@(disabledShells.ContainsKey(dataWrapper.ShipBuildContainer.Id) && disabledShells[dataWrapper.ShipBuildContainer.Id].Any(item => item.Value.Contains(shell)))" Color="@(GetColorFromBool(dataWrapper.SelectedShells.ContainsKey(shell)))" Variant="@(GetVariantFromBool(dataWrapper.SelectedShells.ContainsKey(shell)))" DisableElevation="true" OnClick="@(() => ToggleSelection(dataWrapper, shell))">
                                            @Localizer.GetGameLocalization(shell).Localization
                                        </MudButton>
                                    }
                                </MudButtonGroup>
                            }
                            else
                            {
                                <MudText Color="Color.Dark">
                                    @Localizer.GetAppLocalization(nameof(Translation.MessageBox_ShipNoGun)).Localization
                                </MudText>
                            }
                            <MudText Typo="Typo.caption" Class="my-1">
                                @($"{Localizer.GetAppLocalization(Translation.ChartsWeb_Build).Localization}: {(!string.IsNullOrWhiteSpace(dataWrapper.ShipBuildContainer.Build?.BuildName) ? dataWrapper.ShipBuildContainer.Build.BuildName : Build.DefaultBuildName)}")
                            </MudText>
                            <MudDivider Light="true"/>
                        </MudItem>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel" Variant="Variant.Filled" Color="Color.Warning">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudButton Color="Color.Tertiary" OnClick="@(() => ReturnSelectedShells(true))" Variant="Variant.Filled" Disabled="@(processing || !dataWrappers.Exists(wrapper => wrapper.SelectedShells.Any()))">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2" Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_Loading)).Localization
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_EditBuilds)).Localization
                </MudText>
            }
        </MudButton>
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <MudButton Color="Color.Success" OnClick="@(() => ReturnSelectedShells(false))" Variant="Variant.Filled" Disabled="processing">
                @if (processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2" Typo="Typo.button">
                        @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_Loading)).Localization
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.button">
                        @Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_ConfirmButton)).Localization
                    </MudText>
                }
            </MudButton>
        </MudFocusTrap>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public List<ChartsDataWrapper> InputData { get; set; } = new();

    private readonly List<ChartsDataWrapper> dataWrappers = new();
    private readonly ObservableCollection<ShipBuildContainer> selectedShips = new();
    private readonly Dictionary<Guid, Dictionary<string, List<string>>> disabledShells = new();
    private bool processing;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataWrappers.AddRange(InputData.Select(x => x with { SelectedShells = x.SelectedShells.ToDictionary(y => y.Key, y => y.Value) }));
        selectedShips.CollectionChanged += SelectedShipsOnCollectionChanged;
        foreach (var wrapper in dataWrappers)
        {
            foreach (var shell in wrapper.SelectedShells.Keys)
            {
                AddDisableShells(wrapper, shell);
            }
        }
    }

    private void SelectedShipsOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.Action.Equals(NotifyCollectionChangedAction.Add) && e.NewItems is not null)
        {
            //manage newly added items
            foreach (ShipBuildContainer ship in e.NewItems)
            {
                AddWrapper(ship);
            }

            //Removed ships are managed by the RemoveShip method.
        }
        StateHasChanged();
    }

    private void AddWrapper(ShipBuildContainer wrapper)
    {
        dataWrappers.Add(new(wrapper, new()));
    }

    private void ReturnSelectedShells(bool shouldGoToBuildWindow)
    {
        processing = true;
        List<ChartsDataWrapper> initialShips = InputData;
        List<ChartsDataWrapper> shipsToAdd = new();
        List<ChartsDataWrapper> shipsToModify = new();
        List<Guid> shipsToRemove = new();

        //newly added ships
        shipsToAdd.AddRange(dataWrappers.Where(current => !initialShips.Select(x => x.ShipBuildContainer.Id).Contains(current.ShipBuildContainer.Id) && current.SelectedShells.Count != 0));

        //removed ships
        shipsToRemove.AddRange(initialShips.Where(current => !dataWrappers.Select(x => x.ShipBuildContainer.Id).Contains(current.ShipBuildContainer.Id)).Select(x => x.ShipBuildContainer.Id));

        //modified ship
        var commonShips = dataWrappers.Where(current => initialShips.Select(x => x.ShipBuildContainer.Id).Contains(current.ShipBuildContainer.Id));
        foreach (var ship in commonShips)
        {

            var initialShip = initialShips.First(x => x.ShipBuildContainer.Id.Equals(ship.ShipBuildContainer.Id));
            //we sort the lists
            var initialShells = initialShip.SelectedShells.Keys.ToList();
            initialShells.Sort();
            var currentShells = ship.SelectedShells.Keys.ToList();
            currentShells.Sort();

            if (ship.SelectedShells.Count == 0)
            {
                shipsToRemove.Add(ship.ShipBuildContainer.Id);
            }
            else if (!initialShells.SequenceEqual(currentShells))
            {
                shipsToModify.Add(ship);
            }
        }

        ShipAndShellSelectionDialogOutput output = new(SetCompatibleModules(shipsToAdd), SetCompatibleModules(shipsToModify).ToDictionary(item => item.ShipBuildContainer.Id, item => item), shipsToRemove, shouldGoToBuildWindow);
        processing = false;
        MudDialog.Close(DialogResult.Ok(output));
    }

    private void RemoveShip(ChartsDataWrapper ship)
    {
        dataWrappers.Remove(ship);
    }

    private static List<ChartsDataWrapper> SetCompatibleModules(List<ChartsDataWrapper> wrappers)
    {
        List<ChartsDataWrapper> newWrappers = new();
        foreach (var wrapper in wrappers)
        {
            string commonHullName;
            string commonArtilleryName;
            var selectedShells = wrapper.SelectedShells.Keys;
            if (selectedShells.Count > 1)
            {
                var shellModuleList = wrapper.ShipBuildContainer.Ship.ShellCompatibilities.Where(x => selectedShells.Contains(x.Key)).Select(x => x.Value).SelectMany(x => x.CompatibleHullArtilleryModulesCombo);
                var commonHulls = shellModuleList.GroupBy(x => x.Key).Where(x => x.Count() > 1).SelectMany(x => x).ToList();
                commonHullName = commonHulls.MinBy(x => x.Key).Key;
                commonArtilleryName = commonHulls.SelectMany(x => x.Value).GroupBy(x => x).Where(x => x.Count() > 1).SelectMany(x => x).MinBy(x => x)!;
            }
            else
            {
                commonHullName = wrapper.ShipBuildContainer.Ship.ShellCompatibilities[selectedShells.Single()].CompatibleHullArtilleryModulesCombo.Keys.First();
                commonArtilleryName = wrapper.ShipBuildContainer.Ship.ShellCompatibilities[selectedShells.Single()].CompatibleHullArtilleryModulesCombo[commonHullName][0];
            }

            var ship = wrapper.ShipBuildContainer.Ship;
            var commonHull = ship.ShipUpgradeInfo.ShipUpgrades.Single(x => x.UcType.Equals(ComponentType.Hull) && x.Components.Any(y => y.Value.Contains(commonHullName)) && x.Components.Any(y => y.Value.Contains(commonArtilleryName)));
            var commonArtillery = ship.ShipUpgradeInfo.ShipUpgrades.Single(x => x.UcType.Equals(ComponentType.Artillery) && x.Components.Any(y => y.Value.Contains(commonArtilleryName)));

            if (wrapper.ShipBuildContainer.Build is null)
            {
                var shipConfiguration = Helpers.GetStockShipConfiguration(ship);
                UpgradeModuleInShipConfiguration(shipConfiguration, commonHull);
                UpgradeModuleInShipConfiguration(shipConfiguration, commonArtillery);
                var dataContainer = ShipDataContainer.CreateFromShip(ship, shipConfiguration, wrapper.ShipBuildContainer.Modifiers ?? new());
                Build build = new(string.Empty, ship.Index, ship.ShipNation, shipConfiguration.Select(x => x.Name.NameToIndex()).ToList(), new(), GetStockConsumableNames(ship), "PCW001", new(), new());
                var container = wrapper.ShipBuildContainer with { ShipDataContainer = dataContainer, Build = build };
                var newWrapper = wrapper with { ShipBuildContainer = container };
                newWrappers.Add(newWrapper);
            }
            else
            {
                var build = wrapper.ShipBuildContainer.Build;
                var shipConfiguration = Helpers.GetShipConfigurationFromBuild(build.Modules, ship.ShipUpgradeInfo.ShipUpgrades);
                UpgradeModuleInShipConfiguration(shipConfiguration, commonHull);
                UpgradeModuleInShipConfiguration(shipConfiguration, commonArtillery);
                var dataContainer = ShipDataContainer.CreateFromShip(ship, shipConfiguration, wrapper.ShipBuildContainer.Modifiers ?? new());
                Build newBuild = new(build.BuildName, ship.Index, ship.ShipNation, shipConfiguration.Select(x => x.Name.NameToIndex()).ToList(), build.Upgrades.ToList(), build.Consumables.ToList(), build.Captain, build.Skills.ToList(), build.Signals.ToList());
                var container = wrapper.ShipBuildContainer with { ShipDataContainer = dataContainer, Build = newBuild };
                var newWrapper = wrapper with { ShipBuildContainer = container };
                newWrappers.Add(newWrapper);
            }
        }
        return newWrappers;
    }

    private void ToggleSelection(ChartsDataWrapper ship, string shellIndex)
    {
        if (ship.SelectedShells.ContainsKey(shellIndex))
        {
            ship.SelectedShells.Remove(shellIndex);
            RemoveDisabledShells(ship, shellIndex);
        }
        else
        {
            ship.SelectedShells.Add(shellIndex, new(null, null, null));
            AddDisableShells(ship, shellIndex);
        }
        StateHasChanged();
    }

    private void AddDisableShells(ChartsDataWrapper wrapper, string shellIndex)
    {
        var shellCompatibilities = wrapper.ShipBuildContainer.Ship.ShellCompatibilities.ToDictionary(item => item.Key, item => item.Value);
        var compatibleCombo = shellCompatibilities[shellIndex];
        shellCompatibilities.Remove(shellIndex);
        List<string> incompatibleShells = new();
        foreach (var shell in shellCompatibilities)
        {
            var compatibleHulls = compatibleCombo.CompatibleHullArtilleryModulesCombo.Keys.Intersect(shell.Value.CompatibleHullArtilleryModulesCombo.Keys).ToList();
            if (!compatibleHulls.Any())
            {
                incompatibleShells.Add(shell.Key);
            }
            else
            {
                foreach (var hull in compatibleHulls)
                {
                    if (!compatibleCombo.CompatibleHullArtilleryModulesCombo[hull].Intersect(shell.Value.CompatibleHullArtilleryModulesCombo[hull]).Any())
                    {
                        incompatibleShells.Add(shell.Key);
                    }
                }
            }
        }
        var id = wrapper.ShipBuildContainer.Id;
        if (disabledShells.TryGetValue(id, out Dictionary<string, List<string>>? disabledShell))
        {
            disabledShell.Add(shellIndex, incompatibleShells);
        }
        else
        {
            disabledShells.Add(id, new() { { shellIndex, incompatibleShells } });
        }
    }

    private void RemoveDisabledShells(ChartsDataWrapper wrapper, string shellIndex)
    {
        var id = wrapper.ShipBuildContainer.Id;
        disabledShells[id].Remove(shellIndex);
        if (!disabledShells[id].Any())
        {
            disabledShells.Remove(id);
        }
    }

    private static List<string> GetStockConsumableNames(Ship ship)
    {
        return ship.ShipConsumable.GroupBy(consumable => consumable.Slot)
            .Where(consumables => consumables.Any())
            .Select(x => x.First().ConsumableName)
            .ToList();
    }

    private static void UpgradeModuleInShipConfiguration(List<ShipUpgrade> shipUpgrades, ShipUpgrade shipUpgrade)
    {
        var oldItem = shipUpgrades.Find(module => module.UcType == shipUpgrade.UcType);
        if (oldItem != null)
        {
            shipUpgrades.Replace(oldItem, shipUpgrade);
        }
        else
        {
            shipUpgrades.Add(shipUpgrade);
        }
    }

    private static Variant GetVariantFromBool(bool active)
    {
        return active ? Variant.Filled : Variant.Outlined;
    }

    private static Color GetColorFromBool(bool active)
    {
        return active ? Color.Primary : Color.Secondary;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    public void Dispose()
    {
        selectedShips.CollectionChanged -= SelectedShipsOnCollectionChanged;
    }
}
