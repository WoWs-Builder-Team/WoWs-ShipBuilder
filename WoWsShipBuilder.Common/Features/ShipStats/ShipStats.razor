@page "/ship"

@using DynamicData
@using WoWsShipBuilder.DataStructures.Modifiers
@using WoWsShipBuilder.Features.Builds
@using WoWsShipBuilder.Features.DataContainers
@using WoWsShipBuilder.Features.ShipStats.Components
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Metrics
@using WoWsShipBuilder.Infrastructure.Utility

@implements IDisposable

@inject NavigationManager NavManager
@inject ILocalizer Localizer
@inject IDialogService DialogService
@inject SessionStateCache SessionStateCache
@inject ILogger<ShipStats> Logger
@inject MetricsService MetricsService
@inject AppPagesBrowser AppPagesBrowser

<PageTitle>Ship stats</PageTitle>

<MudBreakpointProvider>
    @* HideSlider is set to true because of an issue in MudBlazor. see https://github.com/MudBlazor/MudBlazor/issues/4742*@
    <MudDynamicTabs Position="Position.Top" HideSlider CloseTab="@RemoveTab" @ref="mudTabs" Elevation="2" PanelClass="py-6" Outlined Border Class="px-md-6 pt-3 ship-stats-tabs sticky-tabs-header">
        <ChildContent>
            @foreach (var container in shipContainers)
            {
                <MudTabPanel Text="@Localizer.GetGameLocalization(container.Ship.Index + "_FULL").Localization" Tag="@container.Id" ID="@container.Id" @key="@container.Id">
                    <ShipStatsTab Cache="@cache" CurrentTabId="container.Id" ShipIndex="@container.Ship.Index" OnShipChanged="@OnShipIndexChanged" Build="@container.Build"/>
                </MudTabPanel>
            }
        </ChildContent>
        <Header>
            <MudStack Row Spacing="0">
                <MudDivider Vertical/>
                <MudTooltip Text="@Localizer.GetAppLocalization(Translation.DispersionGraphWindow_AddShip).Localization" Arrow Delay="350">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@OpenAddDialogAsync" Color="Color.Primary"/>
                </MudTooltip>
                <MudHidden Invert Breakpoint="Breakpoint.SmAndDown">
                    <MudMenu Icon="@Icons.Material.Filled.Menu" Dense Color="Color.Primary" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.BottomLeft" DisableElevation>
                        <MudStack Spacing="0" AlignItems="AlignItems.Center" Justify="Justify.Center">
                            <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInBallisticCharts).Localization" Arrow Delay="350">
                                <MudIconButton OnClick="@OpenBallisticCharts" Color="Color.Primary" Style="width: 48px; height: 48px">
                                    <MudIcon Icon="@DispersionAndBallisticChartsPath" ViewBox="-4 -7 24 24"/>
                                </MudIconButton>
                            </MudTooltip>
                            <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInAccelerationCharts).Localization" Arrow Delay="350">
                                <MudIconButton Icon="@Icons.Material.Filled.Speed" OnClick="@OpenAccelerationCharts" Color="Color.Primary"/>
                            </MudTooltip>
                            <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInShipComparison).Localization" Arrow Delay="350">
                                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="@OpenShipComparison" Color="Color.Primary"/>
                            </MudTooltip>
                        </MudStack>
                    </MudMenu>
                </MudHidden>
                <MudHidden Invert Breakpoint="Breakpoint.MdAndUp">
                    <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInBallisticCharts).Localization" Arrow Delay="350">
                        <MudIconButton OnClick="@OpenBallisticCharts" Color="Color.Primary" Style="width: 48px; height: 48px">
                            <MudIcon Icon="@DispersionAndBallisticChartsPath" ViewBox="-4 -7 24 24"/>
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInAccelerationCharts).Localization" Arrow Delay="350">
                        <MudIconButton Icon="@Icons.Material.Filled.Speed" OnClick="@OpenAccelerationCharts" Color="Color.Primary"/>
                    </MudTooltip>
                    <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInShipComparison).Localization" Arrow Delay="350">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="@OpenShipComparison" Color="Color.Primary"/>
                    </MudTooltip>
                </MudHidden>
            </MudStack>
        </Header>
    </MudDynamicTabs>
</MudBreakpointProvider>
<MudScrollToTop TopOffset="100" Style="z-index:2001">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.KeyboardDoubleArrowUp"/>
</MudScrollToTop>

@code {

    private const string DispersionAndBallisticChartsPath = @"<path d=""M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"" stroke-width="".053058""/>";

    private MudTabs mudTabs = default!;

    private readonly List<ShipBuildContainer> shipContainers = new();

    private readonly VmCache cache = new();

    private string shipIndexesFromUrl = default!;

    private string shipBuildFromUrl = default!;

    private bool updateTab;

    private Guid selectedTabId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializePage();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateUrl();
            MetricsService.PageAccessCount.WithLabels("shipstats").Inc();
            if (!string.IsNullOrWhiteSpace(shipBuildFromUrl))
            {
                MetricsService.BuildImports.WithLabels("ship-stats", "url").Inc();
            }
        }

        if (!shipContainers.Any())
        {
            await OpenAddDialogAsync();
        }

        if (!updateTab) return;
        Logger.LogDebug("Tab update requested");
        mudTabs.ActivatePanel(selectedTabId, true);
        updateTab = false;
        StateHasChanged();
    }

    private void InitializePage()
    {
        NavManager.TryGetQueryString("shipIndexes", out shipIndexesFromUrl);
        NavManager.TryGetQueryString("build", out shipBuildFromUrl);
        if (!string.IsNullOrEmpty(shipIndexesFromUrl))
        {
            Logger.LogTrace("Ship indexes found in url");
            var buildContainers = SessionStateCache.GetAndResetBuildTransferContainers();
            List<ShipBuildContainer>? buildList;
            if (!string.IsNullOrWhiteSpace(shipBuildFromUrl))
            {
                Logger.LogTrace("Build found in url, trying to parse it");
                Build? build = null;
                try
                {
                    build = Build.CreateBuildFromString(shipBuildFromUrl);
                    Logger.LogTrace("Build loaded from url");
                }
                catch (FormatException)
                {
                    Logger.LogTrace("Build could not be loaded from url because it was not in the correct format");
                }

                buildList = new() { ShipBuildContainer.CreateNew(AppData.ShipDictionary[shipIndexesFromUrl], build, null) };
            }
            else if (buildContainers is not null)
            {
                Logger.LogTrace("Ship configurations found in session state cache, initializing from them");
                buildList = buildContainers;
            }
            else
            {
                Logger.LogTrace("Initializing without builds");
                buildList = null;
            }

            AddNewIndexes(shipIndexesFromUrl.Split(",").ToList(), buildList);
        }
    }

    private bool OnShipIndexChanged(Guid? oldId, string newShipIndex)
    {
        var update = false;
        if (oldId is not null)
        {
            var ship = shipContainers.First(x => x.Id.Equals(oldId));
            shipContainers.Replace(ship, ship with { Ship = AppData.ShipDictionary[newShipIndex], Build = null, ShipDataContainer = null, SpecialAbilityActive = false, ActivatedConsumableSlots = null, Modifiers = null });
            selectedTabId = (Guid) oldId;
            update = true;
        }
        else
        {
            AddNewIndexes(new() { newShipIndex }, null);
            selectedTabId = shipContainers.Last().Id;
        }

        UpdateUrl();
        updateTab = true;
        StateHasChanged();
        return update;
    }

    private void RemoveTab(MudTabPanel panel)
    {
        var id = (Guid) panel.Tag!;
        var ship = shipContainers.First(x => x.Id.Equals(id));
        int index = shipContainers.IndexOf(ship);
        shipContainers.Remove(ship);
        cache.RemoveEntry(id);

        if (mudTabs.ActivePanel.ID.Equals(panel.ID))
        {
            // If shipIndexes contains more element than index (meaning, index is not out of bound for the shipIndexes list), then we select the ship at the same index.
            // We do it with the ID because using the index makes the tab appear as blank ("display: none" in the style).
            // If the index is out of bound, we check if the shipIndexes has any element, in which case we take the last element of the list, since it means we removed the old last element.
            // Finally, if the list is empty, we check if the new ship tab is present. If it is, we select that one, otherwise we do nothing.
            if (shipContainers.Count > index && index != -1)
            {
                mudTabs.ActivatePanel(shipContainers[index].Id);
            }
            else if (shipContainers.Count > 0)
            {
                mudTabs.ActivatePanel(shipContainers.Last().Id);
            }
        }

        UpdateUrl();
    }

    private async Task OpenAddDialogAsync()
    {
        Logger.LogTrace("Add ship dialog opened");
        MetricsService.ShipStatsActions.WithLabels("add-ship").Inc();

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            CloseOnEscapeKey = true,
            DisableBackdropClick = false,
        };
        var result = await (await DialogService.ShowAsync<ShipSelectionDialog>("Add ships", options)).Result;
        Logger.LogTrace("Result received from add ship dialog");
        if (!result.Canceled && result.Data is List<ShipBuildContainer> { Count: > 0 } newShips)
        {
            Logger.LogTrace("Adding new ships");
            AddNewIndexes(new() { newShips.First().Ship.Index }, new() { newShips.First() });
            selectedTabId = shipContainers.Last().Id;
            AddNewIndexes(newShips.Skip(1).Select(x => x.Ship.Index).ToList(), newShips.Skip(1).ToList());
            updateTab = true;

            UpdateUrl();
            StateHasChanged();
        }
    }

    private void AddNewIndexes(List<string> indexList, List<ShipBuildContainer>? buildContainers)
    {
        shipContainers.AddRange(buildContainers ?? indexList.Select(index => ShipBuildContainer.CreateNew(AppData.ShipDictionary[index], null, null)));
    }

    private List<ShipBuildContainer> GetShipBuildContainers(bool calculateShipDataContainer)
    {
        List<ShipBuildContainer> buildContainers = new();
        foreach (var container in shipContainers)
        {
            var vmCacheEntry = cache.GetOrDefault(container.Id);
            if (vmCacheEntry is not null)
            {
                buildContainers.Add(ShipStatsTab.GetBuildContainer(container.Id, vmCacheEntry, calculateShipDataContainer));
            }
            else
            {
                buildContainers.Add(UpdateShipDataContainer(calculateShipDataContainer, container));
            }
        }

        return buildContainers;
    }

    private ShipBuildContainer UpdateShipDataContainer(bool calculateShipDataContainer, ShipBuildContainer container)
    {
        if (container.Build is not null)
        {
            using var viewModel = ShipStatsTab.CreateViewModel(container.Ship.Index, container.Build);

            List<Modifier> modifiers = viewModel.UpgradePanelViewModel.GetModifierList();
            modifiers.AddRange(viewModel.ConsumableViewModel.GetModifiersList());
            modifiers.AddRange(viewModel.CaptainSkillSelectorViewModel?.GetModifiersList() ?? new List<Modifier>());
            modifiers.AddRange(viewModel.SignalSelectorViewModel?.GetModifierList() ?? new List<Modifier>());

            var newDataContainer = calculateShipDataContainer ? DataContainerUtility.GetShipDataContainerFromBuild(container.Ship, container.Build.Modules, container.Ship.ShipUpgradeInfo.ShipUpgrades, modifiers) : container.ShipDataContainer;
            return container with { Modifiers = modifiers, ShipDataContainer = newDataContainer };
        }

        return calculateShipDataContainer ? container with { ShipDataContainer = DataContainerUtility.GetStockShipDataContainer(container.Ship) } : container;
    }

    private void OpenBallisticCharts()
    {
        MetricsService.ShipStatsActions.WithLabels("open-ballistic").Inc();
        AppPagesBrowser.GoToBallisticCharts(GetShipBuildContainers(false));
    }

    private void OpenAccelerationCharts()
    {
        MetricsService.ShipStatsActions.WithLabels("open-acceleration").Inc();
        AppPagesBrowser.GoToAccelerationCharts(GetShipBuildContainers(false));
    }

    private void OpenShipComparison()
    {
        MetricsService.ShipStatsActions.WithLabels("open-comparison").Inc();
        AppPagesBrowser.GoToShipComparison(GetShipBuildContainers(true));
    }

    private void UpdateUrl()
    {
        var shipsString = string.Join(",", shipContainers.Select(x => x.Ship.Index));
        Logger.LogTrace("Updating URL with shipIndexes: {ShipIndexes}", shipsString);
        NavManager.NavigateTo($"/ship?shipIndexes={shipsString}", replace: true);
    }

    public void Dispose()
    {
        cache.Dispose();
    }
}
