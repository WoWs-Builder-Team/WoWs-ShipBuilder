@using System.Collections.ObjectModel
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Features.DataContainers
@using WoWsShipBuilder.Features.ShipStats.ViewModels
@using WoWsShipBuilder.DataStructures.Upgrade
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Utility

@inherits ReactiveComponentBase<WoWsShipBuilder.Features.ShipStats.ViewModels.UpgradePanelViewModelBase>
@inject ILocalizer Localizer

@if (ViewModel is not null)
{
    <MudCard Outlined="true" Class="py-2 px-3">
        <MudStack Row="true" Justify="Justify.Center" >
            @foreach (List<Modernization> columnModernizations in ViewModel.AvailableModernizationList)
            {
                <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" PopoverClass="mt-1" ListClass="pa-0" >
                    <ActivatorContent>
                        <MudTooltip Color="Color.Transparent" Placement="Placement.Right" Delay="350">
                            <ChildContent>
                                <MudButton Style="@GetImageBreakpointStyle()" Variant="Variant.Outlined" >
                                    <MudImage Width="@GetImageSize(false)" Height="@GetImageSize(false)" Src="@GetSelectedUpgradeIcon(columnModernizations, ViewModel.SelectedModernizationList)"/>
                                </MudButton>
                            </ChildContent>
                            <TooltipContent>
                                <MudPaper Outlined="true" Style="max-width: 500px; z-index: 1600;">
                                    <MudStack Spacing="0" Class="pa-2">
                                        @{
                                            var currentMod = GetSelectedModernization(columnModernizations, ViewModel.SelectedModernizationList);
                                            if (currentMod is null)
                                            {
                                                <MudText Align="Align.Center" Style="font-size: 15px" Typo="Typo.h6">@Localizer.GetAppLocalization(nameof(Translation.TITLE_PlaceholderMod)).Localization</MudText>
                                            }
                                            else
                                            {
                                                @upgradeTooltip((currentMod, Localizer))
                                            }
                                        }
                                    </MudStack>
                                </MudPaper>
                            </TooltipContent>
                        </MudTooltip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudPaper Outlined="true">
                            @foreach (var modernization in columnModernizations)
                            {
                                <MudMenuItem Style="padding: 2px 4px;" OnAction="@(_ => ViewModel.OnModernizationSelected(modernization, columnModernizations))">
                                    <MudTooltip Color="Color.Transparent" Placement="Placement.Right" Delay="350">
                                        <ChildContent>
                                            <MudImage Width="@GetImageSize(true)" Height="@GetImageSize(true)" Src="@GetUpgradeIcon(modernization)"/>
                                        </ChildContent>
                                        <TooltipContent>
                                            <MudPaper Outlined="true" Style="max-width: 500px">
                                                <MudStack Spacing="0" Class="pa-2">
                                                    @if (modernization.Name.Equals("PlaceholderMod", StringComparison.InvariantCultureIgnoreCase))
                                                    {
                                                        <MudText Align="Align.Center" Style="font-size: 15px" Typo="Typo.h6">@Localizer.GetAppLocalization(nameof(Translation.TITLE_PlaceholderMod)).Localization</MudText>
                                                    }
                                                    else
                                                    {
                                                        @upgradeTooltip((modernization, Localizer))
                                                    }
                                                </MudStack>
                                            </MudPaper>
                                        </TooltipContent>
                                    </MudTooltip>
                                </MudMenuItem>
                            }
                        </MudPaper>
                    </ChildContent>
                </MudMenu>
            }
        </MudStack>
    </MudCard>

}

@code {

    [CascadingParameter]
    private Breakpoint Breakpoint { get; set; }

    // ReSharper disable once InconsistentNaming, UnusedParameter.Local
    private readonly RenderFragment<(Modernization modernization, ILocalizer localizer)> upgradeTooltip = data => __builder =>
    {
        var localizer = data.localizer;
        var modernization = data.modernization;
        <MudText Align="Align.Center" Typo="Typo.h6">@localizer.GetGameLocalization("TITLE_" + modernization.Name).Localization</MudText>
        string desc = localizer.GetGameLocalization("DESC_" + modernization.Name).Localization;
        if (!string.IsNullOrWhiteSpace(desc))
        {
            <MudText Align="Align.Center" Typo="Typo.body2" Style="white-space: break-spaces">@localizer.GetGameLocalization("DESC_" + modernization.Name).Localization</MudText>
        }
        <MudDivider Light="true" Class="ma-1"/>
        foreach (var modifier in modernization.Modifiers)
        {
            // this is here so we can have the call to the ModifierProcessor only once, to share the value between the if and the mudtext
            string modifierText = ModifierProcessor.GetUiModifierString(modifier, ReturnFilter.All, localizer);
            if (!string.IsNullOrWhiteSpace(modifierText))
            {
                <MudText Align="Align.Start" Typo="Typo.body2" Style="white-space: break-spaces" Class="flex-grow-0 flex-shrink-1">@modifierText</MudText>
            }
        }
    };

    private string GetSelectedUpgradeIcon(List<Modernization> modernizations, ObservableCollection<Modernization> selectedModernizations )
    {
        Modernization? selectedMod = modernizations.FirstOrDefault(modernization => selectedModernizations.Any(selected => selected.Index.Equals(modernization.Index)));
        selectedMod ??= UpgradePanelViewModelBase.PlaceholderModernization;

        string path = selectedMod.Index != null ? $"/_content/WoWsShipBuilder.Common/assets/modernization_icons/icon_modernization_{selectedMod.Name}.png" : "/_content/WoWsShipBuilder.Common/assets/modernization_icons/modernization_default3.png";

        return path;
    }

    private Modernization? GetSelectedModernization(List<Modernization> modernizations, ObservableCollection<Modernization> selectedModernizations)
    {
        Modernization? selectedMod = modernizations.FirstOrDefault(modernization => selectedModernizations.Any(selected => selected.Index.Equals(modernization.Index)));
        return selectedMod;
    }

    private string GetUpgradeIcon(Modernization modernization)
    {
        return modernization.Index != null ? $"/_content/WoWsShipBuilder.Common/assets/modernization_icons/icon_modernization_{modernization.Name}.png" : "/_content/WoWsShipBuilder.Common/assets/modernization_icons/modernization_default3.png";
    }

    private int GetImageSize(bool isInTooltip)
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return isInTooltip ? 40 : 36;
            default:
                return isInTooltip ? 60: 56;
        }
    }

    private string GetImageBreakpointStyle()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "min-width: 40px; width: 40px; height: 40px; padding: 2px;";
            default:
                return "min-width: 60px; width: 60px; height: 60px; padding: 2px;";
        }
    }
}
