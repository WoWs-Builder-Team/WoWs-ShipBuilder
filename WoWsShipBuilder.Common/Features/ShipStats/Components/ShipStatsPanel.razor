@using WoWsShipBuilder.DataStructures
@using static WoWsShipBuilder.Features.ShipStats.Components.SharedFragments
@using Microsoft.Extensions.Logging.Console
@using System.Text
@using WoWsShipBuilder.DataStructures.Ship.Components
@using System.ComponentModel.DataAnnotations
@using WoWsShipBuilder.Features.DataContainers
@using WoWsShipBuilder.Features.FiringAngleDiagram
@using WoWsShipBuilder.Features.Settings
@using WoWsShipBuilder.Infrastructure
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.GameData
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Metrics
@using WoWsShipBuilder.Infrastructure.Utility

@inherits ReactiveComponentBase<WoWsShipBuilder.Features.ShipStats.ViewModels.ShipStatsControlViewModel>
@inject ILocalizer Localizer
@inject NavigationManager NavManager
@inject AppSettings AppSettings
@inject IDialogService DialogService
@inject MetricsService MetricsService
@inject ExpanderStateCache ExpanderStateCache

@if (ViewModel?.CurrentShipStats is not null)
{
    <MudPaper Outlined="true" Class="pa-2">
        <MudGrid>
            <!--Main Armament column-->
            <MudItem xs="12" lg="@(ViewModel.CurrentShipStats.SecondColumnContent.Any() ? 4 : 6)">
                <MudExpansionPanels MultiExpansion Dense DisableGutters Class="my-n4">
                    <!--Main Battery-->
                    @if (ViewModel.CurrentShipStats?.MainBatteryDataContainer is not null)
                    {
                        <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_MainBattery)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-mainbattery"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid  my-4">
                            <MudStack Spacing="1" Class="expander-content-padding">
                                @foreach (var data in ViewModel.CurrentShipStats.MainBatteryDataContainer.DataElements)
                                {
                                    @DataElementFragment((data, Localizer))
                                }
                                <!--Dispersion-->
                                <MudText Typo="Typo.body2">
                                    @Localizer.GetAppLocalization(nameof(Translation.ShipStats_DispersionAtMaxRange)).Localization
                                </MudText>
                                <MudTooltip Inline="false" Placement="Placement.Bottom" Color="Color.Transparent" RootStyle="width: 100%" Arrow>
                                    <ChildContent>
                                        <div class="ml-3 d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">
                                                @Localizer.GetAppLocalization(nameof(Translation.ShipStats_HorizontalDisp)).Localization
                                            </MudText>
                                            <MudIcon ViewBox="-5 -1 36 36" Icon="@Icons.Material.Outlined.Info" Size="Size.Small"/>
                                            <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">
                                                @(ViewModel.CurrentShipStats.MainBatteryDataContainer.HorizontalDisp + " " + Localizer.GetAppLocalization(nameof(Translation.Unit_M)).Localization)
                                            </MudText>
                                        </div>
                                    </ChildContent>
                                    <TooltipContent>
                                        <MudPaper Outlined="true" Class="pa-2">
                                            <MudStack Style="max-width: 500px">
                                                <MudText Typo="Typo.body2">@(Localizer.GetAppLocalization(nameof(Translation.ShipStats_DispFormulaTooltip)).Localization + " <= " + ViewModel.CurrentShipStats.MainBatteryDataContainer.TaperDist + ":")</MudText>
                                                <MudText Typo="Typo.body2">@ViewModel.CurrentShipStats.MainBatteryDataContainer.HorizontalDispFormulaAtShortRange</MudText>
                                                <MudText Typo="Typo.body2">@(Localizer.GetAppLocalization(nameof(Translation.ShipStats_DispFormulaTooltip)).Localization + " > " + ViewModel.CurrentShipStats.MainBatteryDataContainer.TaperDist + ":")</MudText>
                                                <MudText Typo="Typo.body2">@ViewModel.CurrentShipStats.MainBatteryDataContainer.HorizontalDispFormula</MudText>
                                            </MudStack>
                                        </MudPaper>
                                    </TooltipContent>
                                </MudTooltip>
                                <MudTooltip Inline="false" Placement="Placement.Bottom" Color="Color.Transparent" RootStyle="width: 100%" Arrow>
                                    <ChildContent>
                                        <div class="ml-3 d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">@Localizer.GetAppLocalization(nameof(Translation.ShipStats_VerticalDisp)).Localization</MudText>
                                            <MudIcon ViewBox="-5 -1 36 36" Icon="@Icons.Material.Outlined.Info" Size="Size.Small"/>
                                            <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">@(ViewModel.CurrentShipStats.MainBatteryDataContainer.VerticalDisp + " " + Localizer.GetAppLocalization(nameof(Translation.Unit_M)).Localization)</MudText>
                                        </div>
                                    </ChildContent>
                                    <TooltipContent>
                                        <MudPaper Outlined="true" Class="pa-2">
                                            <MudStack Style="max-width: 500px">
                                                <MudText Typo="Typo.body2">@(Localizer.GetAppLocalization(nameof(Translation.ShipStats_DispFormulaTooltip)).Localization + " < " + ViewModel.CurrentShipStats.MainBatteryDataContainer.DelimDist + ":")</MudText>
                                                <MudText Typo="Typo.body2">@(ViewModel.CurrentShipStats.MainBatteryDataContainer.VerticalCoeffFormulaAtShortRange + " * " + Localizer.GetAppLocalization(nameof(Translation.ShipStats_HorizontalDispersionX)).Localization)</MudText>
                                                <MudText Typo="Typo.body2">@(Localizer.GetAppLocalization(nameof(Translation.ShipStats_DispFormulaTooltip)).Localization + " >= " + ViewModel.CurrentShipStats.MainBatteryDataContainer.DelimDist + ":")</MudText>
                                                <MudText Typo="Typo.body2">@(ViewModel.CurrentShipStats.MainBatteryDataContainer.VerticalCoeffFormula + " * " + Localizer.GetAppLocalization(nameof(Translation.ShipStats_HorizontalDispersionX)).Localization)</MudText>
                                            </MudStack>
                                        </MudPaper>
                                    </TooltipContent>
                                </MudTooltip>
                                <MudDivider/>
                                <MudText Typo="Typo.body2" @onclick="@(_ => OpenAngleDialog(ViewModel.CurrentShipStats.MainBatteryDataContainer.OriginalMainBatteryData.Guns, true))" Class="mb-2 link-text">
                                    @Localizer.GetAppLocalization(nameof(Translation.ShipStats_TurretAngles)).Localization
                                </MudText>

                                <!--Shell data-->
                                <MudExpansionPanels MultiExpansion Class="my-n2" Dense DisableGutters>
                                    @foreach (var shell in ViewModel.CurrentShipStats.MainBatteryDataContainer.ShellData)
                                    {
                                        <!--Border bottom initial needed to fix the first expander having a wrong color when closed-->
                                        <MudExpansionPanel DisableGutters Text="@Localizer.GetGameLocalization(shell.Name).Localization" @bind-IsExpanded="@ExpanderStateCache[$"ammo-mainbattery-{shell.Type}"]" Class="custom-child-expansion-panel-header child-expander my-2">
                                            <MudStack Spacing="1" Class="child-expander-content-padding">
                                                @foreach (var data in shell.DataElements)
                                                {
                                                    @DataElementFragment((data, Localizer))
                                                }
                                                <MudText Typo="Typo.body2" Class="link-text" @onclick="@(_ => StoreBuildsForTransfer(true, shell.Name))">
                                                    @Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_ShowCharts)).Localization
                                                </MudText>
                                            </MudStack>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </MudStack>
                        </MudExpansionPanel>
                    }

                    <!--Pinger gun-->
                    @if (ViewModel.CurrentShipStats?.PingerGunDataContainer is not null)
                    {
                        <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_PingerGun)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-pinger"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                            <MudStack Spacing="1" Class="expander-content-padding">
                                @foreach (var data in ViewModel.CurrentShipStats.PingerGunDataContainer.DataElements)
                                {
                                    @DataElementFragment((data,Localizer))
                                }
                            </MudStack>
                        </MudExpansionPanel>
                    }

                    <!--Torpedo-->
                    @if (ViewModel.CurrentShipStats?.TorpedoArmamentDataContainer is not null)
                    {
                        <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_TorpedoLaunchers)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-torpedo"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                            <MudStack Spacing="1" Class="expander-content-padding">
                                @foreach (var data in ViewModel.CurrentShipStats.TorpedoArmamentDataContainer.DataElements)
                                {
                                    @DataElementFragment((data,Localizer))
                                }
                                <MudText Typo="Typo.body2" @onclick="@(_ => OpenAngleDialog(ViewModel.CurrentShipStats.TorpedoArmamentDataContainer.TorpedoLaunchers, false))" Class="mb-2 link-text">
                                    @Localizer.GetAppLocalization(nameof(Translation.ShipStats_ShowLaunchersAngles)).Localization
                                </MudText>
                                <!--Torpedo data-->
                                <MudExpansionPanels MultiExpansion Dense DisableGutters Class="my-n2">
                                    @foreach (var torpedo in ViewModel.CurrentShipStats.TorpedoArmamentDataContainer.Torpedoes)
                                    {
                                        <!--Border bottom initial needed to fix the first expander having a wrong color when closed-->
                                        <MudExpansionPanel DisableGutters Text="@Localizer.GetGameLocalization(torpedo.Name).Localization" @bind-IsExpanded="@ExpanderStateCache[$"ammo-torpedo-{torpedo.TorpedoType}"]" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                            <MudStack Spacing="1" Class="child-expander-content-padding">
                                                @if (torpedo.TorpedoType.Equals($"ShipStats_Torpedo{TorpedoType.Magnetic.TorpedoTypeToString()}"))
                                                {
                                                    for(int i = 0; i < torpedo.DataElements.Count - 11; i++)
                                                    {
                                                        @DataElementFragment((torpedo.DataElements[i], Localizer))
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var data in torpedo.DataElements)
                                                    {
                                                        @DataElementFragment((data, Localizer))
                                                    }
                                                }
                                                @if (torpedo.CanHitClasses is not null)
                                                {
                                                    <div class="d-flex justify-space-between">
                                                        <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">
                                                            @Localizer.GetAppLocalization(nameof(Translation.ShipStats_CanHitClasses)).Localization
                                                        </MudText>
                                                        <MudStack Row="true">
                                                            @foreach (var shipClass in torpedo.CanHitClasses)
                                                            {
                                                                <MudIcon ViewBox="0 0 22 10" Icon="@GetIconFromClass(shipClass)"/>
                                                            }
                                                        </MudStack>
                                                    </div>
                                                }
                                                @if (torpedo.TorpedoType.Equals($"ShipStats_Torpedo{TorpedoType.Magnetic.TorpedoTypeToString()}"))
                                                {
                                                    <MudExpansionPanels MultiExpansion Dense DisableGutters Class="my-n2">
                                                        <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_MoreDetails)).Localization" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                                        <MudStack Spacing="1" Class="child-expander-content-padding">
                                                            @for (var i = torpedo.DataElements.Count - 11; i < torpedo.DataElements.Count - 5; i++)
                                                            {
                                                                @DataElementFragment((torpedo.DataElements[i], Localizer))
                                                            }
                                                        </MudStack>
                                                    </MudExpansionPanel>
                                                        <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_CutOffDistances)).Localization" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                                            <MudStack Spacing="1" Class="child-expander-content-padding">
                                                                @for (var i = torpedo.DataElements.Count - 5; i < torpedo.DataElements.Count; i++)
                                                                {
                                                                    @DataElementFragment((torpedo.DataElements[i], Localizer))
                                                                }
                                                            </MudStack>
                                                        </MudExpansionPanel>
                                                    </MudExpansionPanels>
                                                }
                                            </MudStack>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </MudStack>
                        </MudExpansionPanel>
                    }

                    <!--CV planes-->
                    @if (ViewModel.CurrentShipStats?.CvAircraftDataContainer is not null)
                    {
                        <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_Aircraft)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-planes"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                            <MudExpansionPanels MultiExpansion Dense DisableGutters Class="my-n2 expander-content-padding mt-n1">
                                @foreach (var plane in ViewModel.CurrentShipStats.CvAircraftDataContainer)
                                {
                                    <MudExpansionPanel Text="@Localizer.GetAppLocalization($"ShipStats_{plane.PlaneVariant}").Localization" @bind-IsExpanded="@ExpanderStateCache[$"ammo-planes-{plane.PlaneVariant}"]" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                        <MudStack Spacing="1" Class="child-expander-content-padding">
                                            <div class="d-flex justify-space-between">
                                                <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">
                                                    @Localizer.GetAppLocalization(nameof(Translation.ShipStats_Name)).Localization
                                                </MudText>
                                                <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">
                                                    @Localizer.GetGameLocalization(plane.Name).Localization
                                                </MudText>
                                            </div>
                                            @foreach (var data in plane.DataElements)
                                            {
                                                @DataElementFragment((data,Localizer))
                                            }
                                            <MudExpansionPanel Dense Text="@Localizer.GetAppLocalization(plane.WeaponType).Localization" @bind-IsExpanded="@ExpanderStateCache[$"sec-ammo-planes-{plane.PlaneVariant}"]" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-1">
                                                <MudStack Spacing="1" Class="child-expander-content-padding">
                                                    @foreach (var weaponData in plane.Weapon?.DataElements ?? new())
                                                    {
                                                        @DataElementFragment((weaponData,Localizer))
                                                    }
                                                </MudStack>
                                            </MudExpansionPanel>
                                            @if (plane.PlaneConsumables.Count > 0)
                                            {
                                                <MudText Typo="Typo.body2">@Localizer.GetAppLocalization(nameof(Translation.ShipStats_Consumables)).Localization</MudText>
                                                <MudStack Row="true" Class="justify-center">
                                                    @foreach (var consumable in plane.PlaneConsumables)
                                                    {
                                                        <MudTooltip Placement="Placement.Bottom" Color="Color.Transparent">
                                                            <ChildContent>
                                                                <MudImage Class="border border-solid rounded-0" ObjectFit="ObjectFit.ScaleDown" Width="60" Height="60" Src="@($"/_content/WoWsShipBuilder.Common/assets/consumable_icons/consumable_{consumable.IconName}.png")"/>
                                                            </ChildContent>
                                                            <TooltipContent>
                                                                <MudPaper Outlined="true" Class="pa-2">
                                                                    <MudStack Spacing="1">
                                                                        <MudText Typo="Typo.h6">@Localizer.GetGameLocalization("DOCK_CONSUME_TITLE_" + consumable.Name).Localization</MudText>
                                                                        <MudText Typo="Typo.body2">@Localizer.GetGameLocalization("DOCK_CONSUME_DESCRIPTION_" + consumable.Name).Localization</MudText>
                                                                        <MudDivider Light="true" Class="ma-1"/>
                                                                        @foreach (var consumableData in consumable.DataElements)
                                                                        {
                                                                            @DataElementFragment((consumableData,Localizer))
                                                                        }
                                                                    </MudStack>
                                                                </MudPaper>
                                                            </TooltipContent>
                                                        </MudTooltip>
                                                    }
                                                </MudStack>
                                            }
                                        </MudStack>
                                    </MudExpansionPanel>
                                }
                            </MudExpansionPanels>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudItem>

            <!--Secondary Armament column-->
            @if(ViewModel.CurrentShipStats.SecondColumnContent.Any())
            {
                <MudItem xs="12" lg="4">
                    <MudExpansionPanels MultiExpansion Dense DisableGutters Class="my-n4">
                        <!--Secondaries-->
                        @if (ViewModel.CurrentShipStats?.SecondaryBatteryUiDataContainer.Secondaries is not null)
                        {
                            <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_SecondaryBattery)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-secondary"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                                <MudStack Spacing="1" Class="expander-content-padding">
                                    @foreach (var data in ViewModel.CurrentShipStats.SecondaryBatteryUiDataContainer.DataElements)
                                    {
                                        @DataElementFragment((data,Localizer))
                                    }
                                </MudStack>
                                <MudExpansionPanels MultiExpansion Dense DisableGutters Class="expander-content-padding my-n2">
                                    @for (var i = 0; i < ViewModel.CurrentShipStats.SecondaryBatteryUiDataContainer.Secondaries.Count; i++)
                                    {
                                        var secondary = ViewModel.CurrentShipStats.SecondaryBatteryUiDataContainer.Secondaries[i];
                                        var currentIndex = i;
                                        <MudExpansionPanel Text="@(ConvertFormattedText(secondary.TurretSetup, Localizer))" @bind-IsExpanded="@ExpanderStateCache[$"sec-gun-{currentIndex}"]" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                            <MudStack Spacing="1" Class="child-expander-content-padding">
                                                @foreach (var secondaryData in secondary.DataElements)
                                                {
                                                    @DataElementFragment((secondaryData, Localizer))
                                                }
                                                <!--Shell data-->
                                                <!--Border bottom initial needed to fix the first expander having a wrong color when closed-->
                                                <MudExpansionPanel Dense DisableGutters Text="@Localizer.GetGameLocalization(secondary.Shell?.Name ?? "").Localization" @bind-IsExpanded="@ExpanderStateCache[$"ammo-sec-gun-{currentIndex}"]" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander mt-1 mb-0">
                                                    <MudStack Spacing="1" Class="child-expander-content-padding">
                                                        @foreach (var data in secondary.Shell?.DataElements ?? new())
                                                        {
                                                            @DataElementFragment((data, Localizer))
                                                        }
                                                    </MudStack>
                                                </MudExpansionPanel>
                                            </MudStack>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </MudExpansionPanel>
                        }

                        <!--Anti air-->
                        @if (ViewModel.CurrentShipStats?.AntiAirDataContainer is not null)
                        {
                            <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_AADefense)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-antiair"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                                <MudExpansionPanels MultiExpansion Dense DisableGutters Class="expander-content-padding my-n2">
                                    <!--Long range aura-->
                                    @if (ViewModel.CurrentShipStats.AntiAirDataContainer.LongRangeAura is not null)
                                    {
                                        <MudExpansionPanel @bind-IsExpanded="@ExpanderStateCache["sec-longrange"]" Text="@(Localizer.GetAppLocalization(nameof(Translation.ShipStats_LongAura)).Localization + " : " + ViewModel.CurrentShipStats.AntiAirDataContainer.LongRangeAura.Range + " " + Localizer.GetAppLocalization(nameof(Translation.Unit_KM)).Localization)" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                            <MudStack Spacing="1" Class="child-expander-content-padding">
                                                @foreach (var longData in ViewModel.CurrentShipStats.AntiAirDataContainer.LongRangeAura.DataElements)
                                                {
                                                    @DataElementFragment((longData, Localizer))
                                                }
                                            </MudStack>
                                        </MudExpansionPanel>
                                    }

                                    <!--Medium range aura-->
                                    @if (ViewModel.CurrentShipStats.AntiAirDataContainer.MediumRangeAura is not null)
                                    {
                                        <MudExpansionPanel @bind-IsExpanded="@ExpanderStateCache["sec-mediumrange"]" Text="@(Localizer.GetAppLocalization(nameof(Translation.ShipStats_MediumAura)).Localization + " : " + ViewModel.CurrentShipStats.AntiAirDataContainer.MediumRangeAura.Range + " " + Localizer.GetAppLocalization(nameof(Translation.Unit_KM)).Localization)" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                            <MudStack Spacing="1" Class="child-expander-content-padding">
                                                @foreach (var longData in ViewModel.CurrentShipStats.AntiAirDataContainer.MediumRangeAura.DataElements)
                                                {
                                                    @DataElementFragment((longData, Localizer))
                                                }
                                            </MudStack>
                                        </MudExpansionPanel>
                                    }

                                    <!--Short range aura-->
                                    @if (ViewModel.CurrentShipStats.AntiAirDataContainer.ShortRangeAura is not null)
                                    {
                                        <MudExpansionPanel @bind-IsExpanded="@ExpanderStateCache["sec-shortrange"]" Text="@(Localizer.GetAppLocalization(nameof(Translation.ShipStats_ShortAura)).Localization + " : " + ViewModel.CurrentShipStats.AntiAirDataContainer.ShortRangeAura.Range + " " + Localizer.GetAppLocalization(nameof(Translation.Unit_KM)).Localization)" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-2">
                                            <MudStack Spacing="1" Class="child-expander-content-padding">
                                                @foreach (var longData in ViewModel.CurrentShipStats.AntiAirDataContainer.ShortRangeAura.DataElements)
                                                {
                                                    @DataElementFragment((longData, Localizer))
                                                }
                                            </MudStack>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </MudExpansionPanel>
                        }

                        <!--Airstrike-->
                        @if (ViewModel.CurrentShipStats?.AirstrikeDataContainer is not null)
                        {
                            <MudExpansionPanel Text="@Localizer.GetAppLocalization(ViewModel.CurrentShipStats.AirstrikeDataContainer.Header).Localization" @bind-IsExpanded="@ExpanderStateCache["main-airstrike"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                                <MudStack Spacing="1" Class="expander-content-padding">
                                    @foreach (var data in ViewModel.CurrentShipStats.AirstrikeDataContainer.DataElements)
                                    {
                                        @DataElementFragment((data, Localizer))
                                    }
                                    <MudExpansionPanel Dense DisableGutters Text="@Localizer.GetAppLocalization(ViewModel.CurrentShipStats.AirstrikeDataContainer.WeaponType).Localization" @bind-IsExpanded="@ExpanderStateCache["sec-airstrike-weapon"]" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-0">
                                        <MudStack Spacing="1" Class="child-expander-content-padding">
                                            @foreach (var weaponData in ViewModel.CurrentShipStats?.AirstrikeDataContainer?.Weapon?.DataElements ?? new())
                                            {
                                                @DataElementFragment((weaponData,Localizer))
                                            }
                                        </MudStack>
                                    </MudExpansionPanel>
                                </MudStack>
                            </MudExpansionPanel>
                        }

                        <!--ASW Airstrike-->
                        @if (ViewModel.CurrentShipStats?.AswAirstrikeDataContainer is not null)
                        {
                            var dcDataContext = ViewModel.CurrentShipStats.AswAirstrikeDataContainer.Weapon as DepthChargeDataContainer ?? throw new InvalidOperationException("Expected DepthChargeDataContainer but found another type.");
                            <MudExpansionPanel Text="@Localizer.GetAppLocalization(ViewModel.CurrentShipStats.AswAirstrikeDataContainer.Header).Localization" @bind-IsExpanded="@ExpanderStateCache["main-asw-airstrike"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid  my-4">
                                <MudStack Spacing="1" Class="expander-content-padding">
                                    @foreach (var data in ViewModel.CurrentShipStats.AswAirstrikeDataContainer.DataElements)
                                    {
                                        @DataElementFragment((data, Localizer))
                                    }
                                    <MudExpansionPanel Dense DisableGutters Text="@Localizer.GetAppLocalization(ViewModel.CurrentShipStats.AswAirstrikeDataContainer.WeaponType).Localization" @bind-IsExpanded="@ExpanderStateCache["sec-asw-airstrike-weapon"]" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander  my-0">
                                        <MudStack Spacing="1" Class="child-expander-content-padding">
                                            @foreach (var weaponData in ViewModel.CurrentShipStats?.AswAirstrikeDataContainer?.Weapon?.DataElements ?? new())
                                            {
                                                @DataElementFragment((weaponData,Localizer))
                                            }
                                            <MudText Typo="Typo.body2" Class="link-text" @onclick="@(SetDepthChargeDamageDistributionChartVisibility)">
                                                @(showDepthChargeDamageDistributionChart ? Localizer.GetAppLocalization(nameof(Translation.ShipStats_HideDcDamageDistribution)).Localization : Localizer.GetAppLocalization(nameof(Translation.ShipStats_ShowDcDamageDistribution)).Localization)
                                            </MudText>
                                            <div style="@GetDepthChargeDamageDistributionChartVisibility()" class="ma-auto">
                                                <DepthChargeDamageDistributionChart ShipIndex="@ViewModel.CurrentShipStats!.Index" DataRecord="@(new(dcDataContext.Damage, dcDataContext.DcSplashRadius, dcDataContext.PointsOfDmg))"/>
                                            </div>
                                        </MudStack>
                                    </MudExpansionPanel>
                                </MudStack>
                            </MudExpansionPanel>
                        }

                        <!--Depth charges-->
                        @if (ViewModel.CurrentShipStats?.DepthChargeLauncherDataContainer is not null)
                        {
                            var dcDataContext = ViewModel.CurrentShipStats.DepthChargeLauncherDataContainer.DepthCharge!;
                            <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_DepthChargesLauncher)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-dc"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                                <MudStack Spacing="1" Class="expander-content-padding">
                                    @foreach (var data in ViewModel.CurrentShipStats.DepthChargeLauncherDataContainer.DataElements)
                                    {
                                        @DataElementFragment((data, Localizer))
                                    }
                                    @foreach (var data in ViewModel.CurrentShipStats?.DepthChargeLauncherDataContainer?.DepthCharge?.DataElements ?? new())
                                    {
                                        @DataElementFragment((data, Localizer))
                                    }
                                    <MudText Typo="Typo.body2" Class="link-text" @onclick="@(SetDepthChargeDamageDistributionChartVisibility)">
                                        @(showDepthChargeDamageDistributionChart ? Localizer.GetAppLocalization(nameof(Translation.ShipStats_HideDcDamageDistribution)).Localization : Localizer.GetAppLocalization(nameof(Translation.ShipStats_ShowDcDamageDistribution)).Localization)
                                    </MudText>
                                    <div style="@GetDepthChargeDamageDistributionChartVisibility()" class="ma-auto">
                                        <DepthChargeDamageDistributionChart ShipIndex="@ViewModel.CurrentShipStats!.Index" DataRecord="@(new(dcDataContext.Damage, dcDataContext.DcSplashRadius, dcDataContext.PointsOfDmg))"/>
                                    </div>
                                </MudStack>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </MudItem>
            }

            <!--Misc-->
            <MudItem xs="12" lg="@(ViewModel.CurrentShipStats.SecondColumnContent.Any() ? 4 : 6)">
                <MudExpansionPanels MultiExpansion Dense DisableGutters Class="my-n4">
                    <!--Concealment-->
                    <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_Concealment)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-concealment"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid rounded-0 my-4">
                        <MudStack Spacing="1" Class="expander-content-padding">
                            @foreach (var data in ViewModel.CurrentShipStats?.ConcealmentDataContainer.DataElements ?? new())
                            {
                                @DataElementFragment((data, Localizer))
                            }
                        </MudStack>
                    </MudExpansionPanel>

                    <!--Maneuverability-->
                    <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_Maneuverability)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-maneuverability"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid rounded-0 my-4">
                        <MudStack Spacing="1" Class="expander-content-padding">
                            @foreach (var data in ViewModel.CurrentShipStats?.ManeuverabilityDataContainer.DataElements ?? new())
                            {
                                @DataElementFragment((data, Localizer))
                            }
                        </MudStack>
                        <MudText Typo="Typo.body2" Class="expander-content-padding mt-n1 link-text" @onclick="@(_ => StoreBuildsForTransfer(false, null))">
                            @Localizer.GetAppLocalization(nameof(Translation.ShipStats_ShowAccelerationCharts)).Localization
                        </MudText>
                    </MudExpansionPanel>

                    <!--Survivability-->
                    <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_Survivability)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-survivability"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                        <ChildContent>
                            <MudStack Spacing="1" Class="expander-content-padding">
                                @DataElementFragment((ViewModel.CurrentShipStats?.SurvivabilityDataContainer.DataElements[0]!, Localizer))
                                @{
                                    var j = ViewModel.CurrentShipStats?.PingerGunDataContainer is null ? 2 : 3; // subs have battery data that other ships do not have so we have to account for it
                                    for (int i = ViewModel.CurrentShipStats!.SurvivabilityDataContainer.DataElements.Count - j; i < ViewModel.CurrentShipStats?.SurvivabilityDataContainer.DataElements.Count; i++)
                                    {
                                        @DataElementFragment((ViewModel.CurrentShipStats?.SurvivabilityDataContainer.DataElements[i]!, Localizer))
                                    }
                                }
                                <MudExpansionPanel @bind-IsExpanded="@ExpanderStateCache["survivability-hp"]" Dense DisableGutters Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_ShipSectionsHp)).Localization" Style="border-bottom: initial" Class="custom-child-expansion-panel-header child-expander my-0">
                                    <MudStack Spacing="1" Class="child-expander-content-padding">
                                        @for (var i = 1; i < ViewModel.CurrentShipStats?.SurvivabilityDataContainer.DataElements.Count - j; i++)
                                        {
                                            @DataElementFragment((ViewModel.CurrentShipStats?.SurvivabilityDataContainer.DataElements[i]!, Localizer))
                                        }
                                    </MudStack>
                                </MudExpansionPanel>
                            </MudStack>
                        </ChildContent>
                    </MudExpansionPanel>

                    <!--T11 abilities-->
                    @if (ViewModel.CurrentShipStats?.SpecialAbilityDataContainer is not null)
                    {
                        <MudExpansionPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ShipStats_SpecialAbility)).Localization" @bind-IsExpanded="@ExpanderStateCache["main-supership"]" Style="border-bottom: initial" Class="custom-expansion-panel-header header-border border border-solid my-4">
                            <MudStack Spacing="1" Class="expander-content-padding">
                                @if (ViewModel.CurrentShipStats.SpecialAbilityDataContainer.IsBurstMode)
                                {
                                    <MudText Typo="Typo.body2">@Localizer.GetAppLocalization(ViewModel.CurrentShipStats.SpecialAbilityDataContainer.Name).Localization.ToUpperInvariant()</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2">@Localizer.GetGameLocalization(ViewModel.CurrentShipStats.SpecialAbilityDataContainer.Name).Localization.ToUpperInvariant()</MudText>
                                    <MudText Typo="Typo.body2">@FixSpecialAbilityDescription(Localizer.GetGameLocalization(ViewModel.CurrentShipStats.SpecialAbilityDataContainer.Description).Localization)</MudText>
                                }
                                <MudSwitch @bind-Checked="@ViewModel.IsSpecialAbilityActive" Label="@Localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Activate))" Color="Color.Secondary"/>
                                <MudDivider Light="true" Class="ma-1"/>
                                @foreach (var data in ViewModel.CurrentShipStats.SpecialAbilityDataContainer.DataElements)
                                {
                                    @DataElementFragment((data, Localizer))
                                }
                                @foreach (var modifier in ViewModel.CurrentShipStats.SpecialAbilityDataContainer.Modifiers)
                                {
                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">@ModifierProcessor.GetUiModifierString(modifier, ReturnFilter.Description, Localizer)</MudText>
                                        <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">@ModifierProcessor.GetUiModifierString(modifier, ReturnFilter.Value, Localizer)</MudText>
                                    </div>
                                }
                            </MudStack>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {

    [Parameter, EditorRequired]
    public Action<bool, string?> StoreBuildsForTransfer { get; set; } = default!;

    private bool showDepthChargeDamageDistributionChart;

    private string GetIconFromClass(ShipClass shipClass)
    {
        var path = ClassToPathHelper.GetSvgPathFromClass(shipClass);
        return $"<path d=\"{path}\"/>";
    }

    private void OpenAngleDialog(IEnumerable<IGun> guns, bool isArtillery)
    {
        var label = isArtillery ? "open-turret-diagram" : "open-torpedo-diagram";
        MetricsService.ShipStatsActions.WithLabels(label).Inc();
        var records = guns
            .OrderBy(gun => gun, new TurretListComparer())
            .Select(gun =>
            {
                var sector = gun.HorizontalSector.Select(a => a + gun.BaseAngle).ToArray();
                var deadZones = gun.HorizontalDeadZones.Select(z => z.Select(a => a + gun.BaseAngle).ToArray()).ToArray();
                return new GunDataContainer(gun.HorizontalPosition, gun.VerticalPosition, gun.BaseAngle, sector, deadZones);
            });
        var parameters = new DialogParameters
        {
            { nameof(FiringAngleDialog.IsArtillery), isArtillery },
            { nameof(FiringAngleDialog.GunDataContainers), records },
        };
        var options = new DialogOptions
        {
            NoHeader = true,
            CloseButton = false,
        };
        DialogService.Show<FiringAngleDialog>("FiringAngles", parameters, options);
    }

    private void SetDepthChargeDamageDistributionChartVisibility()
    {
        if (!showDepthChargeDamageDistributionChart)
        {
            MetricsService.ShipStatsActions.WithLabels("show-dc-chart").Inc();
        }

        showDepthChargeDamageDistributionChart = !showDepthChargeDamageDistributionChart;
    }

    private string GetDepthChargeDamageDistributionChartVisibility()
    {
        return showDepthChargeDamageDistributionChart ? "align-content: center; visibility: visible; height:100%; width:100%" : "height: 0px; visibility: hidden";
    }

    private static string FixSpecialAbilityDescription(string description)
    {
        if (description.Contains("[CMD_ACTIVATE"))
        {
            description = description.TrimEnd('.');
            return description[..(description.LastIndexOf('.') + 1)];
        }

        return description;
    }
}
