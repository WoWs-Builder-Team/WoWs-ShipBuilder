@using System.Globalization
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Features.ShipComparison.GridData
@using WoWsShipBuilder.Infrastructure.GameData
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> TorpedoDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.Torpedo.AsString();

        var nfi = (NumberFormatInfo)CultureInfo.InvariantCulture.NumberFormat.Clone();
        nfi.NumberGroupSeparator = "'";

        var unitKm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_KM))}";
        var unitPerCent = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_PerCent))}";
        var unitKnots = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_Knots))}";
        var unitM = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_M))}";
        var unitS = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_S))}";
        var unitDegreePerSecond = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_DegreePerSecond))}";
        var unitDegree = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_Degree))}";

        var columnTitleAmount = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Amount));
        var columnTitleLoaders = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Loaders));
        var columnTitleTurnTime = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TurnTime));
        var columnTitleTraverseSpeed = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TraverseSpeed));
        var columnTitleReload = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReloadTime));
        var columnTitleSpread = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Spread));
        var columnTitleSwitchTime = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_SwitchTime));
        var columnTitleType = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type));
        var columnTitleDamage = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage));
        var columnTitleSalvoDamage = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FullSalvoDamage));
        var columnTitleMaxRange = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_MaxRange));
        var columnTitleSpeed = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Speed));
        var columnTitleDetectionRange = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Detectability));
        var columnTitleArmingDistance = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ArmingDistance));
        var columnTitleReactionTime = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReactionTime));
        var columnTitleFloodChance = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FloodingChance));
        var columnTitleBlastRadius = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ExplosionRadius))}";
        var columnTitleBlastPenetration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration))}";
        var columnTitleCanHit = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_CanHitClasses));

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAmount}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAmount)" T="GridDataWrapper" Title="@columnTitleAmount" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x => x.TorpedoLauncher?.TorpCount ?? 0)">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TorpCount is not null && context.Item.TorpedoLauncher?.TorpLayout is not null)
                {
                    <MudText Typo="Typo.body2">
                        @($"{context.Item.TorpedoLauncher.TorpCount} ({context.Item.TorpedoLauncher.TorpLayout})")
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleLoaders}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleLoaders)" T="GridDataWrapper" Title="@columnTitleLoaders" SortBy="@(x => x.TorpedoLauncher?.LoadersCount ?? 0)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher is not null)
                {
                    string loaders = default!;
                    if (!string.IsNullOrEmpty(context.Item.TorpedoLauncher.BowLoaders))
                    {
                        loaders += context.Item.TorpedoLauncher.BowLoaders + " + ";
                    }
                    if (!string.IsNullOrEmpty(context.Item.TorpedoLauncher.SternLoaders))
                    {
                        loaders += context.Item.TorpedoLauncher.SternLoaders + " + ";
                    }
                    if (!string.IsNullOrEmpty(context.Item.TorpedoLauncher.LeftSideLoaders))
                    {
                        loaders += context.Item.TorpedoLauncher.LeftSideLoaders + " + ";
                    }
                    if (!string.IsNullOrEmpty(context.Item.TorpedoLauncher.RightSideLoaders))
                    {
                        loaders += context.Item.TorpedoLauncher.RightSideLoaders;
                    }
                    if (loaders.EndsWith(" + "))
                    {
                        loaders = loaders[..^3];
                    }

                    if (!string.IsNullOrEmpty(loaders))
                    {
                        <MudText Typo="Typo.body2">
                            @loaders
                        </MudText>
                    }
                    else
                    {
                        @UtilityFragments.DataNotAvailableFragment
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleTurnTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleTurnTime)" T="GridDataWrapper" Title="@columnTitleTurnTime" SortBy="@(x => x.TorpedoLauncher?.TurnTime ?? 0)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TurnTime is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.TorpedoLauncher.TurnTime + unitS)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleTraverseSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleTraverseSpeed)" T="GridDataWrapper" Title="@columnTitleTraverseSpeed" SortBy="@(x => x.TorpedoLauncher?.TraverseSpeed ?? 0)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TraverseSpeed is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.TorpedoLauncher.TraverseSpeed + unitDegreePerSecond)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReload}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReload)" T="GridDataWrapper" Title="@columnTitleReload" SortBy="@(x => x.TorpedoLauncher?.Reload ?? 0)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.Reload is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.TorpedoLauncher.Reload + unitS)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSpread}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSpread)" T="GridDataWrapper" Title="@columnTitleSpread" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> x.ShipDataContainer.TorpedoArmamentDataContainer?.TorpedoLaunchers.First().TorpedoAngles[1] - x.ShipDataContainer.TorpedoArmamentDataContainer?.TorpedoLaunchers.First().TorpedoAngles[0] ?? -1)">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.TorpedoLauncher?.TorpedoArea))
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.TorpedoLauncher.TorpedoArea + unitDegree)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSwitchTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSwitchTime)" T="GridDataWrapper" Title="@columnTitleSwitchTime" SortBy="@(x => x.TorpedoLauncher?.TimeToSwitch ?? 0)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TimeToSwitch is not null && context.Item.Torpedo.Type.Count > 1)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.TorpedoLauncher.TimeToSwitch + unitS)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleType}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleType)" T="GridDataWrapper" Title="@columnTitleType" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.Torpedo.Type.Any() ? string.Empty : element.localizer.GetAppLocalization(x.Torpedo.Type.First()).Localization)">
            <CellTemplate>
                @if (context.Item.Torpedo.Type.Any())
                {
                    List<string> torps = context.Item.Torpedo.Type;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        string torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization(torp).Localization
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamage)" T="GridDataWrapper" Title="@columnTitleDamage" SortBy="@(x => x.Torpedo.Damage)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.Damage.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.Damage;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSalvoDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSalvoDamage)" T="GridDataWrapper" Title="@columnTitleSalvoDamage" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x => x.Torpedo.FullSalvoDamage.Where(y => !string.IsNullOrEmpty(y)).Select(z => int.Parse(z ?? "0", NumberStyles.AllowThousands, nfi)).ToNoSortList())">
            <CellTemplate>
                @{
                   List<string?> torps = context.Item.Torpedo.FullSalvoDamage.Where(x => !string.IsNullOrEmpty(x)).ToList();
                   if (torps.Count == 0)
                   {
                       @UtilityFragments.DataNotAvailableFragment
                   }
                   else
                   {
                       for (var i = 0; i < torps.Count; i++)
                       {
                           string? torp = torps[i];
                           <MudText Typo="Typo.body2">
                               @torp
                           </MudText>
                           if (i < torps.Count - 1)
                           {
                               <MudDivider Class="my-1"/>
                           }
                       }
                   }
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMaxRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMaxRange)" T="GridDataWrapper" Title="@columnTitleMaxRange" SortBy="@(x => x.Torpedo.Range)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.Range.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.Range;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @(torp + unitKm)
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSpeed)" T="GridDataWrapper" Field="TorpedoSpeed" Title="@columnTitleSpeed" SortBy="@(x => x.Torpedo.Speed)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.Speed.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.Speed;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @(torp + unitKnots)
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDetectionRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDetectionRange)" T="GridDataWrapper" Title="@columnTitleDetectionRange" SortBy="@(x => x.Torpedo.DetectRange)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.DetectRange.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.DetectRange;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @(torp + unitKm)
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleArmingDistance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleArmingDistance)" T="GridDataWrapper" Title="@columnTitleArmingDistance" SortBy="@(x => x.Torpedo.ArmingDistance)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.ArmingDistance.Any())
                {
                    List<int> torps = context.Item.Torpedo.ArmingDistance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @(torp + unitM)
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReactionTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReactionTime)" T="GridDataWrapper" Title="@columnTitleReactionTime" SortBy="@(x => x.Torpedo.ReactionTime)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.ReactionTime.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.ReactionTime;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @(torp + unitS)
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFloodChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFloodChance)" T="GridDataWrapper" Title="@columnTitleFloodChance" SortBy="@(x => x.Torpedo.FloodingChance)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.FloodingChance.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.FloodingChance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @(torp + unitPerCent)
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastRadius)" T="GridDataWrapper" Title="@columnTitleBlastRadius" SortBy="@(x => x.Torpedo.BlastRadius)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.BlastRadius.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.BlastRadius;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @(torp + unitM)
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastPenetration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastPenetration)" T="GridDataWrapper" Title="@columnTitleBlastPenetration" SortBy="@(x => x.Torpedo.BlastPenetration)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Torpedo.BlastPenetration.Any())
                {
                    List<decimal> torps = context.Item.Torpedo.BlastPenetration;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCanHit}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCanHit)" T="GridDataWrapper" Title="@columnTitleCanHit" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.Torpedo.CanHit.Any() ? 0 : x.Torpedo.CanHit.First()?.Count ?? (x.Torpedo.Damage.Any() ? 5 : 0))">
            <CellTemplate>
                @if (context.Item.Torpedo.CanHit.Any())
                {
                    List<List<ShipClass>?> torps = context.Item.Torpedo.CanHit;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        List<ShipClass>? classes = torps[i];
                        if (classes is null && context.Item.Torpedo.Damage.Any())
                        {
                            <MudStack row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in Enum.GetValues(typeof(ShipClass)).Cast<ShipClass>().ToList())
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        else if (classes is null && !context.Item.Torpedo.Damage.Any())
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        else if (classes is not null)
                        {
                            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in classes)
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>
    };
}
