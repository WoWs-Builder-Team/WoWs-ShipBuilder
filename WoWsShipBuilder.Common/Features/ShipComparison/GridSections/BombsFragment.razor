@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Features.ShipComparison.GridData
@using WoWsShipBuilder.Infrastructure.Localization.Resources

@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> BombsDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.Bombs.AsString();

        var unitS = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_S))}";
        var unitM = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_M))}";
        var unitPerCent = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_PerCent))}";
        var unitMm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_MM))}";
        var unitDegree = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_Degree))}";

        var columnTitlePlane = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Plane));
        var columnTitleType = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type));
        var columnTitleDamage = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage));
        var columnTitleSplashRadius = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_SplashRadius));
        var columnTitleSplashDamage = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_SplashDmgSubs));
        var columnTitlePenetration = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration));
        var columnTitleFireChance = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FireChance));
        var columnTitleBlastRadius = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ExplosionRadius))}";
        var columnTitleBlastPenetration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration))}";
        var columnTitleFuseTimer = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FuseTimer));
        var columnTitleArmingThreshold = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ArmingThreshold));
        var columnTitleRicochetAngles = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_RicochetAngles));

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlane}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlane)" T="GridDataWrapper" Title="@columnTitlePlane" SortBy="@(x=> !x.Bombers.Type.Any() ? string.Empty : element.localizer.GetAppLocalization($"ShipStats_{x.Bombers.Type.First()}").Localization)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.Type.Any())
                {
                    List<string> items = context.Item.Bombers.Type;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization($"ShipStats_{item}").Localization
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleType}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleType)" T="GridDataWrapper" Title="@columnTitleType" SortBy="@(x=> !x.Bombers.WeaponType.Any() ? string.Empty : element.localizer.GetAppLocalization(x.Bombers.WeaponBombType.First()).Localization + " " + element.localizer.GetAppLocalization(x.Bombers.WeaponType.First()).Localization)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponType.Any())
                {
                    List<string> items = context.Item.Bombers.WeaponType;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        int j = i;
                        <MudText Typo="Typo.body2">
                            @($"{element.localizer.GetAppLocalization(context.Item.Bombers.WeaponBombType[j]).Localization} {element.localizer.GetAppLocalization(item).Localization}")
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamage)" SortBy="@(x => x.Bombers.WeaponDamage)" T="GridDataWrapper" Title="@columnTitleDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponDamage.Any())
                {
                    List<decimal> items = context.Item.Bombers.WeaponDamage;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSplashRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSplashRadius)" SortBy="@(x => x.Bombers.WeaponSplashRadius)" T="GridDataWrapper" Title="@columnTitleSplashRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponSplashRadius.Any())
                {
                    List<decimal> items = context.Item.Bombers.WeaponSplashRadius;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @(item + unitM)
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSplashDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSplashDamage)" SortBy="@(x => x.Bombers.WeaponSplashDamage)" T="GridDataWrapper" Title="@columnTitleSplashDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponSplashDamage.Any())
                {
                    List<decimal> items = context.Item.Bombers.WeaponSplashDamage;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePenetration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePenetration)" SortBy="@(x => x.Bombers.WeaponPenetration)" T="GridDataWrapper" Title="@columnTitlePenetration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponPenetration.Any())
                {
                    List<int> items = context.Item.Bombers.WeaponPenetration;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        if (item != 0)
                        {
                            <MudText Typo="Typo.body2">
                                @(item + unitMm)
                            </MudText>
                        }
                        else
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFireChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFireChance)" SortBy="@(x => x.Bombers.WeaponFireChance)" T="GridDataWrapper" Title="@columnTitleFireChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponFireChance.Any())
                {
                    List<decimal> items = context.Item.Bombers.WeaponFireChance;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        if (item != 0)
                        {
                            <MudText Typo="Typo.body2">
                                @(item + unitPerCent)
                            </MudText>
                        }
                        else
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastRadius)" SortBy="@(x => x.Bombers.WeaponBlastRadius)" T="GridDataWrapper" Title="@columnTitleBlastRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponBlastRadius.Any())
                {
                    List<decimal> items = context.Item.Bombers.WeaponBlastRadius;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        if (context.Item.Bombers.WeaponBombType[i].Equals($"ArmamentType_{BombType.HE}"))
                        {
                            <MudText Typo="Typo.body2">
                                @(item + unitM)
                            </MudText>
                        }
                        else
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastPenetration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastPenetration)" SortBy="@(x => x.Bombers.WeaponBlastPenetration)" T="GridDataWrapper" Title="@columnTitleBlastPenetration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponBlastPenetration.Any())
                {
                    List<decimal> items = context.Item.Bombers.WeaponBlastPenetration;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        if (context.Item.Bombers.WeaponBombType[i].Equals($"ArmamentType_{BombType.HE}"))
                        {
                            <MudText Typo="Typo.body2">
                                @item
                            </MudText>
                        }
                        else
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFuseTimer}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFuseTimer)" SortBy="@(x => x.Bombers.WeaponFuseTimer)" T="GridDataWrapper" Title="@columnTitleFuseTimer" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponFuseTimer.Any())
                {
                    List<decimal> items = context.Item.Bombers.WeaponFuseTimer;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        if (item != 0)
                        {
                            <MudText Typo="Typo.body2">
                                @(item + unitS)
                            </MudText>
                        }
                        else
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleArmingThreshold}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleArmingThreshold)" SortBy="@(x => x.Bombers.WeaponArmingThreshold)" T="GridDataWrapper" Title="@columnTitleArmingThreshold" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponArmingThreshold.Any())
                {
                    List<int> items = context.Item.Bombers.WeaponArmingThreshold;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        if (item != 0)
                        {
                            <MudText Typo="Typo.body2">
                                @(item + unitMm)
                            </MudText>
                        }
                        else
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleRicochetAngles}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleRicochetAngles)" T="GridDataWrapper" Title="@columnTitleRicochetAngles" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x => x.Bombers.WeaponRicochetAngles.Select(y => int.Parse(string.IsNullOrEmpty(y) ? "0" : y.Split("-").First())).ToList())">
            <CellTemplate>
                @if (context.Item.Bombers.WeaponRicochetAngles.Any())
                {
                    List<string> items = context.Item.Bombers.WeaponRicochetAngles;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        if (!string.IsNullOrEmpty(item))
                        {
                            <MudText Typo="Typo.body2">
                                @(item + unitDegree)
                            </MudText>
                        }
                        else
                        {
                            @UtilityFragments.DataNotAvailableFragment
                        }
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>
    };
}
