@using System.Globalization
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Features.ShipComparison.GridData
@using WoWsShipBuilder.Infrastructure.Localization.Resources

@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer, double firingRange, Dictionary<Guid, List<DispersionContainer>> dispersionCache)> SecondaryBatteryDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.SecondaryBattery.AsString();

        var nfi = (NumberFormatInfo)CultureInfo.InvariantCulture.NumberFormat.Clone();
        nfi.NumberGroupSeparator = "'";

        var unitMm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_MM))}";
        var unitKm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_KM))}";
        var unitS = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_S))}";
        var unitShotsPerMinute = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_ShotsPerMinute))}";
        var unitFpm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_FPM))}";
        var unitM = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_M))}";

        var columnTitleCaliber = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Caliber));
        var columnTitleBarrels = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Barrels));
        var columnTitleMaxRange = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_MaxRange));
        var columnTitleHorizontalDispersion = $"{element.localizer.SimpleAppLocalization(nameof(Translation.DispersionGraphWindow_Horizontal))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dispersion))}";
        var columnTitleVerticalDispersion = $"{element.localizer.SimpleAppLocalization(nameof(Translation.DispersionGraphWindow_Vertical))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dispersion))}";
        var columnTitleReload = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReloadTime));
        var columnTitleRof = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_RoF));
        var columnTitleDpm = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dpm));
        var columnTitleFpm = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Fpm));
        var columnTitleSigma = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Sigma));

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCaliber}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCaliber)" SortBy="@(x => x.Secondary.Caliber)" T="GridDataWrapper" Title="@columnTitleCaliber" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Caliber.Any())
                {
                    List<decimal> items = context.Item.Secondary.Caliber;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @(item + unitMm)
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBarrels}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBarrels)" T="GridDataWrapper" SortBy="@(x => x.Secondary.BarrelCount.Sum())" Title="@columnTitleBarrels" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.BarrelCount.Any() && context.Item.Secondary.BarrelsLayout.Any())
                {
                    List<int> items = context.Item.Secondary.BarrelCount;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        string itemLayout = context.Item.Secondary.BarrelsLayout[i];
                        <MudText Typo="Typo.body2">
                            @($"{item} ({itemLayout})")
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMaxRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMaxRange)" SortBy="@(x => x.Secondary.Range ?? 0)" T="GridDataWrapper" Title="@columnTitleMaxRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Range is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.Secondary.Range + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReload}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReload)" SortBy="@(x => x.Secondary.Reload)" T="GridDataWrapper" Title="@columnTitleReload" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Reload.Any())
                {
                    List<decimal> items = context.Item.Secondary.Reload;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @(item + unitS)
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleRof}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleRof)" T="GridDataWrapper" Title="@columnTitleRof" SortBy="@(x => x.Secondary.RoF.Sum())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.RoF.Any())
                {
                    List<decimal> items = context.Item.Secondary.RoF;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @(item + unitShotsPerMinute)
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDpm}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDpm)" T="GridDataWrapper" Title="@columnTitleDpm" SortBy="@(x => x.Secondary.Dpm.Select(y => int.Parse(y, NumberStyles.AllowThousands, nfi)).Sum())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Dpm.Any())
                {
                    List<string> items = context.Item.Secondary.Dpm;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFpm}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFpm)" T="GridDataWrapper" Title="@columnTitleFpm" SortBy="@(x => x.Secondary.Fpm.Sum())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Fpm.Any())
                {
                    List<decimal> items = context.Item.Secondary.Fpm;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @(item + unitFpm)
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleHorizontalDispersion}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleHorizontalDispersion)" SortBy="@(x => element.dispersionCache.TryGetValue(x.Id, out var value) ? value.Select(y => (decimal)y.Horizontal).ToNoSortList() : new())" T="GridDataWrapper" Title="@columnTitleHorizontalDispersion" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Range is not null && context.Item.Secondary.Range.Value < (decimal)element.firingRange)
                {
                    @UtilityFragments.OutOfRangeFragment((element.localizer, element.firingRange, context.Item.Secondary.Range.Value))
                }
                else if (element.dispersionCache.TryGetValue(context.Item.Id, out List<DispersionContainer>? value))
                {
                    for (var i = 0; i < value.Count; i++)
                    {
                        var disp = value[i];
                        <MudText Typo="Typo.body2">
                            @(Math.Round(disp.Horizontal, 2) + unitM)
                        </MudText>
                        if (i < value.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleVerticalDispersion}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleVerticalDispersion)" SortBy="@(x => element.dispersionCache.TryGetValue(x.Id, out var value) ? value.Select(y => (decimal)y.Vertical).ToNoSortList() : new())" T="GridDataWrapper" Title="@columnTitleVerticalDispersion" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Range is not null && context.Item.Secondary.Range.Value < (decimal)element.firingRange)
                {
                    @UtilityFragments.OutOfRangeFragment((element.localizer, element.firingRange, context.Item.Secondary.Range.Value))
                }
                else if (element.dispersionCache.TryGetValue(context.Item.Id, out List<DispersionContainer>? value))
                {
                    for (var i = 0; i < value.Count; i++)
                    {
                        var disp = value[i];
                        <MudText Typo="Typo.body2">
                            @(Math.Round(disp.Vertical, 2) + unitM)
                        </MudText>
                        if (i < value.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSigma}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSigma)" SortBy="@(x => x.Secondary.Sigma ?? 0)" T="GridDataWrapper" Title="@columnTitleSigma" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Secondary.Sigma is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Secondary.Sigma
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>
    };
}
