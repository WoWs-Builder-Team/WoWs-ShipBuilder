@using System.Globalization
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Features.ShipComparison.GridData
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer, double firingRange, Dictionary<Guid, DispersionValue> dispersionCache)> MainBatteryDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.MainBattery.AsString();

        var nfi = (NumberFormatInfo)CultureInfo.InvariantCulture.NumberFormat.Clone();
        nfi.NumberGroupSeparator = "'";

        var unitMm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_MM))}";
        var unitKm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_KM))}";
        var unitM = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_M))}";
        var unitS = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_S))}";
        var unitDegreePerSecond = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_DegreePerSecond))}";
        var unitShotsPerMinute = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_ShotsPerMinute))}";
        var unitFpm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_FPM))}";

        var columnTitleCaliber = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Caliber));
        var columnTitleBarrels = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Barrels));
        var columnTitleMaxRange = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_MaxRange));
        var columnTitleHorizontalDispersion = $"{element.localizer.SimpleAppLocalization(nameof(Translation.DispersionGraphWindow_Horizontal))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dispersion))}";
        var columnTitleVerticalDispersion = $"{element.localizer.SimpleAppLocalization(nameof(Translation.DispersionGraphWindow_Vertical))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dispersion))}";
        var columnTitleTurnTime = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TurnTime));
        var columnTitleTraverseSpeed = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TraverseSpeed));
        var columnTitleReload = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReloadTime));
        var columnTitleRof = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_RoF));
        var columnTitleHeDpm = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ArmamentType_HE))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dpm))}";
        var columnTitleApDpm = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ArmamentType_AP))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dpm))}";
        var columnTitleSapDpm = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ArmamentType_SAP))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Dpm))}";
        var columnTitleHeSalvo = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ArmamentType_HE))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Salvo))}";
        var columnTitleApSalvo = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ArmamentType_AP))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Salvo))}";
        var columnTitleSapSalvo = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ArmamentType_SAP))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Salvo))}";
        var columnTitleFpm = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Fpm));
        var columnTitleSigma = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Sigma));

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCaliber}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCaliber)" SortBy="@(x => x.MainBattery?.GunCaliber ?? 0)" T="GridDataWrapper" Title="@columnTitleCaliber" HeaderClass="column-text-center" CellClass="column-text-center">
           <CellTemplate>
               @if (context.Item.MainBattery?.GunCaliber is not null)
               {
                   <MudText Typo="Typo.body2">
                       @(context.Item.MainBattery.GunCaliber + unitMm)
                   </MudText>
               }
               else
               {
                   @UtilityFragments.DataNotAvailableFragment
               }
           </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBarrels}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBarrels)" SortBy="@(x => x.MainBattery?.BarrelsCount ?? 0)" T="GridDataWrapper" Title="@columnTitleBarrels" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.BarrelsCount is not null && context.Item.MainBattery?.BarrelsLayout is not null)
                {
                    <MudText Typo="Typo.body2">
                        @($"{context.Item.MainBattery.BarrelsCount} ({context.Item.MainBattery.BarrelsLayout})")
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMaxRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMaxRange)" SortBy="@(x => x.MainBattery?.Range ?? 0)" T="GridDataWrapper" Title="@columnTitleMaxRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.Range is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.MainBattery.Range + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleTurnTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleTurnTime)" SortBy="@(x => x.MainBattery?.TurnTime ?? 0)" T="GridDataWrapper" Title="@columnTitleTurnTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.TurnTime is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.MainBattery.TurnTime + unitS)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleTraverseSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleTraverseSpeed)" SortBy="@(x => x.MainBattery?.TraverseSpeed ?? 0)" T="GridDataWrapper" Title="@columnTitleTraverseSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.TraverseSpeed is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.MainBattery.TraverseSpeed + unitDegreePerSecond)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReload}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReload)" SortBy="@(x => x.MainBattery?.Reload ?? 0)" T="GridDataWrapper" Title="@columnTitleReload" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.Reload is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.MainBattery.Reload + unitS)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleRof}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleRof)" SortBy="@(x => x.MainBattery?.RoF ?? 0)" T="GridDataWrapper" Title="@columnTitleRof" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.RoF is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.MainBattery.RoF + unitShotsPerMinute)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>


        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleHeDpm}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleHeDpm)" T="GridDataWrapper" Title="@columnTitleHeDpm" SortBy="@(x => int.Parse(x.MainBattery?.TheoreticalHeDpm ?? "0", NumberStyles.AllowThousands, nfi))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.MainBattery?.TheoreticalHeDpm))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.MainBattery.TheoreticalHeDpm
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleApDpm}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleApDpm)" T="GridDataWrapper" Title="@columnTitleApDpm" SortBy="@(x => int.Parse(x.MainBattery?.TheoreticalApDpm ?? "0", NumberStyles.AllowThousands, nfi))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.MainBattery?.TheoreticalApDpm))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.MainBattery.TheoreticalApDpm
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSapDpm}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSapDpm)" T="GridDataWrapper" Title="@columnTitleSapDpm" SortBy="@(x => int.Parse(x.MainBattery?.TheoreticalSapDpm ?? "0", NumberStyles.AllowThousands, nfi))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.MainBattery?.TheoreticalSapDpm))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.MainBattery.TheoreticalSapDpm
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleHeSalvo}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleHeSalvo)" T="GridDataWrapper" Title="@columnTitleHeSalvo" SortBy="@(x => int.Parse(x.MainBattery?.HeSalvo ?? "0", NumberStyles.AllowThousands, nfi))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.MainBattery?.HeSalvo))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.MainBattery.HeSalvo
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleApSalvo}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleApSalvo)" T="GridDataWrapper" Title="@columnTitleApSalvo" SortBy="@(x => int.Parse(x.MainBattery?.ApSalvo ?? "0", NumberStyles.AllowThousands, nfi))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.MainBattery?.ApSalvo))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.MainBattery.ApSalvo
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSapSalvo}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSapSalvo)" T="GridDataWrapper" Title="@columnTitleSapSalvo" SortBy="@(x => int.Parse(x.MainBattery?.SapSalvo ?? "0", NumberStyles.AllowThousands, nfi))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.MainBattery?.SapSalvo))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.MainBattery.SapSalvo
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFpm}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFpm)" SortBy="@(x => x.MainBattery?.PotentialFpm ?? 0)" T="GridDataWrapper" Title="@columnTitleFpm" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.PotentialFpm is not null && context.Item.MainBattery.PotentialFpm != 0)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.MainBattery.PotentialFpm + unitFpm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleHorizontalDispersion}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleHorizontalDispersion)" SortBy="@(x => element.dispersionCache.TryGetValue(x.Id, out var value) ? value.Horizontal : 0)" T="GridDataWrapper" Title="@columnTitleHorizontalDispersion" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery is not null && context.Item.MainBattery.Range < (decimal)element.firingRange)
                {
                    @UtilityFragments.OutOfRangeFragment((element.localizer, element.firingRange, context.Item.MainBattery.Range))
                }
                else if (element.dispersionCache.TryGetValue(context.Item.Id, out var value))
                {
                    <MudText Typo="Typo.body2">
                        @(Math.Round(value.Horizontal, 2) + unitM)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleVerticalDispersion}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleVerticalDispersion)" SortBy="@(x => element.dispersionCache.TryGetValue(x.Id, out var value) ? value.Vertical : 0)" T="GridDataWrapper" Title="@columnTitleVerticalDispersion" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery is not null && context.Item.MainBattery.Range < (decimal)element.firingRange)
                {
                    @UtilityFragments.OutOfRangeFragment((element.localizer, element.firingRange, context.Item.MainBattery.Range))
                }
                else if (element.dispersionCache.TryGetValue(context.Item.Id, out var value) && context.Item.MainBattery is not null && context.Item.MainBattery.Range > (decimal)element.firingRange)
                {
                    <MudText Typo="Typo.body2">
                        @(Math.Round(value.Vertical, 2) + unitM)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSigma}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSigma)" SortBy="@(x => x.MainBattery?.Sigma ?? 0)" T="GridDataWrapper" Title="@columnTitleSigma" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.MainBattery?.Sigma is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.MainBattery.Sigma
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>
    };
}
