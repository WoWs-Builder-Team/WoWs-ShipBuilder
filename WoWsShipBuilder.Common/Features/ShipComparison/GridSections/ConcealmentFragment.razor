@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Features.ShipComparison.GridData
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> ConcealmentDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.Concealment.AsString();

        var unitKm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_KM))}";

        var columnTitleFromShipBase = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ConcealmentFromShips))}: {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ConcealmentBySea))}";
        var columnTitleFromShipOnFire = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ConcealmentFromShips))}: {element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_OnFire))}";
        var columnTitleFromShipSmokeFiring = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ConcealmentFromShips))}: {element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_SmokeFiring))}";
        var columnTitleFromPlanesBase = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ConcealmentFromPlanes))}: {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ConcealmentBySea))}";
        var columnTitleFromPlanesOnFire = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ConcealmentFromPlanes))}: {element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_OnFire))}";
        var columnTitleFromSubs = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FromSubsAtPeriscopeDepth));

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFromShipBase}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFromShipBase)" T="GridDataWrapper" SortBy="@(x => x.Concealment.ConcealmentBySea)" Title="@columnTitleFromShipBase" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Concealment.ConcealmentBySea != 0)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.Concealment.ConcealmentBySea + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFromShipOnFire}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFromShipOnFire)" T="GridDataWrapper" SortBy="@(x => x.Concealment.ConcealmentBySeaFire)" Title="@columnTitleFromShipOnFire" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Concealment.ConcealmentBySeaFire != 0)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.Concealment.ConcealmentBySeaFire + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFromShipSmokeFiring}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFromShipSmokeFiring)" SortBy="@(x => x.Concealment.ConcealmentBySeaFiringSmoke)" T="GridDataWrapper" Title="@columnTitleFromShipSmokeFiring" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Concealment.ConcealmentBySeaFiringSmoke != 0)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.Concealment.ConcealmentBySeaFiringSmoke + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFromPlanesBase}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFromPlanesBase)" T="GridDataWrapper" SortBy="@(x => x.Concealment.ConcealmentByAir)" Title="@columnTitleFromPlanesBase" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Concealment.ConcealmentByAir != 0)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.Concealment.ConcealmentByAir + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFromPlanesOnFire}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFromPlanesOnFire)" T="GridDataWrapper" SortBy="@(x => x.Concealment.ConcealmentByAirFire)" Title="@columnTitleFromPlanesOnFire" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Concealment.ConcealmentByAirFire != 0)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.Concealment.ConcealmentByAirFire + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFromSubs}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFromSubs)" T="GridDataWrapper" SortBy="@(x => x.Concealment.FromSubsAtPeriscopeDepth)" Title="@columnTitleFromSubs" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Concealment.FromSubsAtPeriscopeDepth != 0)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.Concealment.FromSubsAtPeriscopeDepth + unitKm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>
    };
}
