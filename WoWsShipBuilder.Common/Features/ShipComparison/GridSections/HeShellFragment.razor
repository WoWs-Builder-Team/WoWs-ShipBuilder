@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Features.ShipComparison.GridData
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> HeShellDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.He.AsString();

        var unitKg = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_KG))}";
        var unitMps = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_MPS))}";
        var unitMm = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_MM))}";
        var unitM = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_M))}";
        var unitPerCent = $" {element.localizer.SimpleAppLocalization(nameof(Translation.Unit_PerCent))}";

        var columnTitleCaliber = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Caliber));
        var columnTitleMass = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Mass));
        var columnTitleDamage = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage));
        var columnTitleSplashRadius = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_SplashRadius));
        var columnTitleSplashDamage = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Splash))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage))}";
        var columnTitleInitialSpeed = element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_InitialSpeed));
        var columnTitleAirDrag = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AirDrag));
        var columnTitlePenetration = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration));
        var columnTitleFireChance = element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FireChance));
        var columnTitleSalvoFireChance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Salvo))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FireChance))}";
        var columnTitleBlastRadius = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ExplosionRadius))}";
        var columnTitleBlastPenetration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration))}";

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCaliber}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCaliber)" SortBy="@(x => x.MainBattery?.GunCaliber ?? 0)" T="GridDataWrapper" Title="@columnTitleCaliber" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.Damage is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.MainBattery?.GunCaliber + unitMm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMass}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMass)" SortBy="@(x => x.HeShell?.Mass ?? 0)" T="GridDataWrapper" Title="@columnTitleMass" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.Mass is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.HeShell.Mass + unitKg)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamage)" SortBy="@(x => x.HeShell?.Damage ?? 0)" T="GridDataWrapper" Title="@columnTitleDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.Damage is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.HeShell.Damage
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSplashRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSplashRadius)" SortBy="@(x => x.HeShell?.SplashRadius ?? 0)" T="GridDataWrapper" Title="@columnTitleSplashRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.SplashRadius is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.HeShell.SplashRadius + unitM)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSplashDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSplashDamage)" SortBy="@(x => x.HeShell?.SplashDmg ?? 0)" T="GridDataWrapper" Title="@columnTitleSplashDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.SplashDmg is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.HeShell.SplashDmg
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePenetration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePenetration)" SortBy="@(x => x.HeShell?.Penetration ?? 0)" T="GridDataWrapper" Title="@columnTitlePenetration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.Penetration is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.HeShell.Penetration + unitMm)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleInitialSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleInitialSpeed)" SortBy="@(x => x.HeShell?.ShellVelocity ?? 0)" T="GridDataWrapper" Title="@columnTitleInitialSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.ShellVelocity is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.HeShell?.ShellVelocity + unitMps)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAirDrag}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAirDrag)" SortBy="@(x => x.HeShell?.AirDrag ?? 0)" T="GridDataWrapper" Title="@columnTitleAirDrag" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.AirDrag is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.HeShell.AirDrag
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFireChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFireChance)" SortBy="@(x => x.HeShell?.ShellFireChance ?? 0)" T="GridDataWrapper" Title="@columnTitleFireChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.ShellFireChance is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.HeShell.ShellFireChance + unitPerCent)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSalvoFireChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSalvoFireChance)" SortBy="@(x => x.HeShell?.FireChancePerSalvo ?? 0)" T="GridDataWrapper" Title="@columnTitleSalvoFireChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.FireChancePerSalvo is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.HeShell?.FireChancePerSalvo + unitPerCent)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastRadius)" SortBy="@(x => x.HeShell?.ExplosionRadius ?? 0)" T="GridDataWrapper" Title="@columnTitleBlastRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.ExplosionRadius is not null)
                {
                    <MudText Typo="Typo.body2">
                        @(context.Item.HeShell.ExplosionRadius + unitM)
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastPenetration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastPenetration)" SortBy="@(x => x.HeShell?.SplashCoeff ?? 0)" T="GridDataWrapper" Title="@columnTitleBlastPenetration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.HeShell?.SplashCoeff is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.HeShell.SplashCoeff
                    </MudText>
                }
                else
                {
                    @UtilityFragments.DataNotAvailableFragment
                }
            </CellTemplate>
        </TemplateColumn>
    };
}
