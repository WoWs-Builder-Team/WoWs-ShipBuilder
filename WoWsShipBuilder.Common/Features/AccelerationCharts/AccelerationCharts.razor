@page "/acceleration-charts"

@using WoWsShipBuilder.DataContainers
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.DataStructures.Ship
@using WoWsShipBuilder.Features.BallisticCharts
@using WoWsShipBuilder.Features.BallisticCharts.Data
@using WoWsShipBuilder.Features.Builds
@using WoWsShipBuilder.Features.Builds.Components
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.GameData
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Metrics
@using WoWsShipBuilder.Infrastructure.Utility

@inject ILocalizer Localizer
@inject IDialogService DialogService
@inject ChartJsInterop ChartJsInterop
@inject MetricsService MetricsService
@inject IBrowserViewportService BreakpointService
@inject NavigationManager NavManager
@inject SessionStateCache SessionStateCache

<PageTitle>WoWs ShipBuilder: Acceleration Charts</PageTitle>

<MudExpansionPanel Class="my-4 mx-4 header-border border border-solid" Style="border-bottom: initial;">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Outlined.Info" class="mr-3"/>
            <MudText>@Localizer.GetAppLocalization(nameof(Translation.AccelerationChart_Explanation)).Localization</MudText>
        </div>
    </TitleContent>
    <ChildContent>
        <MudText Style="white-space: break-spaces">@Localizer.GetAppLocalization(nameof(Translation.AccelerationChart_ExplanationText)).Localization</MudText>
    </ChildContent>
</MudExpansionPanel>
<MudStack Row Class="mt-2 mx-4">
    <MudButton OnClick="AddAndRemoveShips" Variant="Variant.Filled" Color="Color.Primary">
        @Localizer.GetAppLocalization(nameof(Translation.AccelerationChart_AddRemoveShip)).Localization
    </MudButton>
    <MudButton Disabled="@(shipBuildCache.Count == 0)" OnClick="ConfigureBuilds" Variant="Variant.Filled" Color="Color.Primary">
        @Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_EditBuilds)).Localization
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddCustomShip">
        @Localizer.GetAppLocalization(nameof(Translation.AccelerationChart_CustomDataTitle)).Localization
    </MudButton>
    <MudDivider Vertical FlexItem Light/>
    <MudSelect Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" T="int" Value="@firstGear" Label="Initial Gear" ValueChanged="@(value => UpdateThrottle(0, value))">
        <MudSelectItem Value="AccelerationCalculator.FullReverse"> <MudText Color="Color.Default">-1</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.Zero"><MudText Color="Color.Default">0</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.OneQuarter"><MudText Color="Color.Default">1/4</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.Half"><MudText Color="Color.Default">2/4</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.ThreeQuarter"><MudText Color="Color.Default">3/4</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.FullAhead"><MudText Color="Color.Default">4/4</MudText></MudSelectItem>
    </MudSelect>
    <MudSelect Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" T="int" Value="@secondGear" Label="Middle Gear" ValueChanged="@(value => UpdateThrottle(1, value))">
       <MudSelectItem Value="AccelerationCalculator.FullReverse"> <MudText Color="Color.Default">-1</MudText></MudSelectItem>
       <MudSelectItem Value="AccelerationCalculator.Zero"><MudText Color="Color.Default">0</MudText></MudSelectItem>
       <MudSelectItem Value="AccelerationCalculator.OneQuarter"><MudText Color="Color.Default">1/4</MudText></MudSelectItem>
       <MudSelectItem Value="AccelerationCalculator.Half"><MudText Color="Color.Default">2/4</MudText></MudSelectItem>
       <MudSelectItem Value="AccelerationCalculator.ThreeQuarter"><MudText Color="Color.Default">3/4</MudText></MudSelectItem>
       <MudSelectItem Value="AccelerationCalculator.FullAhead"><MudText Color="Color.Default">4/4</MudText></MudSelectItem>
    </MudSelect>
    <MudSelect Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" T="int" Value="@thirdGear" Label="Final Gear" ValueChanged="@(value => UpdateThrottle(2, value))">
        <MudSelectItem Value="AccelerationCalculator.FullReverse"> <MudText Color="Color.Default">-1</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.Zero"><MudText Color="Color.Default">0</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.OneQuarter"><MudText Color="Color.Default">1/4</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.Half"><MudText Color="Color.Default">2/4</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.ThreeQuarter"><MudText Color="Color.Default">3/4</MudText></MudSelectItem>
        <MudSelectItem Value="AccelerationCalculator.FullAhead"><MudText Color="Color.Default">4/4</MudText></MudSelectItem>
    </MudSelect>
</MudStack>

<div>
    <canvas id="@AccelerationId"></canvas>
</div>

<BuildConfigurationDialogHelper @ref="buildConfigurationHelper" MaxWidth="MaxWidth.Large" FullWidth NoHeader />

@code
{
    private const string AccelerationId = "acceleration";

    private BuildConfigurationDialogHelper buildConfigurationHelper = default!;

    private Breakpoint Breakpoint {get; set; }

    private readonly Dictionary<int, ShipBuildContainer> shipBuildCache = new();

    private readonly List<int> throttleList = new() { AccelerationCalculator.Zero, AccelerationCalculator.FullAhead, AccelerationCalculator.FullReverse };

    private int firstGear = AccelerationCalculator.Zero;

    private int secondGear = AccelerationCalculator.FullAhead;

    private int thirdGear = AccelerationCalculator.FullReverse;

    private int counter;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            MetricsService.PageAccessCount.WithLabels("acceleration_charts").Inc();
            Breakpoint = await BreakpointService.GetCurrentBreakpointAsync();
            await SetupChartAsync();

            NavManager.TryGetQueryString("shipIndexes", out string shipIndexesFromUrl);

            var buildContainers = SessionStateCache.GetAndResetBuildTransferContainers() ?? (!string.IsNullOrWhiteSpace(shipIndexesFromUrl) ? shipIndexesFromUrl.Split(',').Select(x => ShipBuildContainer.CreateNew(AppData.ShipDictionary[x], null, null)) : null);

            if (buildContainers is not null)
            {
                foreach (var container in buildContainers)
                {
                    shipBuildCache.Add(counter, container);
                    counter++;
                }
            }

            await AddShipsBatchAsync(shipBuildCache);
            StateHasChanged();
        }
    }

    private async Task AddShipsBatchAsync(Dictionary<int, ShipBuildContainer> shipList)
    {
        List<string> chartIds = new()
        {
            AccelerationId,
        };

        List<NewChartDataInput> newData = new();

        foreach (var (chartShipCounter, shipWrapper) in shipList)
        {
            var label = Localizer.GetGameLocalization(shipWrapper.Ship.Index + "_FULL").Localization + " - " +  Localizer.GetAppLocalization(Translation.ChartsWeb_Build).Localization + ": " + (string.IsNullOrEmpty(shipWrapper.Build?.BuildName) ? Build.DefaultBuildName : shipWrapper.Build.BuildName);

            Hull hull;
            Engine engine;
            if (shipWrapper.Build is not null)
            {
                var modules = new List<ShipUpgrade>();
                foreach (List<ShipUpgrade> upgradeList in ShipModuleHelper.GroupAndSortUpgrades(shipWrapper.Ship.ShipUpgradeInfo.ShipUpgrades).OrderBy(entry => entry.Key).Select(entry => entry.Value).ToList())
                {
                    modules.AddRange(upgradeList.Where(upgrade => shipWrapper.Build.Modules.Contains(upgrade.Name.NameToIndex())));
                }

                hull = shipWrapper.Ship.Hulls[modules.First(x => x.UcType == ComponentType.Hull).Components.First(x => x.Key == ComponentType.Hull).Value.First()];
                engine = shipWrapper.Ship.Engines[modules.First(x => x.UcType == ComponentType.Engine).Components.First(x => x.Key == ComponentType.Engine).Value.First()];
            }
            else
            {
                engine = shipWrapper.Ship.Engines.First().Value;
                hull = shipWrapper.Ship.Hulls.First().Value;
            }

            List<IEnumerable<ChartsHelper.Point>> shipData = new()
            {
                GetAccelerationData(shipWrapper.Ship, hull, engine, shipWrapper.Modifiers ?? new(), throttleList),
            };
            var newChartData = new NewChartDataInput(shipWrapper.Id.ToString(), label, shipData, chartShipCounter);
            newData.Add(newChartData);
        }

        await ChartJsInterop.BatchAddDataAsync(chartIds, newData);
    }

    private async Task UpdateShipsBatchAsync(Dictionary<int, ShipBuildContainer> shipList)
    {
        List<UpdateChartDataLabelInput> updatedData = new();

        foreach (var (_, shipWrapper) in shipList)
        {
            var label = Localizer.GetGameLocalization(shipWrapper.Ship.Index + "_FULL").Localization + " - " +  Localizer.GetAppLocalization(Translation.ChartsWeb_Build).Localization + ": " + (string.IsNullOrEmpty(shipWrapper.Build?.BuildName) ? Build.DefaultBuildName : shipWrapper.Build.BuildName);

            Hull hull;
            Engine engine;
            if (shipWrapper.Build is not null)
            {
                var modules = new List<ShipUpgrade>();
                foreach (List<ShipUpgrade> upgradeList in ShipModuleHelper.GroupAndSortUpgrades(shipWrapper.Ship.ShipUpgradeInfo.ShipUpgrades).OrderBy(entry => entry.Key).Select(entry => entry.Value).ToList())
                {
                    modules.AddRange(upgradeList.Where(upgrade => shipWrapper.Build.Modules.Contains(upgrade.Name.NameToIndex())));
                }

                hull = shipWrapper.Ship.Hulls[modules.First(x => x.UcType == ComponentType.Hull).Components.First(x => x.Key == ComponentType.Hull).Value.First()];
                engine = shipWrapper.Ship.Engines[modules.First(x => x.UcType == ComponentType.Engine).Components.First(x => x.Key == ComponentType.Engine).Value.First()];
            }
            else
            {
                engine = shipWrapper.Ship.Engines.First().Value;
                hull = shipWrapper.Ship.Hulls.First().Value;
            }

            var updateChartData = new UpdateChartDataLabelInput(shipWrapper.Id.ToString(), shipWrapper.Id.ToString(), label, GetAccelerationData(shipWrapper.Ship, hull, engine, shipWrapper.Modifiers ?? new(), throttleList));
            updatedData.Add(updateChartData);
        }

        await ChartJsInterop.BatchUpdateDataNewLabelsAsync(AccelerationId, updatedData);
    }

    private async Task SetupChartAsync()
    {
        string knots = Localizer.GetAppLocalization(nameof(Translation.Unit_Knots)).Localization;
        string s = Localizer.GetAppLocalization(nameof(Translation.Unit_S)).Localization;

        double aspectRatio = 3;
        if (Breakpoint is Breakpoint.Sm or Breakpoint.Xs)
        {
            aspectRatio = 1.2;
        }

        await ChartJsInterop.SetupGlobalChartConfigAsync(aspectRatio);
        await ChartJsInterop.CreateChartAsync(AccelerationId, Localizer.GetAppLocalization(nameof(Translation.AccelerationChart_Acceleration)).Localization, Localizer.GetAppLocalization(nameof(Translation.AccelerationChart_Time)).Localization, Localizer.GetAppLocalization(nameof(Translation.ShipStats_Speed)).Localization, s, knots);
    }

    private static IEnumerable<ChartsHelper.Point> GetAccelerationData(Ship ship, Hull hull, Engine engine, IReadOnlyCollection<(string modifierName, float ModifierValue)> modifiers, List<int> throttles)
    {
        var speedMultiplier = modifiers.FindModifiers("speedCoef", true).Aggregate(1d, (current, modifier) => current * modifier);
        speedMultiplier = modifiers.FindModifiers("shipSpeedCoeff", true).Aggregate(speedMultiplier, (current, modifier) => current * modifier);
        speedMultiplier = modifiers.FindModifiers("boostCoeff").Aggregate(speedMultiplier, (current, modifier) => current + modifier);

        if (ship.ShipClass == ShipClass.Submarine)
        {
            speedMultiplier = modifiers.FindModifiers("speedCoefBattery", true).Aggregate(speedMultiplier, (current, modifier) => current * modifier);
        }

        var engineForwardUpTimeModifiers = modifiers.Where(x => x.modifierName.Equals("engineForwardUpTime")).Aggregate(1d, (current, modifier) => current * modifier.ModifierValue);
        var engineBackwardUpTimeModifiers = modifiers.Where(x => x.modifierName.Equals("engineBackwardUpTime")).Aggregate(1d, (current, modifier) => current * modifier.ModifierValue);
        var engineForwardForsageMaxSpeedModifier = modifiers.Where(x => x.modifierName.Equals("engineForwardForsageMaxSpeed")).Aggregate(1d, (current, modifier) => current * modifier.ModifierValue);
        var engineBackwardForsageMaxSpeedModifier = modifiers.Where(x => x.modifierName.Equals("engineBackwardForsageMaxSpeed")).Aggregate(1d, (current, modifier) => current * modifier.ModifierValue);
        var engineForwardForsagePowerModifier = modifiers.Where(x => x.modifierName.Equals("engineForwardForsagePower")).Aggregate(1d, (current, modifier) => current * modifier.ModifierValue);
        var engineBackwardForsagePowerModifier = modifiers.Where(x => x.modifierName.Equals("engineBackwardForsagePower")).Aggregate(1d, (current, modifier) => current * modifier.ModifierValue);
        var accelerationModifiers = new AccelerationCalculator.AccelerationModifiers(speedMultiplier, engineForwardUpTimeModifiers, engineBackwardUpTimeModifiers, engineForwardForsageMaxSpeedModifier, engineBackwardForsageMaxSpeedModifier, engineForwardForsagePowerModifier, engineBackwardForsagePowerModifier);

        //speed boost overrides
        var speedBoostEngineForwardForsageMaxSpeedOverride = modifiers.FindModifiers("speedBoost_forwardEngineForsagMaxSpeed", true).FirstOrDefault(0);
        var speedBoostEngineBackwardEngineForsagOverride = modifiers.FindModifiers("speedBoost_backwardEngineForsagMaxSpeed", true).FirstOrDefault(0);
        var speedBoostForwardEngineForsagOverride = modifiers.FindModifiers("speedBoost_forwardEngineForsag", true).FirstOrDefault(0);
        var speedBoostBackwardEngineForsag = modifiers.FindModifiers("speedBoost_backwardEngineForsag", true).FirstOrDefault(0);
        var speedBoostAccelerationModifiers = new AccelerationCalculator.SpeedBoostAccelerationModifiers(speedBoostEngineForwardForsageMaxSpeedOverride, speedBoostEngineBackwardEngineForsagOverride, speedBoostForwardEngineForsagOverride, speedBoostBackwardEngineForsag);

        var accelerationPointsList = AccelerationCalculator.CalculateAcceleration(ship.Index, hull, engine, ship.ShipClass, throttles, accelerationModifiers , speedBoostAccelerationModifiers).AccelerationPointsList;
        return accelerationPointsList.Select(x => new ChartsHelper.Point(x.Time, x.Speed)).ToList();
    }

    private async Task AddAndRemoveShips()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            CloseOnEscapeKey = true,
            DisableBackdropClick = false,
        };

        var parameters = new DialogParameters
        {
            { nameof(ShipBuildContainerSelectionDialog.ShipList), shipBuildCache.Select(x => x.Value).ToList() },
        };

        var result = await (await DialogService.ShowAsync<ShipBuildContainerSelectionDialog>("Add and remove ships", parameters, options)).Result;

        if (!result.Canceled && result.Data is ShipBuildContainerSelectionDialogOutput dialogOutput)
        {
            var newShipList = dialogOutput.ShipList;

            //first remove the removed ships
            var shipsToRemove = shipBuildCache.Where(cacheContainer => !newShipList.Exists(newListContainer => cacheContainer.Value.Id.Equals(newListContainer.Id))).ToList();
            var guidsToRemove = new List<string>();
            foreach (var (shipCounter, shipContainer) in shipsToRemove)
            {
                guidsToRemove.Add(shipContainer.Id.ToString());
                shipBuildCache.Remove(shipCounter);
            }

            if (shipBuildCache.Count == 0)
            {
                counter = 0;
            }

            if (dialogOutput.ShouldOpenBuildDialog)
            {
                Dictionary<int, ShipBuildContainer> shipsToAdd = new();
                foreach (var shipBuildContainer in newShipList.Where(shipBuildContainer => !shipBuildCache.Any(x => x.Value.Id.Equals(shipBuildContainer.Id))))
                {
                    shipsToAdd.Add(counter, shipBuildContainer);
                    shipBuildCache.Add(counter, shipBuildContainer);
                    counter++;
                }

                var containerList = shipBuildCache.Select(x => x.Value).ToList();
                MetricsService.BuildConfigurationDialogUsage.WithLabels("acceleration-charts").Inc();
                var buildConfigurationResult = await buildConfigurationHelper.ShowDialogAsync(containerList);

                Dictionary<int, ShipBuildContainer> shipsToUpdate = new();
                if (buildConfigurationResult is not null)
                {
                    var changedShips = GetAllChangedBuildShips(buildConfigurationResult);
                    foreach (var (chartShipCounter, newContainer) in changedShips)
                    {
                        shipBuildCache[chartShipCounter] = newContainer;
                        if (shipsToAdd.ContainsKey(chartShipCounter))
                        {
                            shipsToAdd[chartShipCounter] = newContainer;
                        }
                        else
                        {
                            shipsToUpdate.Add(chartShipCounter, newContainer);
                        }
                    }
                }

                await AddShipsBatchAsync(shipsToAdd);
                await UpdateShipsBatchAsync(shipsToUpdate);
            }
            else
            {
                 //then add the new ones
                Dictionary<int, ShipBuildContainer> shipsToAdd = new();
                foreach (var shipBuildContainer in newShipList.Where(shipBuildContainer => !shipBuildCache.Any(x => x.Value.Id.Equals(shipBuildContainer.Id))))
                {
                    shipsToAdd.Add(counter, shipBuildContainer);
                    shipBuildCache.Add(counter, shipBuildContainer);
                    counter++;
                }

                await AddShipsBatchAsync(shipsToAdd);
            }

            await ChartJsInterop.BatchRemoveDataAsync(new() { AccelerationId }, guidsToRemove);
            UpdateUrl();
        }
    }

    private async Task AddCustomShip()
    {
        var result = await (await DialogService.ShowAsync<CustomAccelerationDataDialog>("Custom data")).Result;

        if (!result.Canceled && result.Data is ShipBuildContainer shipBuildContainer)
        {
            MetricsService.CustomAccelerationDataUsage.Inc();

            // add the new one
            Dictionary<int, ShipBuildContainer> shipsToAdd = new() { { counter, shipBuildContainer } };

            shipBuildCache.Add(counter, shipBuildContainer);
            counter++;

            await AddShipsBatchAsync(shipsToAdd);
        }
    }

    private async Task ConfigureBuilds()
    {
        var containerList = shipBuildCache.Select(x => x.Value).ToList();
        MetricsService.BuildConfigurationDialogUsage.WithLabels("acceleration-charts").Inc();
        var result = await buildConfigurationHelper.ShowDialogAsync(containerList);

        if (result is not null)
        {
            var changedShips = GetAllChangedBuildShips(result);
            foreach (var (chartShipCounter, newContainer) in changedShips)
            {
                shipBuildCache[chartShipCounter] = newContainer;
            }

            await UpdateShipsBatchAsync(changedShips);
        }
    }

    private async Task UpdateThrottle(int index, int value)
    {
        throttleList[index] = value;
        switch (index)
        {
            case 0:
                firstGear = value;
                break;
            case 1:
                secondGear = value;
                break;
            case 2:
                thirdGear = value;
                break;
        }

        await UpdateShipsBatchAsync(shipBuildCache);
    }

    private Dictionary<int, ShipBuildContainer> GetAllChangedBuildShips(IEnumerable<ShipBuildContainer> newList)
    {
        Dictionary<int, ShipBuildContainer> filteredList = new();
        foreach (var newContainer in newList)
        {
            var oldContainer = shipBuildCache.Single(container => container.Value.Id.Equals(newContainer.Id));
            if (!oldContainer.Value.IsEquivalentTo(newContainer))
            {
                filteredList.Add(oldContainer.Key, newContainer);
            }
        }

        return filteredList;
    }

    private void UpdateUrl()
    {
        var shipsString = string.Join(",", shipBuildCache.Values.Select(x => x.Ship.Index));
        NavManager.NavigateTo($"/acceleration-charts?shipIndexes={shipsString}");
    }
}
