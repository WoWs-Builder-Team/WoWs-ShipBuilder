@using WoWsShipBuilder.DataContainers
@using WoWsShipBuilder.Features.Charts.Data
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@implements IAsyncDisposable
@inject IJSRuntime Runtime
@inject ILocalizer Localizer

<div class="d-flex ma-auto">
    <MudStack Row="IsVertical" Justify="Justify.Center" AlignItems="AlignItems.Center">
        @foreach (var (id, dispersionEllipse) in Ships)
        {
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Style="font-size: x-large">
                    @dispersionEllipse.Label
                </MudText>
                @if (dispersionEllipse.IsValid)
                {
                    <div>
                        <canvas id="@id"></canvas>
                    </div>
                }
                else
                {
                    <MudPaper Outlined Elevation="0" Style="border-color: red" Square Class="pa-5">
                        <MudText Color="Color.Error">
                             @Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_NoRange)).Localization
                        </MudText>
                    </MudPaper>
                }
            </MudStack>
        }
    </MudStack>
</div>
<MudDivider Light/>

@code {

    [Parameter, EditorRequired]
    public Dictionary<Guid, DispersionEllipse> Ships { get; set; } = new(); //cant use ImmutableDictionary because it causes the loss of the items oder which is very important in this case
    [Parameter, EditorRequired]
    public double PlotScaling { get; set; }
    [Parameter, EditorRequired]
    public EllipsePlanes EllipsePlane { get; set; }
    [Parameter, EditorRequired]
    public FusoPositions FusoPosition { get; set; }
    [Parameter, EditorRequired]
    public bool IsVertical { get; set; }
    [Parameter, EditorRequired]
    public ChartsTabs Tab { get; set; }

    private IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (Tab == ChartsTabs.DispersionPlot)
        {
            await DrawDispersionPlot();
        }
    }

    private async Task DrawDispersionPlot()
    {
        string vertical = Localizer.GetAppLocalization(nameof(Translation.DispersionPlot_Vertical)).Localization;
        string horizontal = Localizer.GetAppLocalization(nameof(Translation.DispersionPlot_Horizontal)).Localization;
        string max = Localizer.GetAppLocalization(nameof(Translation.ShipStats_Max)).Localization;
        string hits = Localizer.GetAppLocalization(nameof(Translation.DispersionPlot_Hits)).Localization;
        string perCent = Localizer.GetAppLocalization(nameof(Translation.Unit_PerCent)).Localization;
        string m = Localizer.GetAppLocalization(nameof(Translation.Unit_M)).Localization;
        var outerVertical = $"{max} {vertical}";
        var outerHorizontal = $"{max} {horizontal}";
        string innerVertical = $"50{perCent} {hits} {vertical}";
        string innerHorizontal = $"50{perCent} {hits} {horizontal}";

        if (IsVertical)
        {
            (outerVertical, outerHorizontal, innerVertical, innerHorizontal) = (outerHorizontal, outerVertical, innerHorizontal, innerVertical);
        }

        var text = new DispPlotAxisLabels(outerVertical, outerHorizontal, innerVertical, innerHorizontal, m);

        Dictionary<string, DrawingData> data = Ships.Where(x => x.Value.IsValid).ToDictionary(dispersionEllipse => dispersionEllipse.Key.ToString(), dispersionEllipse => SetupData(dispersionEllipse.Value));

        module ??= await Runtime.InvokeAsync<IJSObjectReference>("import", "/Components/DispersionPlot.razor.js");
        await module.InvokeVoidAsync("drawDispersionPlotBatched", data, PlotScaling, GetFusoReference(), text);
    }

    public enum FusoPositions
    {
        DontShow,
        Broadside,
        BowIn,
    }

    private DrawingData SetupData(DispersionEllipse dispersionEllipse)
    {
        var outerEllipse = GetOuterEllipse(dispersionEllipse);
        var innerEllipse = GetInnerEllipse(dispersionEllipse);
        return new(outerEllipse.xRadius, outerEllipse.yRadius, innerEllipse.xRadius, innerEllipse.yRadius, GetHitPoints(dispersionEllipse));
    }

    private (double xRadius, double yRadius) GetOuterEllipse(DispersionEllipse dispersionEllipse)
    {
        double xRadius = EllipsePlane switch
        {
            EllipsePlanes.HorizontalPlane => dispersionEllipse.ProjectedOnWaterVerticalRadius,
            EllipsePlanes.RealPlane => dispersionEllipse.VerticalRadius,
            _ => dispersionEllipse.ProjectedOnPerpendicularToWaterVerticalRadius,
        };

        xRadius *= PlotScaling;
        double yRadius = dispersionEllipse.HorizontalRadius * PlotScaling;

        if (IsVertical)
        {
            (xRadius, yRadius) = (yRadius, xRadius);
        }
        return (xRadius, yRadius);
    }

    private List<ChartsHelper.Point> GetHitPoints(DispersionEllipse dispersionEllipse)
    {
        List<DispersionPlotHelper.Point> hitPoints = EllipsePlane switch
        {
            EllipsePlanes.HorizontalPlane => dispersionEllipse.OnWaterHitPoints,
            EllipsePlanes.RealPlane => dispersionEllipse.RealHitPoints,
            _ => dispersionEllipse.PerpendicularToWaterHitPoints,
        };

        return IsVertical ? hitPoints.Select(point => new ChartsHelper.Point(point.X * PlotScaling, point.Y * PlotScaling)).ToList() : hitPoints.Select(point => new ChartsHelper.Point(point.Y * PlotScaling, point.X * PlotScaling)).ToList();
    }

    private (double xRadius, double yRadius) GetInnerEllipse(DispersionEllipse dispersionEllipse)
    {
        double xRadius = EllipsePlane switch
        {
            EllipsePlanes.HorizontalPlane => dispersionEllipse.ProjectedOnWaterVerticalRadiusHalfHitPoints,
            EllipsePlanes.RealPlane => dispersionEllipse.VerticalRadiusHalfHitPoints,
            _ => dispersionEllipse.ProjectedOnPerpendicularToWaterVerticalRadiusHalfHitPoints,
        };

        xRadius *= PlotScaling;
        double yRadius = dispersionEllipse.HorizontalRadiusHalfHitPoints * PlotScaling;

        if (IsVertical)
        {
            (xRadius, yRadius) = (yRadius, xRadius);
        }
        return (xRadius, yRadius);
    }

    private Size GetFusoReference()
    {
        if (FusoPosition == FusoPositions.DontShow)
        {
            return new(0, 0);
        }

        const double length = 212.7;
        const double width = 32.2;
        const int height = 45;

        double yRadius = width;
        double xRadius = length;

        if (FusoPosition == FusoPositions.Broadside)
        {
            xRadius = width;
            yRadius = length;
        }

        if (EllipsePlane == EllipsePlanes.VerticalPlane)
        {
            xRadius = height;
        }

        xRadius *= PlotScaling;
        yRadius *= PlotScaling;

        if (IsVertical)
        {
            (xRadius, yRadius) = (yRadius, xRadius);
        }
        return new(xRadius, yRadius);
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    private sealed record DrawingData(double XRadiusOuterEllipse, double YRadiusOuterEllipse, double XRadiusInnerEllipse, double YRadiusInnerEllipse, List<ChartsHelper.Point> HitPoints);

    private sealed record Size(double Width, double Length);

    private sealed record DispPlotAxisLabels(string BottomLabel, string LeftLabel, string TopLabel, string RightLabel, string Meters);

}