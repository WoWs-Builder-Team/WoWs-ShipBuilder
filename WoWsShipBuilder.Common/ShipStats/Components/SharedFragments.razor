@using WoWsShipBuilder.DataElements.DataElements
@using WoWsShipBuilder.Common.Infrastructure.Utility

@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(IDataElement dataElement, ILocalizer localizer)> DataElementFragment = group => __builder =>
    {
        switch (group.dataElement)
        {
            case GroupedDataElement element:
                <div>
                    <MudText Typo="Typo.body2" Class="mb-1">@group.localizer.GetAppLocalization(element.Key).Localization</MudText>
                    <div class="ml-3">
                        @foreach (var child in element.Children)
                        {
                            @DataElementFragment?.Invoke((child, group.localizer)) // Invoke necessary due to msbuild warning
                        }
                    </div>
                </div>
                break;
            case KeyValueDataElement element:
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">@group.localizer.GetAppLocalization(element.Key).Localization</MudText>
                    <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">@ConvertValue(element.Value, element.IsValueKey, element.IsValueAppLocalization, group.localizer)</MudText>
                </div>
                break;
            case KeyValueUnitDataElement element:
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">@group.localizer.GetAppLocalization(element.Key).Localization</MudText>
                    <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">@(element.Value + " " + group.localizer.GetAppLocalization(element.Unit).Localization)</MudText>
                </div>
                break;
            case TooltipDataElement element:
                <MudTooltip Inline="false" Placement="Placement.Right" Color="Color.Transparent" RootStyle="width: 100%">
                    <ChildContent>
                        <div class="d-flex justify-space-between">
                            <MudText Class="flex-grow-0 flex-shrink-1" Typo="Typo.body2">
                                    @group.localizer.GetAppLocalization(element.Key).Localization
                                    <MudIcon ViewBox="0 -14 36 36" Icon="@Icons.Material.Outlined.Info" Size="Size.Small" Class="mt-n2"/>
                                </MudText>
                            <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">@(element.Value + " " + group.localizer.GetAppLocalization(element.Unit).Localization)</MudText>
                        </div>
                    </ChildContent>
                    <TooltipContent>
                        <MudPaper Outlined="true" Class="pa-2">
                            <MudText Style="max-width: 500px" Typo="Typo.body2">@group.localizer.GetAppLocalization(element.Tooltip).Localization</MudText>
                        </MudPaper>
                    </TooltipContent>
                </MudTooltip>
                break;
            case ValueDataElement element:
                <MudText Typo="Typo.body2">@ConvertValue(element.Value, element.IsValueKey, element.IsValueAppLocalization, group.localizer)</MudText>
                break;
            case FormattedTextDataElement element:
                <MudText Typo="Typo.body2" Class="mb-2">
                    <MultilineString InputString="@ConvertFormattedText(element, group.localizer)"/>
                </MudText>
                break;
        }
    };

    public static string ConvertFormattedText(FormattedTextDataElement formattedTextDataElement, ILocalizer localizer)
    {
        try
        {
            return FormattedTextHelper.ConvertFormattedText(formattedTextDataElement, localizer);
        }
        catch (Exception)
        {
            return "Error";
        }
    }

    private static string ConvertValue(string value, bool isValueKey, bool isAppLocalizationKey, ILocalizer localizer)
    {
        return !isValueKey ? value : (isAppLocalizationKey ? localizer.GetAppLocalization(value) : localizer.GetGameLocalization(value)).Localization;
    }

}