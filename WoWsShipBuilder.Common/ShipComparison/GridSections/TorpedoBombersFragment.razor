@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> TorpedoBombersDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.TorpedoBombers.AsString();

        var columnTitleType = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type))}";
        var columnTitlePlanesInSquadron = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_PlanesInSquadron))}";
        var columnTitlePlanesPerAttack = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Planes))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_NumberDuringAttack))}";
        var columnTitlePlanesOnDeck = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Planes))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_OnDeck))}";
        var columnTitleRestorationTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_RestorationTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleCruisingSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_CruisingSpeed))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Speed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleMaxSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_MaxSpeed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleMinSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_MinSpeed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleEngineBoost = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_EngineBoostDuration))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleInitialBoostDuration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_InitialBoost))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Duration))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleInitialBoostSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_InitialBoost))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Amount))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitlePlaneHp = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_PlaneHp))}";
        var columnTitleSquadronHp = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_SquadronHp))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_HP))}";
        var columnTitleAttackGroupHp = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AttackGroupHp))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_HP))}";
        var columnTitleDamageTakenWhileAttacking = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_DamageTakenDuringAttack))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleTorpedoesPerPlane = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_TorpsPerPlane))}";
        var columnTitlePreparationTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_PreparationTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleAimingTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AimingTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleFullyAimedTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TimeToFullyAimed))} {element.localizer.SimpleAppLocalization(nameof(Translation.AccelerationChart_Time))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleInvulnerabilityTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Invulnerability))} {element.localizer.SimpleAppLocalization(nameof(Translation.AccelerationChart_Time))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleAttackCooldown = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AttackCd))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleConcealment = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Concealment))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleViewRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_ViewDistance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleAreaChangeWhileAiming = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_AreaChange))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AimingRateMoving))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleAreaChangeDuringPreparation = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_AreaChange))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AimingPreparationRateMoving))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleType}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleType)" T="GridDataWrapper" Title="@columnTitleType" SortBy="@(x=> !x.TorpedoBombers.Type.Any() ? string.Empty : element.localizer.GetAppLocalization($"ShipStats_{x.TorpedoBombers.Type.First()}").Localization)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.Type.Any())
                {
                    List<string> items = context.Item.TorpedoBombers.Type;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization($"ShipStats_{item}").Localization
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlanesInSquadron}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlanesInSquadron)" T="GridDataWrapper" Title="@columnTitlePlanesInSquadron" SortBy="@(x => x.TorpedoBombers.InSquadron)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.InSquadron.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.InSquadron;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlanesPerAttack}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlanesPerAttack)" T="GridDataWrapper" Title="@columnTitlePlanesPerAttack" SortBy="@(x => x.TorpedoBombers.PerAttack)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.PerAttack.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.PerAttack;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlanesOnDeck}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlanesOnDeck)" T="GridDataWrapper" Title="@columnTitlePlanesOnDeck" SortBy="@(x => x.TorpedoBombers.OnDeck)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.OnDeck.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.OnDeck;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleRestorationTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleRestorationTime)" T="GridDataWrapper" Title="@columnTitleRestorationTime" SortBy="@(x => x.TorpedoBombers.RestorationTime)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.RestorationTime.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.RestorationTime;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCruisingSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCruisingSpeed)" T="GridDataWrapper" Title="@columnTitleCruisingSpeed" SortBy="@(x => x.TorpedoBombers.CruisingSpeed)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.CruisingSpeed.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.CruisingSpeed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMaxSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMaxSpeed)" T="GridDataWrapper" Title="@columnTitleMaxSpeed" SortBy="@(x => x.TorpedoBombers.MaxSpeed)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.MaxSpeed.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.MaxSpeed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMinSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMinSpeed)" T="GridDataWrapper" Title="@columnTitleMinSpeed" SortBy="@(x => x.TorpedoBombers.MinSpeed)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.MinSpeed.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.MinSpeed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleEngineBoost}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleEngineBoost)" T="GridDataWrapper" Title="@columnTitleEngineBoost" SortBy="@(x => x.TorpedoBombers.EngineBoostDuration)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.EngineBoostDuration.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.EngineBoostDuration;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleInitialBoostDuration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleInitialBoostDuration)" T="GridDataWrapper" Title="@columnTitleInitialBoostDuration" SortBy="@(x => x.TorpedoBombers.InitialBoostDuration)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.InitialBoostDuration.Any(x => x != 0))
                {
                    List<decimal> items = context.Item.TorpedoBombers.InitialBoostDuration;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleInitialBoostSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleInitialBoostSpeed)" T="GridDataWrapper" Title="@columnTitleInitialBoostSpeed" SortBy="@(x => x.TorpedoBombers.InitialBoostValue)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.InitialBoostValue.Any(x => x != 0))
                {
                    List<decimal> items = context.Item.TorpedoBombers.InitialBoostValue;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlaneHp}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlaneHp)" T="GridDataWrapper" Title="@columnTitlePlaneHp" SortBy="@(x => x.TorpedoBombers.PlaneHp)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.PlaneHp.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.PlaneHp;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSquadronHp}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSquadronHp)" T="GridDataWrapper" Title="@columnTitleSquadronHp" SortBy="@(x => x.TorpedoBombers.SquadronHp)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.SquadronHp.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.SquadronHp;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAttackGroupHp}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAttackGroupHp)" T="GridDataWrapper" Title="@columnTitleAttackGroupHp" SortBy="@(x => x.TorpedoBombers.AttackGroupHp)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.AttackGroupHp.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.AttackGroupHp;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamageTakenWhileAttacking}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamageTakenWhileAttacking)" T="GridDataWrapper" Title="@columnTitleDamageTakenWhileAttacking" SortBy="@(x => x.TorpedoBombers.DamageDuringAttack)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.DamageDuringAttack.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.DamageDuringAttack;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleTorpedoesPerPlane}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleTorpedoesPerPlane)" T="GridDataWrapper" Title="@columnTitleTorpedoesPerPlane" SortBy="@(x => x.TorpedoBombers.WeaponsPerPlane)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponsPerPlane.Any())
                {
                    List<int> items = context.Item.TorpedoBombers.WeaponsPerPlane;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePreparationTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePreparationTime)" T="GridDataWrapper" Title="@columnTitlePreparationTime" SortBy="@(x => x.TorpedoBombers.PreparationTime)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.PreparationTime.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.PreparationTime;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAimingTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAimingTime)" T="GridDataWrapper" Title="@columnTitleAimingTime" SortBy="@(x => x.TorpedoBombers.AimingTime)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.AimingTime.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.AimingTime;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFullyAimedTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFullyAimedTime)" T="GridDataWrapper" Title="@columnTitleFullyAimedTime" SortBy="@(x => x.TorpedoBombers.TimeToFullyAimed)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.TimeToFullyAimed.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.TimeToFullyAimed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleInvulnerabilityTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleInvulnerabilityTime)" T="GridDataWrapper" Title="@columnTitleInvulnerabilityTime" SortBy="@(x => x.TorpedoBombers.PostAttackInvulnerability)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.PostAttackInvulnerability.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.PostAttackInvulnerability;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAttackCooldown}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAttackCooldown)" T="GridDataWrapper" Title="@columnTitleAttackCooldown" SortBy="@(x => x.TorpedoBombers.AttackCooldown)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.AttackCooldown.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.AttackCooldown;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleConcealment}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleConcealment)" T="GridDataWrapper" Title="@columnTitleConcealment" SortBy="@(x => x.TorpedoBombers.Concealment)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.Concealment.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.Concealment;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleViewRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleViewRange)" T="GridDataWrapper" Title="@columnTitleViewRange" SortBy="@(x => x.TorpedoBombers.Spotting)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.Spotting.Any())
                {
                    List<decimal> items = context.Item.TorpedoBombers.Spotting;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAreaChangeWhileAiming}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAreaChangeWhileAiming)" T="GridDataWrapper" Title="@columnTitleAreaChangeWhileAiming" SortBy="@(x => !x.TorpedoBombers.AreaChangeAiming.Any() ? double.MinValue : x.TorpedoBombers.AreaChangeAiming.Select(decimal.Parse).ToList())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.AreaChangeAiming.Any())
                {
                    List<string> items = context.Item.TorpedoBombers.AreaChangeAiming;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAreaChangeDuringPreparation}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAreaChangeDuringPreparation)" T="GridDataWrapper" Title="@columnTitleAreaChangeDuringPreparation" SortBy="@(x => !x.TorpedoBombers.AreaChangePreparation.Any() ? double.MinValue : x.TorpedoBombers.AreaChangePreparation.Select(decimal.Parse).ToList())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.AreaChangePreparation.Any())
                {
                    List<string> items = context.Item.TorpedoBombers.AreaChangePreparation;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
    };
}