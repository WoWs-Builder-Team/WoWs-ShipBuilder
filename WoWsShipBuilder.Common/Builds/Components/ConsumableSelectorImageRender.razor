@using WoWsShipBuilder.Common.Infrastructure.Localization
@using ConsumableDataContainer = WoWsShipBuilder.Common.DataContainers.ConsumableDataContainer
@using WoWsShipBuilder.Common.DataContainers
@using WoWsShipBuilder.Common.ShipStats.Components
@inherits ReactiveComponentBase<WoWsShipBuilder.Common.ShipStats.ViewModels.ConsumableViewModel>
@inject ILocalizer Localizer

@if (ViewModel is not null)
{
    <MudCard Outlined="true" Class="pa-2" Style="flex: content">
        <MudStack Row="true" Justify="Justify.Center">
            @foreach (var consumableSlot in ViewModel.ConsumableSlots)
            {
                if (consumableSlot.ConsumableData.Count > 1)
                {
                    <MudTooltip @key="consumableSlot.Slot" Color="Color.Transparent" Placement="Placement.Right" Delay="350" RootStyle="@GetImageBreakpointStyle()">
                        <ChildContent>
                            <MudImage Width="@GetImageSize()" Height="@GetImageSize()" Src="@GetConsumableIcon(consumableSlot.SelectedConsumable)"/>
                        </ChildContent>
                        <TooltipContent>
                            @TooltipFragment((consumableSlot.SelectedConsumable, Localizer))
                        </TooltipContent>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip @key="consumableSlot.Slot" Color="Color.Transparent" Placement="Placement.Right" RootStyle="@GetImageBreakpointStyle()" Delay="350">
                        <ChildContent>
                            <MudImage Width="@GetImageSize()" Height="@GetImageSize()" Src="@GetConsumableIcon(consumableSlot.SelectedConsumable)"/>
                        </ChildContent>
                        <TooltipContent>
                            @TooltipFragment((consumableSlot.SelectedConsumable, Localizer))
                        </TooltipContent>
                    </MudTooltip>
                }
            }
        </MudStack>
    </MudCard>
}

@code {

    [CascadingParameter]
    private Breakpoint Breakpoint { get; set; }

    // ReSharper disable once InconsistentNaming
    // ReSharper disable once UnusedParameter.Local
    private static readonly RenderFragment<(ConsumableDataContainer consumableData, ILocalizer localizer)> TooltipFragment = pair => __builder =>
    {
        <MudPaper Outlined="true" Style="min-width: 300px; max-width: 300px">
            <MudStack Spacing="0" Class="pa-2">
                <MudText Align="Align.Center" Typo="Typo.h6">
                    @pair.localizer.GetGameLocalization("DOCK_CONSUME_TITLE_" + pair.consumableData.Name).Localization
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.body2" Style="white-space: break-spaces">
                    @pair.localizer.GetGameLocalization("DOCK_CONSUME_DESCRIPTION_" + pair.consumableData.Name).Localization
                </MudText>
                <MudDivider Light="true" Class="ma-1"/>
                @foreach (var data in pair.consumableData.DataElements)
                {
                    @SharedFragments.DataElementFragment((data, pair.localizer))
                }
                <div style="margin-top: 6px"></div>
                @foreach ((string modifierName, float modifierValue) in pair.consumableData.Modifiers)
                {
                    // this is here so we can have the call to the ModifierProcessor only once, to share the value between the if and the mudtext
                    string modifierDesc = ModifierProcessor.GetUiModifierString(modifierName, modifierValue, ReturnFilter.Description, pair.localizer);
                    string modifierValueString = ModifierProcessor.GetUiModifierString(modifierName, modifierValue, ReturnFilter.Value, pair.localizer);
                    if (!string.IsNullOrWhiteSpace(modifierDesc) && !string.IsNullOrWhiteSpace(modifierValueString))
                    {
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.body2" Class="flex-grow-0 flex-shrink-1">
                                @modifierDesc
                            </MudText>
                            <MudText Typo="Typo.body2" Align="Align.End" Class="flex-grow-1 flex-shrink-0 pl-2 align-self-center">
                                @modifierValueString
                            </MudText>
                        </div>
                    }
                }
            </MudStack>
        </MudPaper>
    };

    private string GetConsumableIcon(ConsumableDataContainer consumable)
    {
        string iconName = string.IsNullOrEmpty(consumable.IconName) ? consumable.Name : consumable.IconName;
        return $"/_content/WoWsShipBuilder.Common/assets/consumable_icons/consumable_{iconName}.png";
    }

    private int GetImageSize()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return 50;
            default:
                return 60;
        }
    }

    private string GetImageBreakpointStyle()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "min-width: 50px; width: 50px; height: 50px;";
            default:
                return "min-width: 60px; width: 60px; height: 60px;";
        }
    }

}