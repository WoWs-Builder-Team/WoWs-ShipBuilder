@using WoWsShipBuilder.ViewModels.Helper
@using WoWsShipBuilder.ViewModels.Other
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> BombersDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.Bombers.ShipComparisonDataSectionToString();

        var columnTitleType = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type))}";
        var columnTitlePlanesInSquadron = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_PlanesInSquadron))}";
        var columnTitlePlanesPerAttack = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Planes))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_NumberDuringAttack))}";
        var columnTitlePlanesOnDeck = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Planes))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_OnDeck))}";
        var columnTitleRestorationTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_RestorationTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleCruisingSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_CruisingSpeed))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Speed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleMaxSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_MaxSpeed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleMinSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_MinSpeed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleEngineBoost = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_EngineBoostDuration))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleInitialBoostDuration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_InitialBoost))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Duration))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleInitialBoostSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_InitialBoost))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Amount))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitlePlaneHp = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_PlaneHp))}";
        var columnTitleSquadronHp = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_SquadronHp))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_HP))}";
        var columnTitleAttackGroupHp = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AttackGroupHp))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_HP))}";
        var columnTitleDamageTakenWhileAttacking = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_DamageTakenDuringAttack))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleBombsPerPlane = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_BombsPerPlane))}";
        var columnTitlePreparationTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_PreparationTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleAimingTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AimingTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleFullyAimedTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TimeToFullyAimed))} {element.localizer.SimpleAppLocalization(nameof(Translation.AccelerationChart_Time))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleInvulnerabilityTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Invulnerability))} {element.localizer.SimpleAppLocalization(nameof(Translation.AccelerationChart_Time))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleAttackCooldown = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AttackCd))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleConcealment = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Concealment))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleViewRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_ViewDistance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleAreaChangeWhileAiming = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_AreaChange))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AimingRateMoving))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleAreaChangeDuringPreparation = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_AreaChange))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_AimingPreparationRateMoving))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleBombsInInnerEllipse = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_InnerBombPercentage))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleType}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleType)" T="GridDataWrapper" Title="@columnTitleType" SortBy="@(x=> !x.BombersType.Any() ? string.Empty : element.localizer.GetAppLocalization($"ShipStats_{x.BombersType.First()}").Localization)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersType.Any())
                {
                    List<string> items = context.Item.BombersType;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization($"ShipStats_{item}").Localization
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlanesInSquadron}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlanesInSquadron)" T="GridDataWrapper" Title="@columnTitlePlanesInSquadron" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersInSquadron.Any())
                {
                    List<int> items = context.Item.BombersInSquadron;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlanesPerAttack}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlanesPerAttack)" T="GridDataWrapper" Title="@columnTitlePlanesPerAttack" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersPerAttack.Any())
                {
                    List<int> items = context.Item.BombersPerAttack;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlanesOnDeck}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlanesOnDeck)" T="GridDataWrapper" Title="@columnTitlePlanesOnDeck" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersOnDeck.Any())
                {
                    List<int> items = context.Item.BombersOnDeck;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleRestorationTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleRestorationTime)" T="GridDataWrapper" Title="@columnTitleRestorationTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersRestorationTime.Any())
                {
                    List<decimal> items = context.Item.BombersRestorationTime;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCruisingSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCruisingSpeed)" T="GridDataWrapper" Title="@columnTitleCruisingSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersCruisingSpeed.Any())
                {
                    List<decimal> items = context.Item.BombersCruisingSpeed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMaxSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMaxSpeed)" T="GridDataWrapper" Title="@columnTitleMaxSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersMaxSpeed.Any())
                {
                    List<decimal> items = context.Item.BombersMaxSpeed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMinSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMinSpeed)" T="GridDataWrapper" Title="@columnTitleMinSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersMinSpeed.Any())
                {
                    List<decimal> items = context.Item.BombersMinSpeed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleEngineBoost}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleEngineBoost)" T="GridDataWrapper" Title="@columnTitleEngineBoost" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersEngineBoostDuration.Any())
                {
                    List<decimal> items = context.Item.BombersEngineBoostDuration;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleInitialBoostDuration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleInitialBoostDuration)" T="GridDataWrapper" Title="@columnTitleInitialBoostDuration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersInitialBoostDuration.Any(x => x != 0))
                {
                    List<decimal> items = context.Item.BombersInitialBoostDuration;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleInitialBoostSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleInitialBoostSpeed)" T="GridDataWrapper" Title="@columnTitleInitialBoostSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersInitialBoostValue.Any(x => x != 0))
                {
                    List<decimal> items = context.Item.BombersInitialBoostValue;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlaneHp}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlaneHp)" T="GridDataWrapper" Title="@columnTitlePlaneHp" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersPlaneHp.Any())
                {
                    List<int> items = context.Item.BombersPlaneHp;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSquadronHp}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSquadronHp)" T="GridDataWrapper" Title="@columnTitleSquadronHp" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersSquadronHp.Any())
                {
                    List<int> items = context.Item.BombersSquadronHp;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAttackGroupHp}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAttackGroupHp)" T="GridDataWrapper" Title="@columnTitleAttackGroupHp" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersAttackGroupHp.Any())
                {
                    List<int> items = context.Item.BombersAttackGroupHp;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamageTakenWhileAttacking}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamageTakenWhileAttacking)" T="GridDataWrapper" Title="@columnTitleDamageTakenWhileAttacking" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersDamageDuringAttack.Any())
                {
                    List<int> items = context.Item.BombersDamageDuringAttack;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBombsPerPlane}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBombsPerPlane)" T="GridDataWrapper" Title="@columnTitleBombsPerPlane" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersWeaponsPerPlane.Any())
                {
                    List<int> items = context.Item.BombersWeaponsPerPlane;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePreparationTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePreparationTime)" T="GridDataWrapper" Title="@columnTitlePreparationTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersPreparationTime.Any())
                {
                    List<decimal> items = context.Item.BombersPreparationTime;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAimingTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAimingTime)" T="GridDataWrapper" Title="@columnTitleAimingTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersAimingTime.Any())
                {
                    List<decimal> items = context.Item.BombersAimingTime;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFullyAimedTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFullyAimedTime)" T="GridDataWrapper" Title="@columnTitleFullyAimedTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersTimeToFullyAimed.Any())
                {
                    List<decimal> items = context.Item.BombersTimeToFullyAimed;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleInvulnerabilityTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleInvulnerabilityTime)" T="GridDataWrapper" Title="@columnTitleInvulnerabilityTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersPostAttackInvulnerability.Any())
                {
                    List<decimal> items = context.Item.BombersPostAttackInvulnerability;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAttackCooldown}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAttackCooldown)" T="GridDataWrapper" Title="@columnTitleAttackCooldown" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersAttackCooldown.Any())
                {
                    List<decimal> items = context.Item.BombersAttackCooldown;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleConcealment}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleConcealment)" T="GridDataWrapper" Title="@columnTitleConcealment" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersConcealment.Any())
                {
                    List<decimal> items = context.Item.BombersConcealment;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleViewRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleViewRange)" T="GridDataWrapper" Title="@columnTitleViewRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersSpotting.Any())
                {
                    List<decimal> items = context.Item.BombersSpotting;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAreaChangeWhileAiming}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAreaChangeWhileAiming)" T="GridDataWrapper" Title="@columnTitleAreaChangeWhileAiming" SortBy="@(x => !x.BombersAreaChangeAiming.Any() ? double.MinValue : x.BombersAreaChangeAiming.Select(decimal.Parse).ToList())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersAreaChangeAiming.Any())
                {
                    List<string> items = context.Item.BombersAreaChangeAiming;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAreaChangeDuringPreparation}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAreaChangeDuringPreparation)" T="GridDataWrapper" Title="@columnTitleAreaChangeDuringPreparation" SortBy="@(x => !x.BombersAreaChangePreparation.Any() ? double.MinValue : x.BombersAreaChangePreparation.Select(decimal.Parse).ToList())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersAreaChangePreparation.Any())
                {
                    List<string> items = context.Item.BombersAreaChangePreparation;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBombsInInnerEllipse}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBombsInInnerEllipse)" T="GridDataWrapper" Title="@columnTitleBombsInInnerEllipse" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.BombersInnerEllipse.Any())
                {
                    List<int> items = context.Item.BombersInnerEllipse;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
    };
}