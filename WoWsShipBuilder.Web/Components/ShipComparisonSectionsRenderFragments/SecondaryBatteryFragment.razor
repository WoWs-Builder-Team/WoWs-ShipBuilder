@using WoWsShipBuilder.ViewModels.Helper
@using WoWsShipBuilder.ViewModels.Other
@using System.Globalization
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(ShipComparisonDataSections section, ILocalizer localizer, Dictionary<string, bool> hiddenColumns)> SecondaryBatteryDataFragment = element => __builder =>
    {
        bool hide = element.section != ShipComparisonDataSections.SecondaryBattery;

        NumberFormatInfo nfi = default!;
        if (!hide)
        {
            nfi = (NumberFormatInfo)CultureInfo.InvariantCulture.NumberFormat.Clone();
            nfi.NumberGroupSeparator = "'";
        }

        var columnTitleCaliber = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Caliber))} ({element.localizer.SimpleAppLocalization(Translation.Unit_MM)})";
        var columnTitleBarrels = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Barrels))}";
        var columnTitleMaxRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_MaxRange))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleReload = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReloadTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleRof = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_RoF))} ({element.localizer.SimpleAppLocalization(Translation.Unit_ShotsPerMinute)})";
        var columnTitleDpm = $"{element.localizer.SimpleAppLocalization(Translation.ShipStats_Dpm)}";
        var columnTitleFpm = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Fpm))} ({element.localizer.SimpleAppLocalization(Translation.Unit_FPM)})";
        var columnTitleSigma = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Sigma))}";

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleCaliber}"])" T="GridDataWrapper" Title="@columnTitleCaliber" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatteryCaliber.Any())
                {
                    List<decimal> items = context.Item.SecondaryBatteryCaliber;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleBarrels}"])" T="GridDataWrapper" SortBy="@(x => x.SecondaryBatteryBarrelCount.Sum())" Title="@columnTitleBarrels" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatteryBarrelCount.Any() && context.Item.SecondaryBatteryBarrelsLayout.Any())
                {
                    List<int> items = context.Item.SecondaryBatteryBarrelCount;
                    for (var i = 0; i < items.Count; i++)
                    {
                        int item = items[i];
                        string itemLayout = context.Item.SecondaryBatteryBarrelsLayout[i];
                        <MudText Typo="Typo.body2">
                            @($"{item} ({itemLayout})")
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleMaxRange}"])" T="GridDataWrapper" Title="@columnTitleMaxRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatteryRange is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.SecondaryBatteryRange
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleReload}"])" T="GridDataWrapper" Title="@columnTitleReload" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatteryReload.Any())
                {
                    List<decimal> items = context.Item.SecondaryBatteryReload;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleRof}"])" T="GridDataWrapper" Title="@columnTitleRof" SortBy="@(x => x.SecondaryBatteryRoF.Sum())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatteryRoF.Any())
                {
                    List<decimal> items = context.Item.SecondaryBatteryRoF;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleDpm}"])" T="GridDataWrapper" Title="@columnTitleDpm" SortBy="@(x => x.SecondaryBatteryDpm.Select(y => int.Parse(y, NumberStyles.AllowThousands, nfi)).Sum())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatteryDpm.Any())
                {
                    List<string> items = context.Item.SecondaryBatteryDpm;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleFpm}"])" T="GridDataWrapper" Title="@columnTitleFpm" SortBy="@(x => x.SecondaryBatteryFpm.Sum())" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatteryFpm.Any())
                {
                    List<decimal> items = context.Item.SecondaryBatteryFpm;
                    for (var i = 0; i < items.Count; i++)
                    {
                        decimal item = items[i];
                        <MudText Typo="Typo.body2">
                            @item
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.SecondaryBattery.ShipComparisonDataSectionToString()}_{columnTitleSigma}"])" T="GridDataWrapper" Title="@columnTitleSigma" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.SecondaryBatterySigma is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.SecondaryBatterySigma
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
    };
}