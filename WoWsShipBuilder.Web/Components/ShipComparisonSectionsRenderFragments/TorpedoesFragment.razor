@using WoWsShipBuilder.ViewModels.Helper
@using WoWsShipBuilder.ViewModels.Other
@using System.Globalization
@using WoWsShipBuilder.Core.Utility
@using WoWsShipBuilder.DataStructures
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(ShipComparisonDataSections section, ILocalizer localizer, Dictionary<string, bool> hiddenColumns)> TorpedoDataFragment = element => __builder =>
    {
        bool hide = element.section != ShipComparisonDataSections.Torpedo;

        NumberFormatInfo nfi = default!;
        if (!hide)
        {
            nfi = (NumberFormatInfo)CultureInfo.InvariantCulture.NumberFormat.Clone();
            nfi.NumberGroupSeparator = "'";
        }

        var columnTitleAmount = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Amount))}";
        var columnTitleTurnTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TurnTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleTraverseSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TraverseSpeed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_DegreePerSecond)})";
        var columnTitleReload = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReloadTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleSpread = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Spread))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Degree)})";
        var columnTitleSwitchTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_SwitchTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleType = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type))}";
        var columnTitleDamage = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage))}";
        var columnTitleSalvoDamage = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FullSalvoDamage))}";
        var columnTitleMaxRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_MaxRange))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Speed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleDetectionRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Detectability))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleArmingDistance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ArmingDistance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";
        var columnTitleReactionTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReactionTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleFloodChance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FloodingChance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleBlastRadius = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ExplosionRadius))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";
        var columnTitleBlastPenetration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration))}";
        var columnTitleCanHit = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_CanHitClasses))}";

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleAmount}"])" T="GridDataWrapper" Title="@columnTitleAmount" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoCount is not null && context.Item.TorpedoLayout is not null)
                {
                    <MudText Typo="Typo.body2">
                        @($"{context.Item.TorpedoCount} ({context.Item.TorpedoLayout})")
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleTurnTime}"])" T="GridDataWrapper" Title="@columnTitleTurnTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoTurnTime is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoTurnTime
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleTraverseSpeed}"])" T="GridDataWrapper" Title="@columnTitleTraverseSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoTraverseSpeed is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoTraverseSpeed
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleReload}"])" T="GridDataWrapper" Title="@columnTitleReload" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoReload is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoReload
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleSpread}"])" T="GridDataWrapper" Title="@columnTitleSpread" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> x.ShipDataContainer.TorpedoArmamentDataContainer?.TorpedoLaunchers.First().TorpedoAngles[1] - x.ShipDataContainer.TorpedoArmamentDataContainer?.TorpedoLaunchers.First().TorpedoAngles[0] ?? -1)">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.TorpedoSpread))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoSpread
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleSwitchTime}"])" T="GridDataWrapper" Title="@columnTitleSwitchTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoTimeToSwitch is not null && context.Item.TorpedoType.Count > 1)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoTimeToSwitch
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleType}"])" T="GridDataWrapper" Title="@columnTitleType" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.TorpedoType.Any() ? string.Empty : element.localizer.GetAppLocalization(x.TorpedoType.First()).Localization)">
            <CellTemplate>
                @if (context.Item.TorpedoType.Any())
                {
                    List<string> torps = context.Item.TorpedoType;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        string torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization(torp).Localization
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleDamage}"])" T="GridDataWrapper" Title="@columnTitleDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoDamage.Any())
                {
                    List<decimal> torps = context.Item.TorpedoDamage;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleSalvoDamage}"])" T="GridDataWrapper" Title="@columnTitleSalvoDamage" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x => x.TorpedoFullSalvoDamage.Where(y => !string.IsNullOrEmpty(y)).Select(z => int.Parse(z ?? "0", NumberStyles.AllowThousands, nfi)).ToList())">
            <CellTemplate>
                @{
                   List<string?> torps = context.Item.TorpedoFullSalvoDamage.Where(x => !string.IsNullOrEmpty(x)).ToList();
                   if (torps.Count == 0)
                   {
                       <MudText Typo="Typo.body2" Color="Color.Primary">
                           @ShipComparisonViewModel.DataNotAvailable
                       </MudText>
                   }
                   else
                   {
                       for (var i = 0; i < torps.Count; i++)
                       {
                           string? torp = torps[i];
                           <MudText Typo="Typo.body2">
                               @torp
                           </MudText>
                           if (i < torps.Count - 1)
                           {
                               <MudDivider Class="my-1"/>
                           }
                       }
                   }
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleMaxRange}"])" T="GridDataWrapper" Title="@columnTitleMaxRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoRange.Any())
                {
                    List<decimal> torps = context.Item.TorpedoRange;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleSpeed}"])" T="GridDataWrapper" Field="TorpedoSpeed" Title="@columnTitleSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoSpeed.Any())
                {
                    List<decimal> torps = context.Item.TorpedoSpeed;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleDetectionRange}"])" T="GridDataWrapper" Title="@columnTitleDetectionRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoDetectRange.Any())
                {
                    List<decimal> torps = context.Item.TorpedoDetectRange;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleArmingDistance}"])" T="GridDataWrapper" Title="@columnTitleArmingDistance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoArmingDistance.Any())
                {
                    List<int> torps = context.Item.TorpedoArmingDistance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleReactionTime}"])" T="GridDataWrapper" Title="@columnTitleReactionTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoReactionTime.Any())
                {
                    List<decimal> torps = context.Item.TorpedoReactionTime;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleFloodChance}"])" T="GridDataWrapper" Title="@columnTitleFloodChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoFloodingChance.Any())
                {
                    List<decimal> torps = context.Item.TorpedoFloodingChance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleBlastRadius}"])" T="GridDataWrapper" Title="@columnTitleBlastRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBlastRadius.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBlastRadius;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleBlastPenetration}"])" T="GridDataWrapper" Title="@columnTitleBlastPenetration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBlastPenetration.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBlastPenetration;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Hidden="@(hide && element.hiddenColumns[$"{ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString()}_{columnTitleCanHit}"])" T="GridDataWrapper" Title="@columnTitleCanHit" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.TorpedoCanHit.Any() ? 0 : x.TorpedoCanHit.First()?.Count ?? (x.TorpedoDamage.Any() ? 5 : 0))">
            <CellTemplate>
                @if (context.Item.TorpedoCanHit.Any())
                {
                    List<List<ShipClass>?> torps = context.Item.TorpedoCanHit;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        List<ShipClass>? classes = torps[i];
                        if (classes is null && context.Item.TorpedoDamage.Any())
                        {
                            <MudStack row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in Enum.GetValues(typeof(ShipClass)).Cast<ShipClass>().ToList())
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        else if (classes is null && !context.Item.TorpedoDamage.Any())
                        {
                            <MudText Typo="Typo.body2" Color="Color.Primary">
                                @ShipComparisonViewModel.DataNotAvailable
                            </MudText>
                        }
                        else if (classes is not null)
                        {
                            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in classes)
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
    };
}