@using WoWsShipBuilder.ViewModels.Helper
@using WoWsShipBuilder.ViewModels.Other
@using System.Globalization
@using WoWsShipBuilder.Core.Utility
@using WoWsShipBuilder.DataStructures
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> TorpedoDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.Torpedo.ShipComparisonDataSectionToString();

        var nfi = (NumberFormatInfo)CultureInfo.InvariantCulture.NumberFormat.Clone();
        nfi.NumberGroupSeparator = "'";

        var columnTitleAmount = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Amount))}";
        var columnTitleTurnTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TurnTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleTraverseSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_TraverseSpeed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_DegreePerSecond)})";
        var columnTitleReload = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReloadTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleSpread = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Spread))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Degree)})";
        var columnTitleSwitchTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_SwitchTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleType = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type))}";
        var columnTitleDamage = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage))}";
        var columnTitleSalvoDamage = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FullSalvoDamage))}";
        var columnTitleMaxRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_MaxRange))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Speed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleDetectionRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Detectability))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleArmingDistance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ArmingDistance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";
        var columnTitleReactionTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReactionTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleFloodChance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FloodingChance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleBlastRadius = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ExplosionRadius))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";
        var columnTitleBlastPenetration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration))}";
        var columnTitleCanHit = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_CanHitClasses))}";

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleAmount}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleAmount)" T="GridDataWrapper" Title="@columnTitleAmount" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TorpCount is not null && context.Item.TorpedoLauncher?.TorpLayout is not null)
                {
                    <MudText Typo="Typo.body2">
                        @($"{context.Item.TorpedoLauncher.TorpCount} ({context.Item.TorpedoLauncher.TorpLayout})")
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleTurnTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleTurnTime)" T="GridDataWrapper" Title="@columnTitleTurnTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TurnTime is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoLauncher.TurnTime
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleTraverseSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleTraverseSpeed)" T="GridDataWrapper" Title="@columnTitleTraverseSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TraverseSpeed is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoLauncher.TraverseSpeed
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReload}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReload)" T="GridDataWrapper" Title="@columnTitleReload" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.Reload is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoLauncher.Reload
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSpread}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSpread)" T="GridDataWrapper" Title="@columnTitleSpread" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> x.ShipDataContainer.TorpedoArmamentDataContainer?.TorpedoLaunchers.First().TorpedoAngles[1] - x.ShipDataContainer.TorpedoArmamentDataContainer?.TorpedoLaunchers.First().TorpedoAngles[0] ?? -1)">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.TorpedoLauncher?.TorpedoArea))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoLauncher.TorpedoArea
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSwitchTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSwitchTime)" T="GridDataWrapper" Title="@columnTitleSwitchTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoLauncher?.TimeToSwitch is not null && context.Item.TorpedoType.Count > 1)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.TorpedoLauncher.TimeToSwitch
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleType}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleType)" T="GridDataWrapper" Title="@columnTitleType" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.TorpedoType.Any() ? string.Empty : element.localizer.GetAppLocalization(x.TorpedoType.First()).Localization)">
            <CellTemplate>
                @if (context.Item.TorpedoType.Any())
                {
                    List<string> torps = context.Item.TorpedoType;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        string torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization(torp).Localization
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamage)" T="GridDataWrapper" Title="@columnTitleDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoDamage.Any())
                {
                    List<decimal> torps = context.Item.TorpedoDamage;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSalvoDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSalvoDamage)" T="GridDataWrapper" Title="@columnTitleSalvoDamage" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x => x.TorpedoFullSalvoDamage.Where(y => !string.IsNullOrEmpty(y)).Select(z => int.Parse(z ?? "0", NumberStyles.AllowThousands, nfi)).ToList())">
            <CellTemplate>
                @{
                   List<string?> torps = context.Item.TorpedoFullSalvoDamage.Where(x => !string.IsNullOrEmpty(x)).ToList();
                   if (torps.Count == 0)
                   {
                       <MudText Typo="Typo.body2" Color="Color.Primary">
                           @ShipComparisonViewModel.DataNotAvailable
                       </MudText>
                   }
                   else
                   {
                       for (var i = 0; i < torps.Count; i++)
                       {
                           string? torp = torps[i];
                           <MudText Typo="Typo.body2">
                               @torp
                           </MudText>
                           if (i < torps.Count - 1)
                           {
                               <MudDivider Class="my-1"/>
                           }
                       }
                   }
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMaxRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMaxRange)" T="GridDataWrapper" Title="@columnTitleMaxRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoRange.Any())
                {
                    List<decimal> torps = context.Item.TorpedoRange;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSpeed)" T="GridDataWrapper" Field="TorpedoSpeed" Title="@columnTitleSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoSpeed.Any())
                {
                    List<decimal> torps = context.Item.TorpedoSpeed;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDetectionRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDetectionRange)" T="GridDataWrapper" Title="@columnTitleDetectionRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoDetectRange.Any())
                {
                    List<decimal> torps = context.Item.TorpedoDetectRange;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleArmingDistance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleArmingDistance)" T="GridDataWrapper" Title="@columnTitleArmingDistance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoArmingDistance.Any())
                {
                    List<int> torps = context.Item.TorpedoArmingDistance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReactionTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReactionTime)" T="GridDataWrapper" Title="@columnTitleReactionTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoReactionTime.Any())
                {
                    List<decimal> torps = context.Item.TorpedoReactionTime;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFloodChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFloodChance)" T="GridDataWrapper" Title="@columnTitleFloodChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoFloodingChance.Any())
                {
                    List<decimal> torps = context.Item.TorpedoFloodingChance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastRadius)" T="GridDataWrapper" Title="@columnTitleBlastRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBlastRadius.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBlastRadius;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastPenetration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastPenetration)" T="GridDataWrapper" Title="@columnTitleBlastPenetration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBlastPenetration.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBlastPenetration;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCanHit}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCanHit)" T="GridDataWrapper" Title="@columnTitleCanHit" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.TorpedoCanHit.Any() ? 0 : x.TorpedoCanHit.First()?.Count ?? (x.TorpedoDamage.Any() ? 5 : 0))">
            <CellTemplate>
                @if (context.Item.TorpedoCanHit.Any())
                {
                    List<List<ShipClass>?> torps = context.Item.TorpedoCanHit;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        List<ShipClass>? classes = torps[i];
                        if (classes is null && context.Item.TorpedoDamage.Any())
                        {
                            <MudStack row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in Enum.GetValues(typeof(ShipClass)).Cast<ShipClass>().ToList())
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        else if (classes is null && !context.Item.TorpedoDamage.Any())
                        {
                            <MudText Typo="Typo.body2" Color="Color.Primary">
                                @ShipComparisonViewModel.DataNotAvailable
                            </MudText>
                        }
                        else if (classes is not null)
                        {
                            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in classes)
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
    };
}