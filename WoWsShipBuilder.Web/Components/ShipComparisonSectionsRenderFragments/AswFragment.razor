@using WoWsShipBuilder.ViewModels.Helper.GridData
@using WoWsShipBuilder.ViewModels.Other
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> AswDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.Asw.AsString();

        var columnTitleType = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type))}";
        var columnTitleCharges = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Charges))}";
        var columnTitleDropRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_DropRange))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleDropLenght = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_MaximumFlightDistance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitlePlanesInSquadron = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_PlanesInSquadron))}";
        var columnTitleBombsPerPlane = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_BombsPerPlane))}";
        var columnTitleBombsPerCharge = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_BombsPerCharge))}";
        var columnTitleReload = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReloadTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleDamage = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage))}";
        var columnTitleFireChance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FireChance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleFloodChance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FloodingChance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleSplashRadius = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_DcSplashRadius))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";
        var columnTitleSinkSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_SinkSpeed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_MPS)})";
        var columnTitleDetonationTimer = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_DetonationTimer))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleDetonationDepth = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_DetonationDepth))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleType}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleType)" SortBy="@(x => !string.IsNullOrEmpty(x.Asw.DcType) ? x.Asw.DcType : string.Empty)" T="GridDataWrapper" Title="@columnTitleType" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.Asw.DcType))
                {
                    <MudText Typo="Typo.body2">
                        @element.localizer.GetAppLocalization(context.Item.Asw.DcType).Localization
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCharges}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCharges)" SortBy="@(x => x.Asw.DcUses ?? 0)" T="GridDataWrapper" Title="@columnTitleCharges" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.DcUses is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcUses
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDropRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDropRange)" SortBy="@(x => x.Asw.Range ?? 0)" T="GridDataWrapper" Title="@columnTitleDropRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.Range is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.Range
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDropLenght}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDropLenght)" SortBy="@(x => x.Asw.MaxDropLength ?? 0)" T="GridDataWrapper" Title="@columnTitleDropLenght" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.MaxDropLength is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.MaxDropLength
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlanesInSquadron}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlanesInSquadron)" SortBy="@(x => x.Asw.PlanesInSquadron ?? 0)" T="GridDataWrapper" Title="@columnTitlePlanesInSquadron" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.PlanesInSquadron is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.PlanesInSquadron
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBombsPerPlane}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBombsPerPlane)" SortBy="@(x => x.Asw.BombsPerPlane ?? 0)" T="GridDataWrapper" Title="@columnTitleBombsPerPlane" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.BombsPerPlane is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.BombsPerPlane
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBombsPerCharge}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBombsPerCharge)" SortBy="@(x => x.Asw.DcPerAttack ?? 0)" T="GridDataWrapper" Title="@columnTitleBombsPerCharge" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.DcPerAttack is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcPerAttack
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReload}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReload)" SortBy="@(x => x.Asw.DcReload ?? 0)" T="GridDataWrapper" Title="@columnTitleReload" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.DcReload is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcReload
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamage)" SortBy="@(x => x.Asw.DcDamage ?? 0)" T="GridDataWrapper" Title="@columnTitleDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.DcDamage is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcDamage
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFireChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFireChance)" SortBy="@(x => x.Asw.DcFireChance ?? 0)" T="GridDataWrapper" Title="@columnTitleFireChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.DcFireChance is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcFireChance
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFloodChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFloodChance)" SortBy="@(x => x.Asw.DcFloodingChance ?? 0)" T="GridDataWrapper" Title="@columnTitleFloodChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.DcFloodingChance is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcFloodingChance
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSplashRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSplashRadius)" SortBy="@(x => x.Asw.DcSplashRadius ?? 0)" T="GridDataWrapper" Title="@columnTitleSplashRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.Asw.DcSplashRadius is not null)
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcSplashRadius
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSinkSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSinkSpeed)" T="GridDataWrapper" Title="@columnTitleSinkSpeed" SortBy="@(x => double.Parse(x.Asw.DcSinkSpeed?.Split(" ~ ").First() ?? "0"))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.Asw.DcSinkSpeed))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcSinkSpeed
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDetonationTimer}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDetonationTimer)" T="GridDataWrapper" Title="@columnTitleDetonationTimer" SortBy="@(x => double.Parse(x.Asw.DcDetonationTimer?.Split(" ~ ").First() ?? "0"))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.Asw.DcDetonationTimer))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcDetonationTimer
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDetonationDepth}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDetonationDepth)" T="GridDataWrapper" Title="@columnTitleDetonationDepth" SortBy="@(x => double.Parse(x.Asw.DcDetonationDepth?.Split(" ~ ").First() ?? "0"))" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.Asw.DcDetonationDepth))
                {
                    <MudText Typo="Typo.body2">
                        @context.Item.Asw.DcDetonationDepth
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
    };
}