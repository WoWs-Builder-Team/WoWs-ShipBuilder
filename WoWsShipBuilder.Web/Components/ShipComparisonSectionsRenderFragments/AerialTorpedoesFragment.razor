@using WoWsShipBuilder.ViewModels.Other
@using WoWsShipBuilder.Core.Utility
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.ViewModels.Helper.GridData
@code {

    // Parameter needs to be named __builder, otherwise compilation will fail.
    // ReSharper disable once InconsistentNaming UnusedParameter.Local
    public static readonly RenderFragment<(Func<string, string, bool> IsColumnHidden, ILocalizer localizer)> AerialTorpedoDataFragment = element => __builder =>
    {
        string dataSectionString = ShipComparisonDataSections.AerialTorpedoes.AsString();

        var columnTitlePlane = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_Plane))}";
        var columnTitleType = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Type))}";
        var columnTitleDamage = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Damage))}";
        var columnTitleMaxRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipComparison_MaxRange))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleSpeed = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Speed))} ({element.localizer.SimpleAppLocalization(Translation.Unit_Knots)})";
        var columnTitleDetectionRange = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Detectability))} ({element.localizer.SimpleAppLocalization(Translation.Unit_KM)})";
        var columnTitleArmingDistance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ArmingDistance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";
        var columnTitleReactionTime = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ReactionTime))} ({element.localizer.SimpleAppLocalization(Translation.Unit_S)})";
        var columnTitleFloodChance = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_FloodingChance))} ({element.localizer.SimpleAppLocalization(Translation.Unit_PerCent)})";
        var columnTitleBlastRadius = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_ExplosionRadius))} ({element.localizer.SimpleAppLocalization(Translation.Unit_M)})";
        var columnTitleBlastPenetration = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Blast))} {element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_Penetration))}";
        var columnTitleCanHit = $"{element.localizer.SimpleAppLocalization(nameof(Translation.ShipStats_CanHitClasses))}";

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitlePlane}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitlePlane)" T="GridDataWrapper" Title="@columnTitlePlane" SortBy="@(x=> !x.TorpedoBombers.Type.Any() ? string.Empty : element.localizer.GetAppLocalization($"ShipStats_{x.TorpedoBombers.Type.First()}").Localization)" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.Type.Any())
                {
                    List<string> items = context.Item.TorpedoBombers.Type;
                    for (var i = 0; i < items.Count; i++)
                    {
                        string item = items[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization($"ShipStats_{item}").Localization
                        </MudText>
                        if (i < items.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleType}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleType)" T="GridDataWrapper" Title="@columnTitleType" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.TorpedoBombers.WeaponType.Any() ? string.Empty : element.localizer.GetAppLocalization(x.TorpedoBombers.WeaponType.First()).Localization)">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponType.Any())
                {
                    List<string> torps = context.Item.TorpedoBombers.WeaponType;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        string torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @element.localizer.GetAppLocalization(torp).Localization
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDamage}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDamage)" SortBy="@(x => x.TorpedoBombers.WeaponDamage)" T="GridDataWrapper" Title="@columnTitleDamage" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponDamage.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponDamage;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleMaxRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleMaxRange)" SortBy="@(x => x.TorpedoBombers.WeaponRange)" T="GridDataWrapper" Title="@columnTitleMaxRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponRange.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponRange;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleSpeed}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleSpeed)" SortBy="@(x => x.TorpedoBombers.WeaponSpeed)" T="GridDataWrapper" Title="@columnTitleSpeed" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponSpeed.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponSpeed;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleDetectionRange}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleDetectionRange)" SortBy="@(x => x.TorpedoBombers.WeaponDetectabilityRange)" T="GridDataWrapper" Title="@columnTitleDetectionRange" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponDetectabilityRange.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponDetectabilityRange;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleArmingDistance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleArmingDistance)" SortBy="@(x => x.TorpedoBombers.WeaponArmingDistance)" T="GridDataWrapper" Title="@columnTitleArmingDistance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponArmingDistance.Any())
                {
                    List<int> torps = context.Item.TorpedoBombers.WeaponArmingDistance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleReactionTime}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleReactionTime)" SortBy="@(x => x.TorpedoBombers.WeaponReactionTime)" T="GridDataWrapper" Title="@columnTitleReactionTime" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponReactionTime.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponReactionTime;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleFloodChance}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleFloodChance)" SortBy="@(x => x.TorpedoBombers.WeaponFloodingChance)" T="GridDataWrapper" Title="@columnTitleFloodChance" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponFloodingChance.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponFloodingChance;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastRadius}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastRadius)" SortBy="@(x => x.TorpedoBombers.WeaponBlastRadius)" T="GridDataWrapper" Title="@columnTitleBlastRadius" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponBlastRadius.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponBlastRadius;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleBlastPenetration}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleBlastPenetration)" SortBy="@(x => x.TorpedoBombers.WeaponBlastPenetration)" T="GridDataWrapper" Title="@columnTitleBlastPenetration" HeaderClass="column-text-center" CellClass="column-text-center">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponBlastPenetration.Any())
                {
                    List<decimal> torps = context.Item.TorpedoBombers.WeaponBlastPenetration;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        decimal torp = torps[i];
                        <MudText Typo="Typo.body2">
                            @torp
                        </MudText>
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn ID="@($"{dataSectionString}_{columnTitleCanHit}")" Hidden="@element.IsColumnHidden.Invoke(dataSectionString, columnTitleCanHit)" T="GridDataWrapper" Title="@columnTitleCanHit" HeaderClass="column-text-center" CellClass="column-text-center" SortBy="@(x=> !x.TorpedoBombers.WeaponCanHit.Any() ? 0 : x.TorpedoBombers.WeaponCanHit.First()?.Count ?? (x.TorpedoBombers.WeaponDamage.Any() ? 5 : 0))">
            <CellTemplate>
                @if (context.Item.TorpedoBombers.WeaponCanHit.Any())
                {
                    List<List<ShipClass>?> torps = context.Item.TorpedoBombers.WeaponCanHit;
                    for (var i = 0; i < torps.Count; i++)
                    {
                        List<ShipClass>? classes = torps[i];
                        if (classes is null && context.Item.TorpedoBombers.WeaponDamage.Any())
                        {
                            <MudStack row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in Enum.GetValues(typeof(ShipClass)).Cast<ShipClass>().ToList())
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        else if (classes is null && !context.Item.TorpedoBombers.WeaponDamage.Any())
                        {
                            <MudText Typo="Typo.body2" Color="Color.Primary">
                                @ShipComparisonViewModel.DataNotAvailable
                            </MudText>
                        }
                        else if (classes is not null)
                        {
                            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (var shipClass in classes)
                                {
                                    <MudIcon ViewBox="0 0 22 10" Icon="@($"<path d=\"{ClassToPathHelper.GetSvgPathFromClass(shipClass)}\"/>")"/>
                                }
                            </MudStack>
                        }
                        if (i < torps.Count - 1)
                        {
                            <MudDivider Class="my-1"/>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Primary">
                        @ShipComparisonViewModel.DataNotAvailable
                    </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
    };
}