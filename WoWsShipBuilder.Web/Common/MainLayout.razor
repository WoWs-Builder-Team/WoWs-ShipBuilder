@using WoWsShipBuilder.Infrastructure.Utility
@using WoWsShipBuilder.Features.Settings
@using WoWsShipBuilder.Infrastructure.ApplicationData
@inherits LayoutComponentBase
@inject ISettingsAccessor SettingsAccessor
@inject AppSettings AppSettings
@inject RefreshNotifierService RefreshNotifierService

<MudThemeProvider Theme="@(Helpers.IsAprilFool() ? aprilFoolTheme : theme)" IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <TopMenu/>
    <MudMainContent Class="px-2">
        <CascadingValue Name="SettingsInitialized" Value="@settingsInitialized">
            @Body
        </CascadingValue>
    </MudMainContent>
    <footer style="margin-top: 16px;">
        <ShipBuilderFooter/>
    </footer>
</MudLayout>

@code
{
    private bool settingsInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var settings = await SettingsAccessor.LoadSettings();
            if (settings == null)
            {
                settings = new()
                {
                    StoreBuildOnShare = false,
                };
                await SettingsAccessor.SaveSettings(settings);
            }

            AppSettings.UpdateFromSettings(settings);
            settingsInitialized = true;
            RefreshNotifierService.NotifyRefreshRequested();
            StateHasChanged();
        }
    }

    private readonly MudTheme theme = Helpers.CreateDarkTheme(true);

    private readonly MudTheme aprilFoolTheme = new()
    {
        LayoutProperties =
        {
            DefaultBorderRadius = "0",
        },
        PaletteDark =
        {
            Black = $"{Helpers.GenerateRandomColor()}FF",
            White = $"{Helpers.GenerateRandomColor()}FF",
            Primary = $"{Helpers.GenerateRandomColor()}FF",
            PrimaryContrastText = $"{Helpers.GenerateRandomColor()}FF",
            Secondary = $"{Helpers.GenerateRandomColor()}FF",
            Info = $"{Helpers.GenerateRandomColor()}FF",
            InfoContrastText = $"{Helpers.GenerateRandomColor()}FF",
            Success = $"{Helpers.GenerateRandomColor()}FF",
            SuccessContrastText = $"{Helpers.GenerateRandomColor()}FF",
            Warning = $"{Helpers.GenerateRandomColor()}FF",
            WarningContrastText = $"{Helpers.GenerateRandomColor()}FF",
            Error = $"{Helpers.GenerateRandomColor()}FF",
            ErrorContrastText = $"{Helpers.GenerateRandomColor()}FF",
            Dark = $"{Helpers.GenerateRandomColor()}FF",
            DarkContrastText = $"{Helpers.GenerateRandomColor()}FF",
            TextPrimary = $"{Helpers.GenerateRandomColor()}FF",
            TextSecondary = $"{Helpers.GenerateRandomColor()}89",
            TextDisabled = $"{Helpers.GenerateRandomColor()}60",
            ActionDefault = $"{Helpers.GenerateRandomColor()}89",
            ActionDisabled = $"{Helpers.GenerateRandomColor()}42",
            ActionDisabledBackground = $"{Helpers.GenerateRandomColor()}1E",
            Surface = $"{Helpers.GenerateRandomColor()}FF",
            LinesDefault = $"{Helpers.GenerateRandomColor()}4D",
            LinesInputs = $"{Helpers.GenerateRandomColor()}",
            AppbarBackground = $"{Helpers.GenerateRandomColor()}FF",
            HoverOpacity = new Random().NextDouble(),
            DrawerBackground = $"{Helpers.GenerateRandomColor()}",
            DividerLight = $"{Helpers.GenerateRandomColor()}CC",
            BackgroundGrey = $"{Helpers.GenerateRandomColor()}FF",
        },
        ZIndex =
        {
            Dialog = 2000,
            Popover = 3000,
            Tooltip = 4000,
        },
    };
}
