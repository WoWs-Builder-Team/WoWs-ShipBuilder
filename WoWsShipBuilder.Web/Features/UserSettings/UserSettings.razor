@page "/settings"
@using WoWsShipBuilder.Features.Builds
@using WoWsShipBuilder.Features.Settings
@using WoWsShipBuilder.Features.ShipStats
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Metrics
@using WoWsShipBuilder.Infrastructure.Utility
@using WoWsShipBuilder.Web.Features.BetaAccess
@using System.Text.Json

@implements IDisposable
@implements IAsyncDisposable

@inject ILocalizer Localizer
@inject RefreshNotifierService RefreshNotifierService
@inject AppSettings AppSettings
@inject ISettingsAccessor SettingsAccessor
@inject ISnackbar Snackbar
@inject IBetaAccessManager BetaAccessManager
@inject IUserDataService UserDataService
@inject IJSRuntime Runtime
@inject MetricsService MetricsService
@inject ExpanderStateCache ExpanderStateCache
@inject IWebHostEnvironment HostEnvironment

<PageTitle>@Localizer.GetAppLocalization(nameof(Translation.SettingsWindow_Settings)).Localization</PageTitle>

<MudContainer Style="padding-top: 1em;">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudCard Outlined>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.Info"/>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localizer.GetAppLocalization(nameof(Translation.WebApp_ApplicationInfo)).Localization</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @Localizer.GetAppLocalization(nameof(Translation.WebApp_CurrentVersion)).Localization @AppData.DataVersion
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudSelect @bind-Value="selectedCulture" Style="max-width: 500px;" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_SelectedLanguage)).Localization">
                @foreach (var culture in AppConstants.SupportedLanguages)
                {
                    <MudSelectItem Value="@culture">@culture.CultureInfo.DisplayName</MudSelectItem>
                }
            </MudSelect>

            @if (HostEnvironment.IsDevelopment())
            {
                <MudSwitch @bind-Checked="@enableLocalizationDebugMode" Label="Localization Debug Mode" Color="Color.Primary"/>
            }
        </MudItem>
        <MudItem xs="12">
            <MudStack>
                <MudText Typo="Typo.h6">@Localizer.GetAppLocalization(nameof(Translation.WebApp_ExpanderSettingHeader)).Localization</MudText>
                <MudStack Row>
                    <MudSwitch @bind-Checked="@openMainExpandersByDefault" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_ExpanderSetting)).Localization" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="@openAmmoExpandersByDefault" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_AmmoExpanderSetting)).Localization" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="@openSecondariesAndAaExpandersByDefault" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_SecondariesAndAAExpanderSetting)).Localization" Color="Color.Primary"/>
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudStack Row Class="mb-1" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6">
                    @($"Saved builds ({savedBuilds.Count}/1000)")
                </MudText>
                <MudButton Class="rounded-4" Disabled="@(!savedBuilds.Any())" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="@ExportSavedBuilds">
                    @Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_Export))
                </MudButton>
                <MudFileUpload T="IBrowserFile" FilesChanged="@(async file => await ImportSavedBuilds(file))" Style="margin-top: 0;" Class="file-upload-full-height" Accept=".json" MaximumFileCount="1">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label" Class="rounded-4" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload" Style="height: 100%;" for="@context">
                            @Localizer.SimpleAppLocalization(nameof(Translation.BuildImport_Import))
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudButton Class="rounded-4" Disabled="@(!savedBuilds.Any())" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" OnClick="@DeleteAllSavedBuilds">
                    @Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_DeleteAll))
                </MudButton>
            </MudStack>
            <MudText Typo="Typo.caption">
                @Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_LocalStorageWarning))
            </MudText>
        </MudItem>
        <MudItem xs="12">
           <MudCheckBox @bind-Checked="@storeBuildOnShare" LabelPosition="LabelPosition.End" Color="Color.Primary" Label="@Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_SaveBuildOnShare))"/>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">
                @Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_FittingToolSelector))
            </MudText>
            <MudCheckBox @bind-Checked="@AppSettings.FittingToolSelectorClosedByDefault" LabelPosition="LabelPosition.End" Color="Color.Primary" Label="@Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_ClosedByDefault))"/>
            <MudCheckBox @bind-Checked="@AppSettings.FittingToolSelectorMultiSelection" LabelPosition="LabelPosition.End" Color="Color.Primary" Label="@Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_MultiSelect))"/>
            <MudCheckBox @bind-Checked="@AppSettings.FittingToolSelectorShowShipImages" LabelPosition="LabelPosition.End" Color="Color.Primary" Label="@Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_FittingToolShowImages))" Class="mb-n3"/>
            <MudText Typo="Typo.caption" Class="mt-0 ml-12 pa-0">
                @Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_FtImgWarning))
            </MudText>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Heading))</MudText>
            <MudStack Row AlignItems="AlignItems.End">
                <MudTextField @ref="betaCodeInput" T="string" Label="@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Code))" OnKeyDown="@CodeOnKeyDown" Immediate="true" @bind-Value="@CurrentCode"></MudTextField>
                <MudButton Class="rounded-4" Disabled="@betaCodeSubmitDisabled" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@AddBetaCode">
                    @Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_AddCode))
                </MudButton>
            </MudStack>
            @if (SettingsInitialized && AppSettings is not null && AppSettings.BetaAccessCodes.Any())
            {
                <MudTable Items="@AppSettings.BetaAccessCodes">
                    <HeaderContent>
                        <MudTh>@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Code))</MudTh>
                        <MudTh>@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Feature))</MudTh>
                        <MudTh>@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Remove))</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Code))">
                            @context
                        </MudTd>
                        <MudTd DataLabel="@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Feature))">
                            @(BetaAccessManager.FindBetaByCode(context)?.LocalizationKey ?? "N/A")
                        </MudTd>
                        <MudTd DataLabel="@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Remove))">
                            <MudIconButton OnClick="@(async () => await RemoveCode(context))" Icon="@Icons.Material.Filled.Delete"/>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudItem>
        <MudItem xs="12"/>
        <MudItem xs="3">
            <MudButton FullWidth Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveSettingsAsync">@Localizer.GetAppLocalization(nameof(Translation.SettingsWindow_Save)).Localization</MudButton>
        </MudItem>
        <MudItem xs="3">
            <MudButton FullWidth Variant="Variant.Filled" Color="Color.Primary" OnClick="@ResetSettingsAsync">@Localizer.GetAppLocalization(nameof(Translation.SettingsWindow_Reset)).Localization</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [CascadingParameter(Name = "SettingsInitialized")]
    protected bool SettingsInitialized { get; set; }

    private CultureDetails selectedCulture = AppConstants.DefaultCultureDetails;

    private bool openMainExpandersByDefault = true;

    private bool openAmmoExpandersByDefault = true;

    private bool openSecondariesAndAaExpandersByDefault = true;

    private bool betaCodeSubmitDisabled = true;

    private string currentCode = string.Empty;

    private IJSObjectReference? module;

    private List<Build> savedBuilds = new();

    private MudTextField<string> betaCodeInput = default!;

    private bool storeBuildOnShare = true;

    private bool enableLocalizationDebugMode;

    private string CurrentCode
    {
        get => currentCode;
        set
        {
            currentCode = value;
            betaCodeSubmitDisabled = string.IsNullOrEmpty(currentCode);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RefreshNotifierService.RefreshRequested += UpdateSettingsValues;
        UpdateSettingsValues();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MetricsService.PageAccessCount.WithLabels("settings").Inc();
            savedBuilds = (await UserDataService.LoadBuildsAsync()).ToList();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void UpdateSettingsValues()
    {
        selectedCulture = AppSettings.SelectedLanguage;
        openMainExpandersByDefault = AppSettings.OpenAllMainExpandersByDefault;
        openAmmoExpandersByDefault = AppSettings.OpenAllAmmoExpandersByDefault;
        openSecondariesAndAaExpandersByDefault = AppSettings.OpenSecondariesAndAaExpandersByDefault;
        storeBuildOnShare = AppSettings.StoreBuildOnShare;
        enableLocalizationDebugMode = AppSettings.EnableLocalizationDebugMode;

        StateHasChanged();
    }

    private async Task SaveSettingsAsync()
    {
        bool settingsChanged = AppSettings.SelectedLanguage != selectedCulture;
        AppSettings.SelectedLanguage = selectedCulture;

        settingsChanged = settingsChanged || openAmmoExpandersByDefault != AppSettings.OpenAllAmmoExpandersByDefault;
        AppSettings.OpenAllAmmoExpandersByDefault = openAmmoExpandersByDefault;

        settingsChanged = settingsChanged || openMainExpandersByDefault != AppSettings.OpenAllMainExpandersByDefault;
        AppSettings.OpenAllMainExpandersByDefault = openMainExpandersByDefault;

        settingsChanged = settingsChanged || openSecondariesAndAaExpandersByDefault != AppSettings.OpenSecondariesAndAaExpandersByDefault;
        AppSettings.OpenSecondariesAndAaExpandersByDefault = openSecondariesAndAaExpandersByDefault;

        settingsChanged = settingsChanged || enableLocalizationDebugMode != AppSettings.EnableLocalizationDebugMode;
        AppSettings.EnableLocalizationDebugMode = enableLocalizationDebugMode;

        AppSettings.StoreBuildOnShare = storeBuildOnShare;

        await SettingsAccessor.SaveSettings(AppSettings);

        Snackbar.Add("Settings saved", Severity.Success, config => { config.CloseAfterNavigation = true; });
        if (settingsChanged)
        {
            ExpanderStateCache.Reset();
            RefreshNotifierService.NotifyRefreshRequested();
        }
    }

    public void Dispose()
    {
        RefreshNotifierService.RefreshRequested -= UpdateSettingsValues;
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    private async Task ResetSettingsAsync()
    {
        AppSettings.ClearSettings();
        ExpanderStateCache.Reset();
        await SettingsAccessor.SaveSettings(AppSettings);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        Snackbar.Add(Localizer.GetAppLocalization(nameof(Translation.WebApp_SettingsSaved)).Localization, Severity.Success, config => { config.CloseAfterNavigation = true; });
        RefreshNotifierService.NotifyRefreshRequested();
    }

    private async Task AddBetaCode()
    {
        var betaEntry = BetaAccessManager.FindBetaByCode(CurrentCode);
        if (betaEntry is not null)
        {
            if (!AppSettings.BetaAccessCodes.Contains(CurrentCode))
            {
                AppSettings.BetaAccessCodes.Add(CurrentCode);
                await SettingsAccessor.SaveSettings(AppSettings);
                RefreshNotifierService.NotifyRefreshRequested();
                MetricsService.BetaCodeActivation.WithLabels(CurrentCode).Inc();
                Snackbar.Add($"'{Localizer.SimpleAppLocalization(betaEntry.LocalizationKey)}' {Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_CodeEnabled))}", Severity.Success, config => { config.CloseAfterNavigation = true; });
            }
            else
            {
                Snackbar.Add($"'{Localizer.SimpleAppLocalization(betaEntry.LocalizationKey)}' {Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Duplicate))}", Severity.Warning, config => { config.CloseAfterNavigation = true; });
            }

            await Task.Delay(100);
            await betaCodeInput.Clear();
        }
        else
        {
            Snackbar.Add(Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Invalid)), Severity.Error, config => { config.CloseAfterNavigation = true; });
            await Task.Delay(100);
            await betaCodeInput.SelectAsync();
        }
    }

    private async Task RemoveCode(string code)
    {
        if (AppSettings.BetaAccessCodes.Remove(code))
        {
            await SettingsAccessor.SaveSettings(AppSettings);
            RefreshNotifierService.NotifyRefreshRequested();
        }
    }

    private async Task CodeOnKeyDown(KeyboardEventArgs args)
    {
        if (args.Code is "Enter" or "NumpadEnter" && !betaCodeSubmitDisabled)
        {
            await AddBetaCode();
        }
    }

    private async Task ExportSavedBuilds()
    {
        module ??= await Runtime.InvokeAsync<IJSObjectReference>("import", "/scripts/userSettings.js");
        var buildStrings = savedBuilds.Select(x => x.CreateShortStringFromBuild()).ToList();
        await module.InvokeVoidAsync("downloadObjectAsJson", buildStrings, "builds");
        MetricsService.SavedBuildOperations.WithLabels("export").Inc();
    }

    private async Task ImportSavedBuilds(IBrowserFile? file)
    {
        if (file is not null && file.ContentType.Equals("application/json"))
        {
            IEnumerable<string>? buildList;
            await using (var fileStream = file.OpenReadStream())
            {
                try
                {
                    buildList = await JsonSerializer.DeserializeAsync<IEnumerable<string>>(fileStream, AppConstants.JsonSerializerOptions);
                }
                catch (JsonException)
                {
                    Snackbar.Add("Corrupted JSON file.", Severity.Error);
                    return;
                }
            }

            if (buildList is not null)
            {
                var builds = new List<Build>();
                var counter = 0;
                foreach (string buildString in buildList)
                {
                    try
                    {
                        var build = Build.CreateBuildFromString(buildString);
                        if (AppData.ShipDictionary.ContainsKey(build.ShipIndex))
                        {
                            builds.Add(build);
                        }
                        else
                        {
                            counter++;
                        }
                    }
                    catch (FormatException)
                    {
                        counter++;
                    }
                }

                builds.Reverse();
                await UserDataService.ImportBuildsAsync(builds);
                savedBuilds = (await UserDataService.LoadBuildsAsync()).ToList();
                MetricsService.SavedBuildOperations.WithLabels("import").Inc();
                if (counter > 0)
                {
                    Snackbar.Add($"{counter} builds could not be imported.", Severity.Warning);
                }

                StateHasChanged();
            }
            else
            {
                Snackbar.Add("No builds to import found.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add(Localizer.SimpleAppLocalization(nameof(Translation.SettingsWindow_InvalidJsonFileError)), Severity.Error);
        }
    }

    private async Task DeleteAllSavedBuilds()
    {
        await UserDataService.RemoveSavedBuildsAsync(savedBuilds);
        savedBuilds = (await UserDataService.LoadBuildsAsync()).ToList();
        Snackbar.Add("All saved builds deleted.", Severity.Info);
        MetricsService.SavedBuildOperations.WithLabels("delete").Inc();
        StateHasChanged();
    }
}
