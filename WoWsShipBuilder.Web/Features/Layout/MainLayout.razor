@using WoWsShipBuilder.Infrastructure.Utility
@using WoWsShipBuilder.Features.Settings
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.ApplicationTheme

@inherits LayoutComponentBase
@implements IDisposable
@inject ISettingsAccessor SettingsAccessor
@inject AppSettings AppSettings
@inject RefreshNotifierService RefreshNotifierService
@inject ThemeManager ThemeManager

<MudThemeProvider Theme="theme" IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <TopMenu/>
    <MudMainContent Class="px-2">
        <CascadingValue Name="SettingsInitialized" Value="@settingsInitialized">
            @Body
        </CascadingValue>
    </MudMainContent>
    <footer style="margin-top: 16px;">
        <ShipBuilderFooter/>
    </footer>
</MudLayout>

@code
{
    private bool settingsInitialized;

    private MudTheme theme = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        theme = ThemeManager.AppTheme;
        ThemeManager.ThemeChanged += UpdateTheme;
    }

    private void UpdateTheme(object? sender, MudTheme newTheme)
    {
        theme = newTheme;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var settings = await SettingsAccessor.LoadSettings();
            if (settings == null)
            {
                settings = new()
                {
                    StoreBuildOnShare = false,
                };
                await SettingsAccessor.SaveSettings(settings);
            }

            AppSettings.UpdateFromSettings(settings);
            settingsInitialized = true;
            ThemeManager.UpdateTheme();
            RefreshNotifierService.NotifyRefreshRequested();
        }
    }

    public void Dispose()
    {
        ThemeManager.ThemeChanged -= UpdateTheme;
    }
}
