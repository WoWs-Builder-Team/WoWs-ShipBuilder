@page "/test"
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.DataStructures.Ship
@using WoWsShipBuilder.Features.FiringAngleDiagram
@using WoWsShipBuilder.Features.Settings
@using WoWsShipBuilder.Infrastructure
@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.GameData
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using WoWsShipBuilder.Infrastructure.Utility
@using MainBatteryDataContainer = WoWsShipBuilder.Features.DataContainers.MainBatteryDataContainer
@using System.Collections.Immutable
@inject ISettingsAccessor SettingsAccessor
@inject AppSettings AppSettings
@inject ILocalizer Localizer
@inject RefreshNotifierService RefreshNotifierService
@inject IDialogService DialogService

<MudText Typo="Typo.h2">Test Page</MudText>

<MudSelect @bind-Value="selectedCulture" Style="max-width: 500px;">
    @foreach (var culture in AppConstants.SupportedLanguages)
    {
        <MudSelectItem Value="@culture">@culture.CultureInfo.DisplayName</MudSelectItem>
    }
</MudSelect>
<MudButton OnClick="SaveCultureChangeAsync" Disabled="AppSettings.SelectedLanguage == selectedCulture">Save culture change</MudButton>
<MudText>@Localizer.GetAppLocalization(nameof(Translation.Battleship))</MudText>
@* <canvas style="height: 80vh; width: 25vw;position: relative; left: 50%; transform: translateX(-50%);"  id="visualizer"></canvas> *@
@code {

    private CultureDetails selectedCulture = AppConstants.DefaultCultureDetails;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        selectedCulture = AppSettings.SelectedLanguage;
    }

    private async Task SaveCultureChangeAsync()
    {
        AppSettings.SelectedLanguage = selectedCulture;
        await SettingsAccessor.SaveSettings(AppSettings);
        RefreshNotifierService.NotifyRefreshRequested();
    }

    private (Ship Ship, List<ShipUpgrade> Configuration) LoadPreviewShip(string shipIndex)
    {
        var ship = AppData.FindShipFromSummary(AppData.ShipSummaryMapper[shipIndex]);

        var configuration = ShipModuleHelper.GroupAndSortUpgrades(ship!.ShipUpgradeInfo.ShipUpgrades)
            .Select(entry => entry.Value.FirstOrDefault())
            .Where(item => item != null)
            .Cast<ShipUpgrade>()
            .ToList();

        return (ship, configuration);
    }

    private (Ship Ship, List<ShipUpgrade> Configuration) LoadPreviewShip(ShipClass shipClass, int tier, Nation nation)
    {
        var ship = AppData.FindShipFromSummary(AppData.ShipSummaryMapper.Values.First(s => s.ShipClass == shipClass && s.Nation == nation && s.Tier == tier));

        var configuration = ShipModuleHelper.GroupAndSortUpgrades(ship!.ShipUpgradeInfo.ShipUpgrades)
            .Select(entry => entry.Value.FirstOrDefault())
            .Where(item => item != null)
            .Cast<ShipUpgrade>()
            .ToList();

        return (ship, configuration);
    }

    private void OpenFiringAngles()
    {
        var (ship, config) = LoadPreviewShip(ShipClass.Destroyer, 5, Nation.UnitedKingdom);
        var data = MainBatteryDataContainer.FromShip(ship, config, new());
        var records = data!.OriginalMainBatteryData.Guns.Select(gun =>
        {
            var sector = gun.HorizontalSector.Select(a => a + gun.BaseAngle).ToImmutableArray();
            var deadZones = gun.HorizontalDeadZones.Select(z => z.Select(a => a + gun.BaseAngle).ToImmutableArray()).ToImmutableArray();
            return new GunDataContainer(gun.HorizontalPosition, gun.VerticalPosition, gun.BaseAngle, sector, deadZones);
        });

        var parameters = new DialogParameters
        {
            { nameof(FiringAngleDialog.IsArtillery), true },
            { nameof(FiringAngleDialog.GunDataContainers), records },
        };
        var options = new DialogOptions
        {
            NoHeader = true,
            CloseButton = false,
        };
        DialogService.Show<FiringAngleDialog>("FiringAngles", parameters, options);
    }

}
