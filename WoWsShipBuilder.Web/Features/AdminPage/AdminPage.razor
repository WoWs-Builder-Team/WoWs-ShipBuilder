@page "/admin"
@attribute [Authorize(Roles = AppConstants.AdminRoleName)]

@using WoWsShipBuilder.Infrastructure.ApplicationData
@using WoWsShipBuilder.Infrastructure.DataTransfer
@using WoWsShipBuilder.Infrastructure.Localization
@using WoWsShipBuilder.Infrastructure.Localization.Resources
@using System.Security.Claims
@using WoWsShipBuilder.Web.Features.BetaAccess

@inject ILocalizer Localizer
@inject IBetaAccessManager BetaAccessManager
@inject IClipboardService ClipboardService

<MudText Class="ma-2" Align="Align.Center" Typo="Typo.h4">Administration page</MudText>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudStack Class="mt-2">
        <MudText>@($"status: {status}")</MudText>
        <MudText>@($"account_id: {accountId}")</MudText>
        <MudText>@($"access_token: {accessToken}")</MudText>
    </MudStack>

    <MudDivider DividerType="DividerType.FullWidth" Class="my-4" Light/>
    <MudText Typo="Typo.h5">Beta Access codes</MudText>
    <MudTable Items="@BetaAccessManager.ActiveBetas" Outlined Striped Dense>
        <HeaderContent>
            <MudTh>@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Code))</MudTh>
            <MudTh>@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Feature))</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Code))">
                @context.Code
                <MudIconButton OnClick="async () => await ClipboardService.SetTextAsync(context.Code)" Icon="@Icons.Material.Filled.ContentCopy"/>
            </MudTd>
            <MudTd DataLabel="@Localizer.SimpleAppLocalization(nameof(Translation.BetaAccess_Feature))">
                @Localizer.SimpleAppLocalization(context.LocalizationKey)
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {

    private string status = string.Empty;

    private string accountId = string.Empty;

    private string accessToken = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var authState = await AuthenticationStateTask;
            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                accountId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier)!;
                accessToken = authState.User.FindFirstValue(ClaimTypes.UserData)!;
                status = string.Join(", ", authState.User.FindAll(ClaimTypes.Role).Select(c => c.Value));
                StateHasChanged();
            }
        }
    }
}