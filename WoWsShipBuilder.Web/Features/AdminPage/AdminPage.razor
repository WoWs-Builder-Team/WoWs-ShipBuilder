@page "/admin"
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Options
@using WoWsShipBuilder.Infrastructure
@using WoWsShipBuilder.Infrastructure.Utility
@using WoWsShipBuilder.Web.Infrastructure
@inject NavigationManager NavigationManager
@inject HttpClient Client
@inject IOptions<AdminOptions> AdminOptions

<MudText Class="ma-2" Align="Align.Center" Typo="Typo.h4">Administration page</MudText>

<div class="d-flex align-center flex-column">
    <MudButton Variant="Variant.Outlined" OnClick="TryWgAuth">Auth with Wg</MudButton>
    @if (authorized)
    {
        <MudStack Class="mt-2">
            <MudText>@($"status: {status}")</MudText>
            <MudText>@($"account_id: {accountId}")</MudText>
            <MudText>@($"access_token: {accessToken}")</MudText>
        </MudStack>
    }
</div>

@code {

    private bool authorized = false;

    private string status = string.Empty;

    private string accountId = string.Empty;

    private string accessToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (NavigationManager.TryGetQueryString("status", out status) && status.Equals("ok"))
        {
            NavigationManager.TryGetQueryString("account_id", out accountId);
            if (AdminOptions.Value.AllowedUsers.Contains(accountId))
            {
                NavigationManager.TryGetQueryString("access_token", out accessToken);
                authorized = await ValidateAuth();
            }
        }
    }

    private void TryWgAuth()
    {
        var pageUrl = $"{NavigationManager.BaseUri}admin";
        var url = @$"https://api.worldoftanks.eu/wot/auth/login/?application_id={AdminOptions.Value.WgApiKey}&redirect_uri={pageUrl}";
        NavigationManager.NavigateTo(url);
    }

    private async Task<bool> ValidateAuth()
    {
        var checkUrl = @$"https://api.worldofwarships.eu/wows/account/info/?application_id={AdminOptions.Value.WgApiKey}&account_id={accountId}&access_token={accessToken}&fields=private.gold";

        var request = new HttpRequestMessage(HttpMethod.Get,checkUrl);
        var response = await Client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<WgResponse>();

            if (data is not null && data.Status.Equals("ok"))
            {
                return data.Data.First().Value.Private?.Gold is not null;
            }
        }

        return false;
    }

    private class WgResponse
    {
        [JsonPropertyName("status")]
        public string Status { get; set; } = string.Empty;

        [JsonPropertyName("data")]
        public Dictionary<string, Data> Data { get; set; } = new();
    }

    private class Data
    {
        [JsonPropertyName("private")]
        public Private? Private { get; set; }
    }

    private class Private
    {
        [JsonPropertyName("gold")]
        public int? Gold { get; set; }
    }

}