using Microsoft.CodeAnalysis;

namespace WoWsShipBuilder.Data.Generator.DataElementGenerator;

public static class AttributeHelper
{
    public const string AttributeNamespace = "WoWsShipBuilder.DataElements.DataElementAttributes";

    public const string DataElementTypesEnumName = "DataElementTypes";

    // language=csharp
    public const string DataElementTypesEnum = $$"""
                                                 // <auto-generated />
                                                 #nullable enable
                                                 namespace {{AttributeNamespace}};

                                                 [global::System.Flags]
                                                 internal enum {{DataElementTypesEnumName}}
                                                 {
                                                     KeyValue = 1,
                                                     KeyValueUnit = 2,
                                                     Value = 4,
                                                     Grouped = 8,
                                                     Tooltip = 16,
                                                     FormattedText = 32,
                                                 }
                                                 """;

    public const string DataElementTextKindEnumName = "TextKind";

    // language=csharp
    public const string DataElementTextKindEnum = $$"""
                                                     // <auto-generated />
                                                     #nullable enable
                                                     namespace {{AttributeNamespace}};

                                                     /// <summary>
                                                     /// Specifies how a text value of a property marked by <see cref="{{AttributeNamespace}}.DataElementTypeAttribute"/> will be interpreted.
                                                     /// </summary>
                                                     internal enum {{DataElementTextKindEnumName}}
                                                     {
                                                         /// <summary>
                                                         /// Identifies a plain text value that will be displayed as is.
                                                         /// </summary>
                                                         Plain,

                                                         /// <summary>
                                                         /// Identifies a text value that will be used as game localization key.
                                                         /// </summary>
                                                         LocalizationKey,

                                                         /// <summary>
                                                         /// Identifies a text value that will be used as app localization key.
                                                         /// </summary>
                                                         AppLocalizationKey,
                                                     }
                                                     """;

    public const string DataContainerAttributeName = "DataContainerAttribute";

    // language=csharp
    public const string DataContainerAttribute = $$"""
                                                   // <auto-generated />
                                                   #nullable enable
                                                   namespace {{AttributeNamespace}};

                                                   [global::System.AttributeUsage(global::System.AttributeTargets.Class, Inherited = false)]
                                                   internal class {{DataContainerAttributeName}} : global::System.Attribute
                                                   {
                                                   }
                                                   """;

    public const string DataElementTypeAttributeName = "DataElementTypeAttribute";

    // language=csharp
    public const string DataElementTypeAttribute = $$"""
                                                     // <auto-generated />
                                                     #nullable enable
                                                     namespace {{AttributeNamespace}};

                                                     [global::System.AttributeUsage(global::System.AttributeTargets.Property)]
                                                     internal class {{DataElementTypeAttributeName}} : global::System.Attribute
                                                     {
                                                         public {{DataElementTypeAttributeName}}(global::{{AttributeNamespace}}.DataElementTypes type)
                                                         {
                                                             this.Type = type;
                                                         }

                                                         /// <summary>
                                                         /// Gets the type of the DataElement for the property marked by this attribute. />
                                                         /// </summary>
                                                         public global::{{AttributeNamespace}}.DataElementTypes Type { get; }

                                                         /// <summary>
                                                         /// Gets or sets the property name localization key override for the property marked by this attribute. <br/>
                                                         /// Only valid for <see cref="DataElementTypes.Grouped"/>, <see cref="DataElementTypes.KeyValue"/>, <see cref="DataElementTypes.KeyValueUnit"/> and <see cref="DataElementTypes.Tooltip"/>.
                                                         /// </summary>
                                                         public string? LocalizationKeyOverride { get; set; }

                                                         /// <summary>
                                                         /// Gets or sets the unit localization key for the property marked by this attribute. <br/>
                                                         /// Only valid for <see cref="DataElementTypes.KeyValueUnit"/> and <see cref="DataElementTypes.Tooltip"/>.
                                                         /// </summary>
                                                         public string? UnitKey { get; set; }

                                                         /// <summary>
                                                         /// Gets or sets the tooltip localization key for the property marked by this attribute. <br/>
                                                         /// Only valid for <see cref="DataElementTypes.Tooltip"/>.
                                                         /// </summary>
                                                         public string? TooltipKey { get; set; }

                                                         /// <summary>
                                                         /// Gets or sets the group localization key and identifier for the property marked by this attribute. <br/>
                                                         /// Only valid for <see cref="DataElementTypes.Grouped"/>.
                                                         /// </summary>
                                                         public string? GroupKey { get; set; }

                                                         /// <summary>
                                                         /// Gets or sets the <see cref="TextKind"/> of the value of the property marked by this attribute. <br/>
                                                         /// Only valid for <see cref="DataElementTypes.Value"/>, <see cref="DataElementTypes.KeyValue"/> and <see cref="DataElementTypes.FormattedText"/>
                                                         /// </summary>
                                                         public global::{{AttributeNamespace}}.{{DataElementTextKindEnumName}} ValueTextKind { get; set; }

                                                         /// <summary>
                                                         /// Gets or set the name of the property containing the list of values that will replace the placeholder. Requires the value of the property marked by this attribute to follow the <see cref="string.Format(string,object[])"/> specifications. <br/>
                                                         /// Only valid for <see cref="DataElementTypes.FormattedText"/>.
                                                         /// </summary>
                                                         public string? ArgumentsCollectionName { get; set; }

                                                         /// <summary>
                                                         /// Gets or sets the <see cref="TextKind"/> of the argument values of the property marked by this attribute. <br/>
                                                         /// Only valid for <see cref="DataElementTypes.FormattedText"/>
                                                         /// </summary>
                                                         public global::{{AttributeNamespace}}.{{DataElementTextKindEnumName}} ArgumentsTextKind { get; set; }
                                                     }
                                                     """;

    public const string DataElementFilteringAttributeName = "DataElementFilteringAttribute";

    // language=csharp
    public const string DataElementFilteringAttribute = $$"""
                                                          // <auto-generated />
                                                          #nullable enable
                                                          namespace {{AttributeNamespace}};

                                                          [global::System.AttributeUsage(global::System.AttributeTargets.Property)]
                                                          internal class {{DataElementFilteringAttributeName}} : global::System.Attribute
                                                          {
                                                              public {{DataElementFilteringAttributeName}}(bool enableFilterVisibility, string filterMethodName = "")
                                                              {
                                                                  this.EnableFilterVisibility = enableFilterVisibility;
                                                                  this.FilterMethodName = filterMethodName;
                                                              }

                                                              public bool EnableFilterVisibility { get; }

                                                              public string FilterMethodName { get; }
                                                          }
                                                          """;

    public static void GenerateAttributes(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource("DataElementTypes.g.cs", DataElementTypesEnum);
        context.AddSource("TextKind.g.cs", DataElementTextKindEnum);
        context.AddSource("DataContainerAttribute.g.cs", DataContainerAttribute);
        context.AddSource("DataElementTypeAttribute.g.cs", DataElementTypeAttribute);
        context.AddSource("DataElementFilteringAttribute.g.cs", DataElementFilteringAttribute);
    }
}
